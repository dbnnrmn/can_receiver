
can_uart_f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003940  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08003a4c  08003a4c  00013a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b3c  08003b3c  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08003b3c  08003b3c  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b3c  08003b3c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b3c  08003b3c  00013b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b40  08003b40  00013b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08003b44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  20000088  08003bcc  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000228  08003bcc  00020228  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007d75  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fe7  00000000  00000000  00027e26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008f0  00000000  00000000  00029e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007e8  00000000  00000000  0002a700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019632  00000000  00000000  0002aee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a3a1  00000000  00000000  0004451a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a0d5  00000000  00000000  0004e8bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d8990  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028ec  00000000  00000000  000d89e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a34 	.word	0x08003a34

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08003a34 	.word	0x08003a34

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <can_init>:
uint8_t RxData[10] = { 0 };

static int can_write_callback(void *arg);
static ushell_command can_command = { .alias = "canwrite", .func = &can_write_callback, .name = "can", .value = USHELL_VALUE_RAW };

void can_init(void) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b08c      	sub	sp, #48	; 0x30
 8000160:	af00      	add	r7, sp, #0

	//1000k

	hcan.Instance = CAN1;
 8000162:	4b32      	ldr	r3, [pc, #200]	; (800022c <can_init+0xd0>)
 8000164:	4a32      	ldr	r2, [pc, #200]	; (8000230 <can_init+0xd4>)
 8000166:	601a      	str	r2, [r3, #0]
	// hcan.Init.Prescaler = 90;

	hcan.Init.Mode = CAN_MODE_NORMAL;
 8000168:	4b30      	ldr	r3, [pc, #192]	; (800022c <can_init+0xd0>)
 800016a:	2200      	movs	r2, #0
 800016c:	609a      	str	r2, [r3, #8]
	 hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
	 */


	//250kbit
	hcan.Init.Prescaler = 16;
 800016e:	4b2f      	ldr	r3, [pc, #188]	; (800022c <can_init+0xd0>)
 8000170:	2210      	movs	r2, #16
 8000172:	605a      	str	r2, [r3, #4]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000174:	4b2d      	ldr	r3, [pc, #180]	; (800022c <can_init+0xd0>)
 8000176:	2200      	movs	r2, #0
 8000178:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 800017a:	4b2c      	ldr	r3, [pc, #176]	; (800022c <can_init+0xd0>)
 800017c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8000180:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000182:	4b2a      	ldr	r3, [pc, #168]	; (800022c <can_init+0xd0>)
 8000184:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000188:	615a      	str	r2, [r3, #20]

	hcan.Init.TimeTriggeredMode = DISABLE;
 800018a:	4b28      	ldr	r3, [pc, #160]	; (800022c <can_init+0xd0>)
 800018c:	2200      	movs	r2, #0
 800018e:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = ENABLE;
 8000190:	4b26      	ldr	r3, [pc, #152]	; (800022c <can_init+0xd0>)
 8000192:	2201      	movs	r2, #1
 8000194:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8000196:	4b25      	ldr	r3, [pc, #148]	; (800022c <can_init+0xd0>)
 8000198:	2200      	movs	r2, #0
 800019a:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 800019c:	4b23      	ldr	r3, [pc, #140]	; (800022c <can_init+0xd0>)
 800019e:	2200      	movs	r2, #0
 80001a0:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 80001a2:	4b22      	ldr	r3, [pc, #136]	; (800022c <can_init+0xd0>)
 80001a4:	2200      	movs	r2, #0
 80001a6:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = ENABLE;
 80001a8:	4b20      	ldr	r3, [pc, #128]	; (800022c <can_init+0xd0>)
 80001aa:	2201      	movs	r2, #1
 80001ac:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 80001ae:	481f      	ldr	r0, [pc, #124]	; (800022c <can_init+0xd0>)
 80001b0:	f000 ff34 	bl	800101c <HAL_CAN_Init>
 80001b4:	4603      	mov	r3, r0
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d001      	beq.n	80001be <can_init+0x62>
		Error_Handler();
 80001ba:	f000 f9b1 	bl	8000520 <Error_Handler>
	}

	CAN_FilterTypeDef canFilterConfig;
	canFilterConfig.FilterBank = 0;
 80001be:	2300      	movs	r3, #0
 80001c0:	61bb      	str	r3, [r7, #24]
	canFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 80001c2:	2301      	movs	r3, #1
 80001c4:	61fb      	str	r3, [r7, #28]
	canFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80001c6:	2301      	movs	r3, #1
 80001c8:	623b      	str	r3, [r7, #32]
	canFilterConfig.FilterIdHigh = CAN_ID << 5;
 80001ca:	f44f 6372 	mov.w	r3, #3872	; 0xf20
 80001ce:	607b      	str	r3, [r7, #4]
	canFilterConfig.FilterIdLow = 0x0000;
 80001d0:	2300      	movs	r3, #0
 80001d2:	60bb      	str	r3, [r7, #8]
	canFilterConfig.FilterMaskIdHigh = CAN_ID << 5;
 80001d4:	f44f 6372 	mov.w	r3, #3872	; 0xf20
 80001d8:	60fb      	str	r3, [r7, #12]
	canFilterConfig.FilterMaskIdLow = 0x0000;
 80001da:	2300      	movs	r3, #0
 80001dc:	613b      	str	r3, [r7, #16]
	canFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80001de:	2300      	movs	r3, #0
 80001e0:	617b      	str	r3, [r7, #20]
	canFilterConfig.FilterActivation = ENABLE;
 80001e2:	2301      	movs	r3, #1
 80001e4:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan, &canFilterConfig) != HAL_OK) {
 80001e6:	1d3b      	adds	r3, r7, #4
 80001e8:	4619      	mov	r1, r3
 80001ea:	4810      	ldr	r0, [pc, #64]	; (800022c <can_init+0xd0>)
 80001ec:	f001 f811 	bl	8001212 <HAL_CAN_ConfigFilter>
 80001f0:	4603      	mov	r3, r0
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d001      	beq.n	80001fa <can_init+0x9e>
		Error_Handler();
 80001f6:	f000 f993 	bl	8000520 <Error_Handler>
	}

	HAL_StatusTypeDef status = HAL_CAN_Start(&hcan);
 80001fa:	480c      	ldr	r0, [pc, #48]	; (800022c <can_init+0xd0>)
 80001fc:	f001 f8d2 	bl	80013a4 <HAL_CAN_Start>
 8000200:	4603      	mov	r3, r0
 8000202:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	HAL_CAN_ActivateNotification(&hcan,
 8000206:	f648 4102 	movw	r1, #35842	; 0x8c02
 800020a:	4808      	ldr	r0, [pc, #32]	; (800022c <can_init+0xd0>)
 800020c:	f001 fafe 	bl	800180c <HAL_CAN_ActivateNotification>
	CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_ERROR | CAN_IT_BUSOFF | CAN_IT_LAST_ERROR_CODE);

	RxData[0] = 0xFF;
 8000210:	4b08      	ldr	r3, [pc, #32]	; (8000234 <can_init+0xd8>)
 8000212:	22ff      	movs	r2, #255	; 0xff
 8000214:	701a      	strb	r2, [r3, #0]
	RxData[1] = 0xFA;
 8000216:	4b07      	ldr	r3, [pc, #28]	; (8000234 <can_init+0xd8>)
 8000218:	22fa      	movs	r2, #250	; 0xfa
 800021a:	705a      	strb	r2, [r3, #1]

	ushell_add_command(&can_command);
 800021c:	4806      	ldr	r0, [pc, #24]	; (8000238 <can_init+0xdc>)
 800021e:	f000 fc59 	bl	8000ad4 <ushell_add_command>

}
 8000222:	bf00      	nop
 8000224:	3730      	adds	r7, #48	; 0x30
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop
 800022c:	200000a4 	.word	0x200000a4
 8000230:	40006400 	.word	0x40006400
 8000234:	20000104 	.word	0x20000104
 8000238:	20000000 	.word	0x20000000

0800023c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan) {
 800023c:	b580      	push	{r7, lr}
 800023e:	b088      	sub	sp, #32
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000244:	f107 0310 	add.w	r3, r7, #16
 8000248:	2200      	movs	r2, #0
 800024a:	601a      	str	r2, [r3, #0]
 800024c:	605a      	str	r2, [r3, #4]
 800024e:	609a      	str	r2, [r3, #8]
 8000250:	60da      	str	r2, [r3, #12]
	if (hcan->Instance == CAN1) {
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	4a24      	ldr	r2, [pc, #144]	; (80002e8 <HAL_CAN_MspInit+0xac>)
 8000258:	4293      	cmp	r3, r2
 800025a:	d141      	bne.n	80002e0 <HAL_CAN_MspInit+0xa4>
		/* USER CODE BEGIN CAN1_MspInit 0 */

		/* USER CODE END CAN1_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_CAN1_CLK_ENABLE();
 800025c:	4b23      	ldr	r3, [pc, #140]	; (80002ec <HAL_CAN_MspInit+0xb0>)
 800025e:	69db      	ldr	r3, [r3, #28]
 8000260:	4a22      	ldr	r2, [pc, #136]	; (80002ec <HAL_CAN_MspInit+0xb0>)
 8000262:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000266:	61d3      	str	r3, [r2, #28]
 8000268:	4b20      	ldr	r3, [pc, #128]	; (80002ec <HAL_CAN_MspInit+0xb0>)
 800026a:	69db      	ldr	r3, [r3, #28]
 800026c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000270:	60fb      	str	r3, [r7, #12]
 8000272:	68fb      	ldr	r3, [r7, #12]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000274:	4b1d      	ldr	r3, [pc, #116]	; (80002ec <HAL_CAN_MspInit+0xb0>)
 8000276:	699b      	ldr	r3, [r3, #24]
 8000278:	4a1c      	ldr	r2, [pc, #112]	; (80002ec <HAL_CAN_MspInit+0xb0>)
 800027a:	f043 0304 	orr.w	r3, r3, #4
 800027e:	6193      	str	r3, [r2, #24]
 8000280:	4b1a      	ldr	r3, [pc, #104]	; (80002ec <HAL_CAN_MspInit+0xb0>)
 8000282:	699b      	ldr	r3, [r3, #24]
 8000284:	f003 0304 	and.w	r3, r3, #4
 8000288:	60bb      	str	r3, [r7, #8]
 800028a:	68bb      	ldr	r3, [r7, #8]
		/*CAN GPIO Configuration
		 PA11     ------> CAN_RX
		 PA12     ------> CAN_TX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_11;
 800028c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000290:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000292:	2300      	movs	r3, #0
 8000294:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000296:	2300      	movs	r3, #0
 8000298:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800029a:	f107 0310 	add.w	r3, r7, #16
 800029e:	4619      	mov	r1, r3
 80002a0:	4813      	ldr	r0, [pc, #76]	; (80002f0 <HAL_CAN_MspInit+0xb4>)
 80002a2:	f001 fe09 	bl	8001eb8 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_12;
 80002a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002aa:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80002ac:	2302      	movs	r3, #2
 80002ae:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002b0:	2303      	movs	r3, #3
 80002b2:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002b4:	f107 0310 	add.w	r3, r7, #16
 80002b8:	4619      	mov	r1, r3
 80002ba:	480d      	ldr	r0, [pc, #52]	; (80002f0 <HAL_CAN_MspInit+0xb4>)
 80002bc:	f001 fdfc 	bl	8001eb8 <HAL_GPIO_Init>

		HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80002c0:	2200      	movs	r2, #0
 80002c2:	2100      	movs	r1, #0
 80002c4:	2014      	movs	r0, #20
 80002c6:	f001 fdc0 	bl	8001e4a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80002ca:	2014      	movs	r0, #20
 80002cc:	f001 fdd9 	bl	8001e82 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 80002d0:	2200      	movs	r2, #0
 80002d2:	2100      	movs	r1, #0
 80002d4:	2016      	movs	r0, #22
 80002d6:	f001 fdb8 	bl	8001e4a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80002da:	2016      	movs	r0, #22
 80002dc:	f001 fdd1 	bl	8001e82 <HAL_NVIC_EnableIRQ>
	}

}
 80002e0:	bf00      	nop
 80002e2:	3720      	adds	r7, #32
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	40006400 	.word	0x40006400
 80002ec:	40021000 	.word	0x40021000
 80002f0:	40010800 	.word	0x40010800

080002f4 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b082      	sub	sp, #8
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, &RxData[2]) == HAL_OK) {
 80002fc:	4b08      	ldr	r3, [pc, #32]	; (8000320 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80002fe:	4a09      	ldr	r2, [pc, #36]	; (8000324 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000300:	2100      	movs	r1, #0
 8000302:	6878      	ldr	r0, [r7, #4]
 8000304:	f001 f961 	bl	80015ca <HAL_CAN_GetRxMessage>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d103      	bne.n	8000316 <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
		ushell_write(RxData, 10);
 800030e:	210a      	movs	r1, #10
 8000310:	4805      	ldr	r0, [pc, #20]	; (8000328 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000312:	f000 fbb9 	bl	8000a88 <ushell_write>
		// can_test();
	}
}
 8000316:	bf00      	nop
 8000318:	3708      	adds	r7, #8
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	20000106 	.word	0x20000106
 8000324:	200000e8 	.word	0x200000e8
 8000328:	20000104 	.word	0x20000104

0800032c <can_write>:

static int can_write(uint32_t id, uint8_t *data, uint32_t len) {
 800032c:	b580      	push	{r7, lr}
 800032e:	b084      	sub	sp, #16
 8000330:	af00      	add	r7, sp, #0
 8000332:	60f8      	str	r0, [r7, #12]
 8000334:	60b9      	str	r1, [r7, #8]
 8000336:	607a      	str	r2, [r7, #4]

	TxHeader.StdId = id;
 8000338:	4a0e      	ldr	r2, [pc, #56]	; (8000374 <can_write+0x48>)
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	6013      	str	r3, [r2, #0]
	TxHeader.ExtId = 0;
 800033e:	4b0d      	ldr	r3, [pc, #52]	; (8000374 <can_write+0x48>)
 8000340:	2200      	movs	r2, #0
 8000342:	605a      	str	r2, [r3, #4]
	TxHeader.RTR = CAN_RTR_DATA; //CAN_RTR_REMOTE
 8000344:	4b0b      	ldr	r3, [pc, #44]	; (8000374 <can_write+0x48>)
 8000346:	2200      	movs	r2, #0
 8000348:	60da      	str	r2, [r3, #12]
	TxHeader.IDE = CAN_ID_STD;   // CAN_ID_EXT
 800034a:	4b0a      	ldr	r3, [pc, #40]	; (8000374 <can_write+0x48>)
 800034c:	2200      	movs	r2, #0
 800034e:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = len;
 8000350:	4a08      	ldr	r2, [pc, #32]	; (8000374 <can_write+0x48>)
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	6113      	str	r3, [r2, #16]
	TxHeader.TransmitGlobalTime = 0;
 8000356:	4b07      	ldr	r3, [pc, #28]	; (8000374 <can_write+0x48>)
 8000358:	2200      	movs	r2, #0
 800035a:	751a      	strb	r2, [r3, #20]

	HAL_CAN_AddTxMessage(&hcan, &TxHeader, data, &TxMailbox);
 800035c:	4b06      	ldr	r3, [pc, #24]	; (8000378 <can_write+0x4c>)
 800035e:	68ba      	ldr	r2, [r7, #8]
 8000360:	4904      	ldr	r1, [pc, #16]	; (8000374 <can_write+0x48>)
 8000362:	4806      	ldr	r0, [pc, #24]	; (800037c <can_write+0x50>)
 8000364:	f001 f862 	bl	800142c <HAL_CAN_AddTxMessage>
}
 8000368:	bf00      	nop
 800036a:	4618      	mov	r0, r3
 800036c:	3710      	adds	r7, #16
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	200000cc 	.word	0x200000cc
 8000378:	200000e4 	.word	0x200000e4
 800037c:	200000a4 	.word	0x200000a4

08000380 <can_write_callback>:

static int can_write_callback(void *arg) {
 8000380:	b580      	push	{r7, lr}
 8000382:	b086      	sub	sp, #24
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
	uint8_t data[8];
	uint32_t id = 0;
 8000388:	2300      	movs	r3, #0
 800038a:	60fb      	str	r3, [r7, #12]
	uint32_t pos = 0;
 800038c:	2300      	movs	r3, #0
 800038e:	60bb      	str	r3, [r7, #8]
	if (!ushell_parse_uint32(arg, &id, &pos))
 8000390:	f107 0208 	add.w	r2, r7, #8
 8000394:	f107 030c 	add.w	r3, r7, #12
 8000398:	4619      	mov	r1, r3
 800039a:	6878      	ldr	r0, [r7, #4]
 800039c:	f000 fd02 	bl	8000da4 <ushell_parse_uint32>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d102      	bne.n	80003ac <can_write_callback+0x2c>
		return -1;
 80003a6:	f04f 33ff 	mov.w	r3, #4294967295
 80003aa:	e017      	b.n	80003dc <can_write_callback+0x5c>
	arg += pos;
 80003ac:	68bb      	ldr	r3, [r7, #8]
 80003ae:	687a      	ldr	r2, [r7, #4]
 80003b0:	4413      	add	r3, r2
 80003b2:	607b      	str	r3, [r7, #4]
	if (!ushell_parse_bytes(arg, data, 8))
 80003b4:	f107 0310 	add.w	r3, r7, #16
 80003b8:	2208      	movs	r2, #8
 80003ba:	4619      	mov	r1, r3
 80003bc:	6878      	ldr	r0, [r7, #4]
 80003be:	f000 fc53 	bl	8000c68 <ushell_parse_bytes>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d102      	bne.n	80003ce <can_write_callback+0x4e>
		return -1;
 80003c8:	f04f 33ff 	mov.w	r3, #4294967295
 80003cc:	e006      	b.n	80003dc <can_write_callback+0x5c>

	can_write(id, data, 8);
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	f107 0110 	add.w	r1, r7, #16
 80003d4:	2208      	movs	r2, #8
 80003d6:	4618      	mov	r0, r3
 80003d8:	f7ff ffa8 	bl	800032c <can_write>

}
 80003dc:	4618      	mov	r0, r3
 80003de:	3718      	adds	r7, #24
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}

080003e4 <USB_LP_CAN1_RX0_IRQHandler>:
	}
	HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);

}

void USB_LP_CAN1_RX0_IRQHandler(void) {
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan);
 80003e8:	4802      	ldr	r0, [pc, #8]	; (80003f4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80003ea:	f001 fa34 	bl	8001856 <HAL_CAN_IRQHandler>
}
 80003ee:	bf00      	nop
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	200000a4 	.word	0x200000a4

080003f8 <CAN1_RX1_IRQHandler>:

void CAN1_RX1_IRQHandler(void) {
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan);
 80003fc:	4802      	ldr	r0, [pc, #8]	; (8000408 <CAN1_RX1_IRQHandler+0x10>)
 80003fe:	f001 fa2a 	bl	8001856 <HAL_CAN_IRQHandler>
}
 8000402:	bf00      	nop
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	200000a4 	.word	0x200000a4

0800040c <USB_HP_CAN1_TX_IRQHandler>:

void USB_HP_CAN1_TX_IRQHandler(void) {
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan);
 8000410:	4802      	ldr	r0, [pc, #8]	; (800041c <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000412:	f001 fa20 	bl	8001856 <HAL_CAN_IRQHandler>
}
 8000416:	bf00      	nop
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	200000a4 	.word	0x200000a4

08000420 <CAN1_SCE_IRQHandler>:

void CAN1_SCE_IRQHandler(void) {
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan);
 8000424:	4802      	ldr	r0, [pc, #8]	; (8000430 <CAN1_SCE_IRQHandler+0x10>)
 8000426:	f001 fa16 	bl	8001856 <HAL_CAN_IRQHandler>
}
 800042a:	bf00      	nop
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	200000a4 	.word	0x200000a4

08000434 <main>:
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
 8000438:	f000 fd8e 	bl	8000f58 <HAL_Init>
 800043c:	f000 f809 	bl	8000452 <SystemClock_Config>
 8000440:	f000 f84c 	bl	80004dc <MX_GPIO_Init>
 8000444:	f000 fab4 	bl	80009b0 <ushell_init>
 8000448:	f7ff fe88 	bl	800015c <can_init>
 800044c:	b662      	cpsie	i
 800044e:	bf00      	nop
 8000450:	e7fe      	b.n	8000450 <main+0x1c>

08000452 <SystemClock_Config>:
 8000452:	b580      	push	{r7, lr}
 8000454:	b090      	sub	sp, #64	; 0x40
 8000456:	af00      	add	r7, sp, #0
 8000458:	f107 0318 	add.w	r3, r7, #24
 800045c:	2228      	movs	r2, #40	; 0x28
 800045e:	2100      	movs	r1, #0
 8000460:	4618      	mov	r0, r3
 8000462:	f002 fddb 	bl	800301c <memset>
 8000466:	1d3b      	adds	r3, r7, #4
 8000468:	2200      	movs	r2, #0
 800046a:	601a      	str	r2, [r3, #0]
 800046c:	605a      	str	r2, [r3, #4]
 800046e:	609a      	str	r2, [r3, #8]
 8000470:	60da      	str	r2, [r3, #12]
 8000472:	611a      	str	r2, [r3, #16]
 8000474:	2301      	movs	r3, #1
 8000476:	61bb      	str	r3, [r7, #24]
 8000478:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800047c:	61fb      	str	r3, [r7, #28]
 800047e:	2300      	movs	r3, #0
 8000480:	623b      	str	r3, [r7, #32]
 8000482:	2301      	movs	r3, #1
 8000484:	62bb      	str	r3, [r7, #40]	; 0x28
 8000486:	2302      	movs	r3, #2
 8000488:	637b      	str	r3, [r7, #52]	; 0x34
 800048a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800048e:	63bb      	str	r3, [r7, #56]	; 0x38
 8000490:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000494:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000496:	f107 0318 	add.w	r3, r7, #24
 800049a:	4618      	mov	r0, r3
 800049c:	f001 fe90 	bl	80021c0 <HAL_RCC_OscConfig>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <SystemClock_Config+0x58>
 80004a6:	f000 f83b 	bl	8000520 <Error_Handler>
 80004aa:	230f      	movs	r3, #15
 80004ac:	607b      	str	r3, [r7, #4]
 80004ae:	2302      	movs	r3, #2
 80004b0:	60bb      	str	r3, [r7, #8]
 80004b2:	2300      	movs	r3, #0
 80004b4:	60fb      	str	r3, [r7, #12]
 80004b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004ba:	613b      	str	r3, [r7, #16]
 80004bc:	2300      	movs	r3, #0
 80004be:	617b      	str	r3, [r7, #20]
 80004c0:	1d3b      	adds	r3, r7, #4
 80004c2:	2102      	movs	r1, #2
 80004c4:	4618      	mov	r0, r3
 80004c6:	f002 f8fd 	bl	80026c4 <HAL_RCC_ClockConfig>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <SystemClock_Config+0x82>
 80004d0:	f000 f826 	bl	8000520 <Error_Handler>
 80004d4:	bf00      	nop
 80004d6:	3740      	adds	r7, #64	; 0x40
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}

080004dc <MX_GPIO_Init>:
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4b0e      	ldr	r3, [pc, #56]	; (800051c <MX_GPIO_Init+0x40>)
 80004e4:	699b      	ldr	r3, [r3, #24]
 80004e6:	4a0d      	ldr	r2, [pc, #52]	; (800051c <MX_GPIO_Init+0x40>)
 80004e8:	f043 0320 	orr.w	r3, r3, #32
 80004ec:	6193      	str	r3, [r2, #24]
 80004ee:	4b0b      	ldr	r3, [pc, #44]	; (800051c <MX_GPIO_Init+0x40>)
 80004f0:	699b      	ldr	r3, [r3, #24]
 80004f2:	f003 0320 	and.w	r3, r3, #32
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	4b08      	ldr	r3, [pc, #32]	; (800051c <MX_GPIO_Init+0x40>)
 80004fc:	699b      	ldr	r3, [r3, #24]
 80004fe:	4a07      	ldr	r2, [pc, #28]	; (800051c <MX_GPIO_Init+0x40>)
 8000500:	f043 0304 	orr.w	r3, r3, #4
 8000504:	6193      	str	r3, [r2, #24]
 8000506:	4b05      	ldr	r3, [pc, #20]	; (800051c <MX_GPIO_Init+0x40>)
 8000508:	699b      	ldr	r3, [r3, #24]
 800050a:	f003 0304 	and.w	r3, r3, #4
 800050e:	603b      	str	r3, [r7, #0]
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	bf00      	nop
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	bc80      	pop	{r7}
 800051a:	4770      	bx	lr
 800051c:	40021000 	.word	0x40021000

08000520 <Error_Handler>:
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
 8000524:	b672      	cpsid	i
 8000526:	bf00      	nop
 8000528:	e7fe      	b.n	8000528 <Error_Handler+0x8>
	...

0800052c <HAL_MspInit>:
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	4b0e      	ldr	r3, [pc, #56]	; (800056c <HAL_MspInit+0x40>)
 8000534:	699b      	ldr	r3, [r3, #24]
 8000536:	4a0d      	ldr	r2, [pc, #52]	; (800056c <HAL_MspInit+0x40>)
 8000538:	f043 0301 	orr.w	r3, r3, #1
 800053c:	6193      	str	r3, [r2, #24]
 800053e:	4b0b      	ldr	r3, [pc, #44]	; (800056c <HAL_MspInit+0x40>)
 8000540:	699b      	ldr	r3, [r3, #24]
 8000542:	f003 0301 	and.w	r3, r3, #1
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	4b08      	ldr	r3, [pc, #32]	; (800056c <HAL_MspInit+0x40>)
 800054c:	69db      	ldr	r3, [r3, #28]
 800054e:	4a07      	ldr	r2, [pc, #28]	; (800056c <HAL_MspInit+0x40>)
 8000550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000554:	61d3      	str	r3, [r2, #28]
 8000556:	4b05      	ldr	r3, [pc, #20]	; (800056c <HAL_MspInit+0x40>)
 8000558:	69db      	ldr	r3, [r3, #28]
 800055a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800055e:	603b      	str	r3, [r7, #0]
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	bf00      	nop
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	bc80      	pop	{r7}
 800056a:	4770      	bx	lr
 800056c:	40021000 	.word	0x40021000

08000570 <NMI_Handler>:
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
 8000574:	e7fe      	b.n	8000574 <NMI_Handler+0x4>

08000576 <HardFault_Handler>:
 8000576:	b480      	push	{r7}
 8000578:	af00      	add	r7, sp, #0
 800057a:	e7fe      	b.n	800057a <HardFault_Handler+0x4>

0800057c <MemManage_Handler>:
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
 8000580:	e7fe      	b.n	8000580 <MemManage_Handler+0x4>

08000582 <BusFault_Handler>:
 8000582:	b480      	push	{r7}
 8000584:	af00      	add	r7, sp, #0
 8000586:	e7fe      	b.n	8000586 <BusFault_Handler+0x4>

08000588 <UsageFault_Handler>:
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
 800058c:	e7fe      	b.n	800058c <UsageFault_Handler+0x4>

0800058e <SVC_Handler>:
 800058e:	b480      	push	{r7}
 8000590:	af00      	add	r7, sp, #0
 8000592:	bf00      	nop
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr

0800059a <DebugMon_Handler>:
 800059a:	b480      	push	{r7}
 800059c:	af00      	add	r7, sp, #0
 800059e:	bf00      	nop
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bc80      	pop	{r7}
 80005a4:	4770      	bx	lr

080005a6 <PendSV_Handler>:
 80005a6:	b480      	push	{r7}
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	bf00      	nop
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bc80      	pop	{r7}
 80005b0:	4770      	bx	lr

080005b2 <SysTick_Handler>:
 80005b2:	b580      	push	{r7, lr}
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	f000 fd15 	bl	8000fe4 <HAL_IncTick>
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}

080005be <_read>:
 80005be:	b580      	push	{r7, lr}
 80005c0:	b086      	sub	sp, #24
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	60f8      	str	r0, [r7, #12]
 80005c6:	60b9      	str	r1, [r7, #8]
 80005c8:	607a      	str	r2, [r7, #4]
 80005ca:	2300      	movs	r3, #0
 80005cc:	617b      	str	r3, [r7, #20]
 80005ce:	e00a      	b.n	80005e6 <_read+0x28>
 80005d0:	f3af 8000 	nop.w
 80005d4:	4601      	mov	r1, r0
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	1c5a      	adds	r2, r3, #1
 80005da:	60ba      	str	r2, [r7, #8]
 80005dc:	b2ca      	uxtb	r2, r1
 80005de:	701a      	strb	r2, [r3, #0]
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	3301      	adds	r3, #1
 80005e4:	617b      	str	r3, [r7, #20]
 80005e6:	697a      	ldr	r2, [r7, #20]
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	429a      	cmp	r2, r3
 80005ec:	dbf0      	blt.n	80005d0 <_read+0x12>
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4618      	mov	r0, r3
 80005f2:	3718      	adds	r7, #24
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <_write>:
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b086      	sub	sp, #24
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	60f8      	str	r0, [r7, #12]
 8000600:	60b9      	str	r1, [r7, #8]
 8000602:	607a      	str	r2, [r7, #4]
 8000604:	2300      	movs	r3, #0
 8000606:	617b      	str	r3, [r7, #20]
 8000608:	e009      	b.n	800061e <_write+0x26>
 800060a:	68bb      	ldr	r3, [r7, #8]
 800060c:	1c5a      	adds	r2, r3, #1
 800060e:	60ba      	str	r2, [r7, #8]
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	4618      	mov	r0, r3
 8000614:	f3af 8000 	nop.w
 8000618:	697b      	ldr	r3, [r7, #20]
 800061a:	3301      	adds	r3, #1
 800061c:	617b      	str	r3, [r7, #20]
 800061e:	697a      	ldr	r2, [r7, #20]
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	429a      	cmp	r2, r3
 8000624:	dbf1      	blt.n	800060a <_write+0x12>
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4618      	mov	r0, r3
 800062a:	3718      	adds	r7, #24
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <_close>:
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	f04f 33ff 	mov.w	r3, #4294967295
 800063c:	4618      	mov	r0, r3
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	bc80      	pop	{r7}
 8000644:	4770      	bx	lr

08000646 <_fstat>:
 8000646:	b480      	push	{r7}
 8000648:	b083      	sub	sp, #12
 800064a:	af00      	add	r7, sp, #0
 800064c:	6078      	str	r0, [r7, #4]
 800064e:	6039      	str	r1, [r7, #0]
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	2300      	movs	r3, #0
 800065a:	4618      	mov	r0, r3
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	bc80      	pop	{r7}
 8000662:	4770      	bx	lr

08000664 <_isatty>:
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	2301      	movs	r3, #1
 800066e:	4618      	mov	r0, r3
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr

08000678 <_lseek>:
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	607a      	str	r2, [r7, #4]
 8000684:	2300      	movs	r3, #0
 8000686:	4618      	mov	r0, r3
 8000688:	3714      	adds	r7, #20
 800068a:	46bd      	mov	sp, r7
 800068c:	bc80      	pop	{r7}
 800068e:	4770      	bx	lr

08000690 <_sbrk>:
 8000690:	b580      	push	{r7, lr}
 8000692:	b086      	sub	sp, #24
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	4a14      	ldr	r2, [pc, #80]	; (80006ec <_sbrk+0x5c>)
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <_sbrk+0x60>)
 800069c:	1ad3      	subs	r3, r2, r3
 800069e:	617b      	str	r3, [r7, #20]
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	613b      	str	r3, [r7, #16]
 80006a4:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <_sbrk+0x64>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d102      	bne.n	80006b2 <_sbrk+0x22>
 80006ac:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <_sbrk+0x64>)
 80006ae:	4a12      	ldr	r2, [pc, #72]	; (80006f8 <_sbrk+0x68>)
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <_sbrk+0x64>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4413      	add	r3, r2
 80006ba:	693a      	ldr	r2, [r7, #16]
 80006bc:	429a      	cmp	r2, r3
 80006be:	d207      	bcs.n	80006d0 <_sbrk+0x40>
 80006c0:	f002 fc82 	bl	8002fc8 <__errno>
 80006c4:	4603      	mov	r3, r0
 80006c6:	220c      	movs	r2, #12
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	f04f 33ff 	mov.w	r3, #4294967295
 80006ce:	e009      	b.n	80006e4 <_sbrk+0x54>
 80006d0:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <_sbrk+0x64>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	60fb      	str	r3, [r7, #12]
 80006d6:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <_sbrk+0x64>)
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4413      	add	r3, r2
 80006de:	4a05      	ldr	r2, [pc, #20]	; (80006f4 <_sbrk+0x64>)
 80006e0:	6013      	str	r3, [r2, #0]
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	4618      	mov	r0, r3
 80006e6:	3718      	adds	r7, #24
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20005000 	.word	0x20005000
 80006f0:	00000400 	.word	0x00000400
 80006f4:	20000110 	.word	0x20000110
 80006f8:	20000228 	.word	0x20000228

080006fc <SystemInit>:
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	bc80      	pop	{r7}
 8000706:	4770      	bx	lr

08000708 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800070c:	4b04      	ldr	r3, [pc, #16]	; (8000720 <__NVIC_GetPriorityGrouping+0x18>)
 800070e:	68db      	ldr	r3, [r3, #12]
 8000710:	0a1b      	lsrs	r3, r3, #8
 8000712:	f003 0307 	and.w	r3, r3, #7
}
 8000716:	4618      	mov	r0, r3
 8000718:	46bd      	mov	sp, r7
 800071a:	bc80      	pop	{r7}
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	e000ed00 	.word	0xe000ed00

08000724 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800072e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000732:	2b00      	cmp	r3, #0
 8000734:	db0b      	blt.n	800074e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	f003 021f 	and.w	r2, r3, #31
 800073c:	4906      	ldr	r1, [pc, #24]	; (8000758 <__NVIC_EnableIRQ+0x34>)
 800073e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000742:	095b      	lsrs	r3, r3, #5
 8000744:	2001      	movs	r0, #1
 8000746:	fa00 f202 	lsl.w	r2, r0, r2
 800074a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800074e:	bf00      	nop
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr
 8000758:	e000e100 	.word	0xe000e100

0800075c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076a:	2b00      	cmp	r3, #0
 800076c:	db12      	blt.n	8000794 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	f003 021f 	and.w	r2, r3, #31
 8000774:	490a      	ldr	r1, [pc, #40]	; (80007a0 <__NVIC_DisableIRQ+0x44>)
 8000776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077a:	095b      	lsrs	r3, r3, #5
 800077c:	2001      	movs	r0, #1
 800077e:	fa00 f202 	lsl.w	r2, r0, r2
 8000782:	3320      	adds	r3, #32
 8000784:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000788:	f3bf 8f4f 	dsb	sy
}
 800078c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800078e:	f3bf 8f6f 	isb	sy
}
 8000792:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000794:	bf00      	nop
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	bc80      	pop	{r7}
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	e000e100 	.word	0xe000e100

080007a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	6039      	str	r1, [r7, #0]
 80007ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	db0a      	blt.n	80007ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	b2da      	uxtb	r2, r3
 80007bc:	490c      	ldr	r1, [pc, #48]	; (80007f0 <__NVIC_SetPriority+0x4c>)
 80007be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c2:	0112      	lsls	r2, r2, #4
 80007c4:	b2d2      	uxtb	r2, r2
 80007c6:	440b      	add	r3, r1
 80007c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007cc:	e00a      	b.n	80007e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	b2da      	uxtb	r2, r3
 80007d2:	4908      	ldr	r1, [pc, #32]	; (80007f4 <__NVIC_SetPriority+0x50>)
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	f003 030f 	and.w	r3, r3, #15
 80007da:	3b04      	subs	r3, #4
 80007dc:	0112      	lsls	r2, r2, #4
 80007de:	b2d2      	uxtb	r2, r2
 80007e0:	440b      	add	r3, r1
 80007e2:	761a      	strb	r2, [r3, #24]
}
 80007e4:	bf00      	nop
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bc80      	pop	{r7}
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	e000e100 	.word	0xe000e100
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b089      	sub	sp, #36	; 0x24
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	60b9      	str	r1, [r7, #8]
 8000802:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	f003 0307 	and.w	r3, r3, #7
 800080a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800080c:	69fb      	ldr	r3, [r7, #28]
 800080e:	f1c3 0307 	rsb	r3, r3, #7
 8000812:	2b04      	cmp	r3, #4
 8000814:	bf28      	it	cs
 8000816:	2304      	movcs	r3, #4
 8000818:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	3304      	adds	r3, #4
 800081e:	2b06      	cmp	r3, #6
 8000820:	d902      	bls.n	8000828 <NVIC_EncodePriority+0x30>
 8000822:	69fb      	ldr	r3, [r7, #28]
 8000824:	3b03      	subs	r3, #3
 8000826:	e000      	b.n	800082a <NVIC_EncodePriority+0x32>
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800082c:	f04f 32ff 	mov.w	r2, #4294967295
 8000830:	69bb      	ldr	r3, [r7, #24]
 8000832:	fa02 f303 	lsl.w	r3, r2, r3
 8000836:	43da      	mvns	r2, r3
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	401a      	ands	r2, r3
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000840:	f04f 31ff 	mov.w	r1, #4294967295
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	fa01 f303 	lsl.w	r3, r1, r3
 800084a:	43d9      	mvns	r1, r3
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000850:	4313      	orrs	r3, r2
         );
}
 8000852:	4618      	mov	r0, r3
 8000854:	3724      	adds	r7, #36	; 0x24
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr

0800085c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	60da      	str	r2, [r3, #12]
}
 8000870:	bf00      	nop
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	bc80      	pop	{r7}
 8000878:	4770      	bx	lr

0800087a <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800087a:	b480      	push	{r7}
 800087c:	b083      	sub	sp, #12
 800087e:	af00      	add	r7, sp, #0
 8000880:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	691b      	ldr	r3, [r3, #16]
 8000886:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	695b      	ldr	r3, [r3, #20]
 8000892:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	615a      	str	r2, [r3, #20]
}
 800089a:	bf00      	nop
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	bc80      	pop	{r7}
 80008a2:	4770      	bx	lr

080008a4 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f003 0320 	and.w	r3, r3, #32
 80008b4:	2b20      	cmp	r3, #32
 80008b6:	bf0c      	ite	eq
 80008b8:	2301      	moveq	r3, #1
 80008ba:	2300      	movne	r3, #0
 80008bc:	b2db      	uxtb	r3, r3
}
 80008be:	4618      	mov	r0, r3
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr

080008c8 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008d8:	2b80      	cmp	r3, #128	; 0x80
 80008da:	bf0c      	ite	eq
 80008dc:	2301      	moveq	r3, #1
 80008de:	2300      	movne	r3, #0
 80008e0:	b2db      	uxtb	r3, r3
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr

080008ec <LL_USART_ClearFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_ClearFlag_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_RXNE(USART_TypeDef *USARTx)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	f06f 0220 	mvn.w	r2, #32
 80008fa:	601a      	str	r2, [r3, #0]
}
 80008fc:	bf00      	nop
 80008fe:	370c      	adds	r7, #12
 8000900:	46bd      	mov	sp, r7
 8000902:	bc80      	pop	{r7}
 8000904:	4770      	bx	lr

08000906 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8000906:	b480      	push	{r7}
 8000908:	b089      	sub	sp, #36	; 0x24
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	330c      	adds	r3, #12
 8000912:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	e853 3f00 	ldrex	r3, [r3]
 800091a:	60bb      	str	r3, [r7, #8]
   return(result);
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	f043 0320 	orr.w	r3, r3, #32
 8000922:	61fb      	str	r3, [r7, #28]
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	330c      	adds	r3, #12
 8000928:	69fa      	ldr	r2, [r7, #28]
 800092a:	61ba      	str	r2, [r7, #24]
 800092c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800092e:	6979      	ldr	r1, [r7, #20]
 8000930:	69ba      	ldr	r2, [r7, #24]
 8000932:	e841 2300 	strex	r3, r2, [r1]
 8000936:	613b      	str	r3, [r7, #16]
   return(result);
 8000938:	693b      	ldr	r3, [r7, #16]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d1e7      	bne.n	800090e <LL_USART_EnableIT_RXNE+0x8>
}
 800093e:	bf00      	nop
 8000940:	bf00      	nop
 8000942:	3724      	adds	r7, #36	; 0x24
 8000944:	46bd      	mov	sp, r7
 8000946:	bc80      	pop	{r7}
 8000948:	4770      	bx	lr

0800094a <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 800094a:	b480      	push	{r7}
 800094c:	b083      	sub	sp, #12
 800094e:	af00      	add	r7, sp, #0
 8000950:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	685b      	ldr	r3, [r3, #4]
 8000956:	b2db      	uxtb	r3, r3
}
 8000958:	4618      	mov	r0, r3
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	bc80      	pop	{r7}
 8000960:	4770      	bx	lr

08000962 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000962:	b480      	push	{r7}
 8000964:	b083      	sub	sp, #12
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
 800096a:	460b      	mov	r3, r1
 800096c:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800096e:	78fa      	ldrb	r2, [r7, #3]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	605a      	str	r2, [r3, #4]
}
 8000974:	bf00      	nop
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	bc80      	pop	{r7}
 800097c:	4770      	bx	lr
	...

08000980 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000980:	b480      	push	{r7}
 8000982:	b085      	sub	sp, #20
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000988:	4b08      	ldr	r3, [pc, #32]	; (80009ac <LL_APB2_GRP1_EnableClock+0x2c>)
 800098a:	699a      	ldr	r2, [r3, #24]
 800098c:	4907      	ldr	r1, [pc, #28]	; (80009ac <LL_APB2_GRP1_EnableClock+0x2c>)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4313      	orrs	r3, r2
 8000992:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000994:	4b05      	ldr	r3, [pc, #20]	; (80009ac <LL_APB2_GRP1_EnableClock+0x2c>)
 8000996:	699a      	ldr	r2, [r3, #24]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4013      	ands	r3, r2
 800099c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800099e:	68fb      	ldr	r3, [r7, #12]
}
 80009a0:	bf00      	nop
 80009a2:	3714      	adds	r7, #20
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bc80      	pop	{r7}
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	40021000 	.word	0x40021000

080009b0 <ushell_init>:
    "Wrong parameter!",
    "Right command!",
    "Right paramter!"
};

void ushell_init(){
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08c      	sub	sp, #48	; 0x30
 80009b4:	af00      	add	r7, sp, #0
	 LL_USART_InitTypeDef USART_InitStruct = {0};
 80009b6:	f107 0314 	add.w	r3, r7, #20
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
 80009c4:	611a      	str	r2, [r3, #16]
 80009c6:	615a      	str	r2, [r3, #20]
 80009c8:	619a      	str	r2, [r3, #24]

	  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ca:	463b      	mov	r3, r7
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]

	  /* Peripheral clock enable */
	  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 80009d8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80009dc:	f7ff ffd0 	bl	8000980 <LL_APB2_GRP1_EnableClock>

	  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80009e0:	2004      	movs	r0, #4
 80009e2:	f7ff ffcd 	bl	8000980 <LL_APB2_GRP1_EnableClock>
	  /**USART1 GPIO Configuration
	  PA9   ------> USART1_TX
	  PA10   ------> USART1_RX
	  */
	  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 80009e6:	4b24      	ldr	r3, [pc, #144]	; (8000a78 <ushell_init+0xc8>)
 80009e8:	603b      	str	r3, [r7, #0]
	   GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80009ea:	2309      	movs	r3, #9
 80009ec:	607b      	str	r3, [r7, #4]
	   GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80009ee:	2303      	movs	r3, #3
 80009f0:	60bb      	str	r3, [r7, #8]
	   GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	60fb      	str	r3, [r7, #12]
	   LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f6:	463b      	mov	r3, r7
 80009f8:	4619      	mov	r1, r3
 80009fa:	4820      	ldr	r0, [pc, #128]	; (8000a7c <ushell_init+0xcc>)
 80009fc:	f002 f876 	bl	8002aec <LL_GPIO_Init>

	   GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000a00:	4b1f      	ldr	r3, [pc, #124]	; (8000a80 <ushell_init+0xd0>)
 8000a02:	603b      	str	r3, [r7, #0]
	   GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8000a04:	2304      	movs	r3, #4
 8000a06:	607b      	str	r3, [r7, #4]
	   LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a08:	463b      	mov	r3, r7
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	481b      	ldr	r0, [pc, #108]	; (8000a7c <ushell_init+0xcc>)
 8000a0e:	f002 f86d 	bl	8002aec <LL_GPIO_Init>


	  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000a12:	f7ff fe79 	bl	8000708 <__NVIC_GetPriorityGrouping>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff feeb 	bl	80007f8 <NVIC_EncodePriority>
 8000a22:	4603      	mov	r3, r0
 8000a24:	4619      	mov	r1, r3
 8000a26:	2025      	movs	r0, #37	; 0x25
 8000a28:	f7ff febc 	bl	80007a4 <__NVIC_SetPriority>
	  NVIC_EnableIRQ(USART1_IRQn);
 8000a2c:	2025      	movs	r0, #37	; 0x25
 8000a2e:	f7ff fe79 	bl	8000724 <__NVIC_EnableIRQ>

	  USART_InitStruct.BaudRate =  460800;
 8000a32:	f44f 23e1 	mov.w	r3, #460800	; 0x70800
 8000a36:	617b      	str	r3, [r7, #20]
	  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61bb      	str	r3, [r7, #24]
	  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61fb      	str	r3, [r7, #28]
	  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000a40:	2300      	movs	r3, #0
 8000a42:	623b      	str	r3, [r7, #32]
	  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000a44:	230c      	movs	r3, #12
 8000a46:	627b      	str	r3, [r7, #36]	; 0x24
	  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	62bb      	str	r3, [r7, #40]	; 0x28
	  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
	  LL_USART_EnableIT_RXNE(USART1);
 8000a50:	480c      	ldr	r0, [pc, #48]	; (8000a84 <ushell_init+0xd4>)
 8000a52:	f7ff ff58 	bl	8000906 <LL_USART_EnableIT_RXNE>
	  LL_USART_Init(USART1, &USART_InitStruct);
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4809      	ldr	r0, [pc, #36]	; (8000a84 <ushell_init+0xd4>)
 8000a5e:	f002 fa53 	bl	8002f08 <LL_USART_Init>
	  LL_USART_ConfigAsyncMode(USART1);
 8000a62:	4808      	ldr	r0, [pc, #32]	; (8000a84 <ushell_init+0xd4>)
 8000a64:	f7ff ff09 	bl	800087a <LL_USART_ConfigAsyncMode>
	  LL_USART_Enable(USART1);
 8000a68:	4806      	ldr	r0, [pc, #24]	; (8000a84 <ushell_init+0xd4>)
 8000a6a:	f7ff fef7 	bl	800085c <LL_USART_Enable>

};
 8000a6e:	bf00      	nop
 8000a70:	3730      	adds	r7, #48	; 0x30
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	04020002 	.word	0x04020002
 8000a7c:	40010800 	.word	0x40010800
 8000a80:	04040004 	.word	0x04040004
 8000a84:	40013800 	.word	0x40013800

08000a88 <ushell_write>:

void ushell_write(uint8_t* data,uint8_t size){
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	460b      	mov	r3, r1
 8000a92:	70fb      	strb	r3, [r7, #3]
	for(uint8_t i=0;i<size;i++){
 8000a94:	2300      	movs	r3, #0
 8000a96:	73fb      	strb	r3, [r7, #15]
 8000a98:	e011      	b.n	8000abe <ushell_write+0x36>
		LL_USART_TransmitData8(USART1, data[i]);
 8000a9a:	7bfb      	ldrb	r3, [r7, #15]
 8000a9c:	687a      	ldr	r2, [r7, #4]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	480a      	ldr	r0, [pc, #40]	; (8000ad0 <ushell_write+0x48>)
 8000aa6:	f7ff ff5c 	bl	8000962 <LL_USART_TransmitData8>
		while(!LL_USART_IsActiveFlag_TXE(USART1));
 8000aaa:	bf00      	nop
 8000aac:	4808      	ldr	r0, [pc, #32]	; (8000ad0 <ushell_write+0x48>)
 8000aae:	f7ff ff0b 	bl	80008c8 <LL_USART_IsActiveFlag_TXE>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d0f9      	beq.n	8000aac <ushell_write+0x24>
	for(uint8_t i=0;i<size;i++){
 8000ab8:	7bfb      	ldrb	r3, [r7, #15]
 8000aba:	3301      	adds	r3, #1
 8000abc:	73fb      	strb	r3, [r7, #15]
 8000abe:	7bfa      	ldrb	r2, [r7, #15]
 8000ac0:	78fb      	ldrb	r3, [r7, #3]
 8000ac2:	429a      	cmp	r2, r3
 8000ac4:	d3e9      	bcc.n	8000a9a <ushell_write+0x12>
	}
}
 8000ac6:	bf00      	nop
 8000ac8:	bf00      	nop
 8000aca:	3710      	adds	r7, #16
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40013800 	.word	0x40013800

08000ad4 <ushell_add_command>:
/*for debug*/
void ushell_load_buf(char* str){
    strcpy(&rx_buffer[0],str);
}

int ushell_add_command(ushell_command* comm){
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
    if(comm_cnt<=USHELL_COM_POOL_SIZE){
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <ushell_add_command+0x3c>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	2b32      	cmp	r3, #50	; 0x32
 8000ae2:	d80e      	bhi.n	8000b02 <ushell_add_command+0x2e>
        comm_pool[comm_cnt]=comm;
 8000ae4:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <ushell_add_command+0x3c>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4a0a      	ldr	r2, [pc, #40]	; (8000b14 <ushell_add_command+0x40>)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        comm_cnt++;
 8000af2:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <ushell_add_command+0x3c>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	3301      	adds	r3, #1
 8000af8:	b2da      	uxtb	r2, r3
 8000afa:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <ushell_add_command+0x3c>)
 8000afc:	701a      	strb	r2, [r3, #0]
        return 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	e001      	b.n	8000b06 <ushell_add_command+0x32>
    }
    else return -1;
 8000b02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr
 8000b10:	200001dc 	.word	0x200001dc
 8000b14:	20000114 	.word	0x20000114

08000b18 <parse_command>:

int parse_command(){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0

    char* begin=&(rx_buffer[0]);
 8000b1e:	4b20      	ldr	r3, [pc, #128]	; (8000ba0 <parse_command+0x88>)
 8000b20:	60fb      	str	r3, [r7, #12]

    uint8_t pos=0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	71fb      	strb	r3, [r7, #7]

    int32_t comm_pool_pos=parse_alias(begin,&pos);
 8000b26:	1dfb      	adds	r3, r7, #7
 8000b28:	4619      	mov	r1, r3
 8000b2a:	68f8      	ldr	r0, [r7, #12]
 8000b2c:	f000 f83e 	bl	8000bac <parse_alias>
 8000b30:	60b8      	str	r0, [r7, #8]
    if(comm_pool_pos==-1 || strlen(begin)<=2) {
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b38:	d005      	beq.n	8000b46 <parse_command+0x2e>
 8000b3a:	68f8      	ldr	r0, [r7, #12]
 8000b3c:	f7ff fb06 	bl	800014c <strlen>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b02      	cmp	r3, #2
 8000b44:	d802      	bhi.n	8000b4c <parse_command+0x34>
    	return -1;
 8000b46:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4a:	e024      	b.n	8000b96 <parse_command+0x7e>
    }
    printf("success!\n");
 8000b4c:	4815      	ldr	r0, [pc, #84]	; (8000ba4 <parse_command+0x8c>)
 8000b4e:	f002 fadb 	bl	8003108 <puts>
    begin+=pos;
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	461a      	mov	r2, r3
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	4413      	add	r3, r2
 8000b5a:	60fb      	str	r3, [r7, #12]
    if(*begin!=' ') return -1;
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	2b20      	cmp	r3, #32
 8000b62:	d002      	beq.n	8000b6a <parse_command+0x52>
 8000b64:	f04f 33ff 	mov.w	r3, #4294967295
 8000b68:	e015      	b.n	8000b96 <parse_command+0x7e>
    begin++;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	60fb      	str	r3, [r7, #12]
    if(!begin) return;
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d00f      	beq.n	8000b96 <parse_command+0x7e>

    if(comm_pool[comm_pool_pos]->value.type==USHELL_VALUE_RAW){
 8000b76:	4a0c      	ldr	r2, [pc, #48]	; (8000ba8 <parse_command+0x90>)
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b7e:	7a1b      	ldrb	r3, [r3, #8]
 8000b80:	2b02      	cmp	r3, #2
 8000b82:	d106      	bne.n	8000b92 <parse_command+0x7a>
    	comm_pool[comm_pool_pos]->func(begin);
 8000b84:	4a08      	ldr	r2, [pc, #32]	; (8000ba8 <parse_command+0x90>)
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b8c:	695b      	ldr	r3, [r3, #20]
 8000b8e:	68f8      	ldr	r0, [r7, #12]
 8000b90:	4798      	blx	r3
    }
    return 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	e7ff      	b.n	8000b96 <parse_command+0x7e>
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	200001e0 	.word	0x200001e0
 8000ba4:	08003aa0 	.word	0x08003aa0
 8000ba8:	20000114 	.word	0x20000114

08000bac <parse_alias>:

static int parse_alias(char* cur_pos_ptr,uint8_t* next_pos){
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]
    int i=0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	617b      	str	r3, [r7, #20]
    int j=0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]

    uint8_t cur_str_len=strlen(cur_pos_ptr);
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f7ff fac4 	bl	800014c <strlen>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	73fb      	strb	r3, [r7, #15]
    if(cur_str_len==0) return -1;
 8000bc8:	7bfb      	ldrb	r3, [r7, #15]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d102      	bne.n	8000bd4 <parse_alias+0x28>
 8000bce:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd2:	e040      	b.n	8000c56 <parse_alias+0xaa>
    for(i=0;i<comm_cnt;i++){
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	e035      	b.n	8000c46 <parse_alias+0x9a>
        uint8_t alias_len=strlen(comm_pool[i]->alias);
 8000bda:	4a21      	ldr	r2, [pc, #132]	; (8000c60 <parse_alias+0xb4>)
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff fab1 	bl	800014c <strlen>
 8000bea:	4603      	mov	r3, r0
 8000bec:	73bb      	strb	r3, [r7, #14]
        if(cur_str_len<alias_len) continue;
 8000bee:	7bfa      	ldrb	r2, [r7, #15]
 8000bf0:	7bbb      	ldrb	r3, [r7, #14]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d323      	bcc.n	8000c3e <parse_alias+0x92>
        for(j=0;j<alias_len; j++){
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	613b      	str	r3, [r7, #16]
 8000bfa:	e010      	b.n	8000c1e <parse_alias+0x72>
            if(cur_pos_ptr[j]!=comm_pool[i]->alias[j]) break;
 8000bfc:	693b      	ldr	r3, [r7, #16]
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	4413      	add	r3, r2
 8000c02:	781a      	ldrb	r2, [r3, #0]
 8000c04:	4916      	ldr	r1, [pc, #88]	; (8000c60 <parse_alias+0xb4>)
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c0c:	6859      	ldr	r1, [r3, #4]
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	440b      	add	r3, r1
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d107      	bne.n	8000c28 <parse_alias+0x7c>
        for(j=0;j<alias_len; j++){
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	613b      	str	r3, [r7, #16]
 8000c1e:	7bbb      	ldrb	r3, [r7, #14]
 8000c20:	693a      	ldr	r2, [r7, #16]
 8000c22:	429a      	cmp	r2, r3
 8000c24:	dbea      	blt.n	8000bfc <parse_alias+0x50>
 8000c26:	e000      	b.n	8000c2a <parse_alias+0x7e>
            if(cur_pos_ptr[j]!=comm_pool[i]->alias[j]) break;
 8000c28:	bf00      	nop
        }
        if(j==alias_len){
 8000c2a:	7bbb      	ldrb	r3, [r7, #14]
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	d106      	bne.n	8000c40 <parse_alias+0x94>
            *next_pos=j;
 8000c32:	693b      	ldr	r3, [r7, #16]
 8000c34:	b2da      	uxtb	r2, r3
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	701a      	strb	r2, [r3, #0]
            return i;
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	e00b      	b.n	8000c56 <parse_alias+0xaa>
        if(cur_str_len<alias_len) continue;
 8000c3e:	bf00      	nop
    for(i=0;i<comm_cnt;i++){
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	3301      	adds	r3, #1
 8000c44:	617b      	str	r3, [r7, #20]
 8000c46:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <parse_alias+0xb8>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	dbc3      	blt.n	8000bda <parse_alias+0x2e>
        }
    }
    return -1;
 8000c52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3718      	adds	r7, #24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000114 	.word	0x20000114
 8000c64:	200001dc 	.word	0x200001dc

08000c68 <ushell_parse_bytes>:
        return 0;
    }
    else return -1;
}

int ushell_parse_bytes(char *str, uint8_t *bytes,uint8_t len) {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b088      	sub	sp, #32
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	4613      	mov	r3, r2
 8000c74:	71fb      	strb	r3, [r7, #7]

	char *divider = NULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61bb      	str	r3, [r7, #24]
	uint8_t cur_byte;
	for (uint8_t i = 0; i < len; i++) {
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	77fb      	strb	r3, [r7, #31]
 8000c7e:	e035      	b.n	8000cec <ushell_parse_bytes+0x84>
		divider = strchr(str, ' ');
 8000c80:	2120      	movs	r1, #32
 8000c82:	68f8      	ldr	r0, [r7, #12]
 8000c84:	f002 fa48 	bl	8003118 <strchr>
 8000c88:	61b8      	str	r0, [r7, #24]
		if (!divider && !str) return -1;
 8000c8a:	69bb      	ldr	r3, [r7, #24]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d105      	bne.n	8000c9c <ushell_parse_bytes+0x34>
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d102      	bne.n	8000c9c <ushell_parse_bytes+0x34>
 8000c96:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9a:	e02c      	b.n	8000cf6 <ushell_parse_bytes+0x8e>
		else {
			if(divider) *divider=0;
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d002      	beq.n	8000ca8 <ushell_parse_bytes+0x40>
 8000ca2:	69bb      	ldr	r3, [r7, #24]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	701a      	strb	r2, [r3, #0]
			if(ushell_parse_byte(str,&cur_byte)!=-1) {
 8000ca8:	f107 0317 	add.w	r3, r7, #23
 8000cac:	4619      	mov	r1, r3
 8000cae:	68f8      	ldr	r0, [r7, #12]
 8000cb0:	f000 f825 	bl	8000cfe <ushell_parse_byte>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cba:	d008      	beq.n	8000cce <ushell_parse_bytes+0x66>
				bytes[i]=cur_byte;
 8000cbc:	7ffb      	ldrb	r3, [r7, #31]
 8000cbe:	68ba      	ldr	r2, [r7, #8]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	7dfa      	ldrb	r2, [r7, #23]
 8000cc4:	701a      	strb	r2, [r3, #0]
			}
			else return -1;

			if(divider){
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d00a      	beq.n	8000ce2 <ushell_parse_bytes+0x7a>
 8000ccc:	e002      	b.n	8000cd4 <ushell_parse_bytes+0x6c>
			else return -1;
 8000cce:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd2:	e010      	b.n	8000cf6 <ushell_parse_bytes+0x8e>
				*divider=' ';
 8000cd4:	69bb      	ldr	r3, [r7, #24]
 8000cd6:	2220      	movs	r2, #32
 8000cd8:	701a      	strb	r2, [r3, #0]
				str=divider+1;
 8000cda:	69bb      	ldr	r3, [r7, #24]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	e001      	b.n	8000ce6 <ushell_parse_bytes+0x7e>
			}
			else return 1;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e007      	b.n	8000cf6 <ushell_parse_bytes+0x8e>
	for (uint8_t i = 0; i < len; i++) {
 8000ce6:	7ffb      	ldrb	r3, [r7, #31]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	77fb      	strb	r3, [r7, #31]
 8000cec:	7ffa      	ldrb	r2, [r7, #31]
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d3c5      	bcc.n	8000c80 <ushell_parse_bytes+0x18>

		}
	}
	return 1;
 8000cf4:	2301      	movs	r3, #1

}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3720      	adds	r7, #32
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <ushell_parse_byte>:

int ushell_parse_byte(char *str, uint8_t* out) {
 8000cfe:	b480      	push	{r7}
 8000d00:	b085      	sub	sp, #20
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
 8000d06:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60fb      	str	r3, [r7, #12]

	if(*str!='0') return -1;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b30      	cmp	r3, #48	; 0x30
 8000d12:	d002      	beq.n	8000d1a <ushell_parse_byte+0x1c>
 8000d14:	f04f 33ff 	mov.w	r3, #4294967295
 8000d18:	e03f      	b.n	8000d9a <ushell_parse_byte+0x9c>
	str++;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	607b      	str	r3, [r7, #4]
	if(*str!='x') return -1;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b78      	cmp	r3, #120	; 0x78
 8000d26:	d002      	beq.n	8000d2e <ushell_parse_byte+0x30>
 8000d28:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2c:	e035      	b.n	8000d9a <ushell_parse_byte+0x9c>
	str++;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	3301      	adds	r3, #1
 8000d32:	607b      	str	r3, [r7, #4]
	while (*str) {
 8000d34:	e028      	b.n	8000d88 <ushell_parse_byte+0x8a>
		// get current character then increment
		uint8_t byte = *str++;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	1c5a      	adds	r2, r3, #1
 8000d3a:	607a      	str	r2, [r7, #4]
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	72fb      	strb	r3, [r7, #11]
		// transform hex character to the 4bit equivalent number, using the ascii table indexes
		if (byte >= '0' && byte <= '9')
 8000d40:	7afb      	ldrb	r3, [r7, #11]
 8000d42:	2b2f      	cmp	r3, #47	; 0x2f
 8000d44:	d906      	bls.n	8000d54 <ushell_parse_byte+0x56>
 8000d46:	7afb      	ldrb	r3, [r7, #11]
 8000d48:	2b39      	cmp	r3, #57	; 0x39
 8000d4a:	d803      	bhi.n	8000d54 <ushell_parse_byte+0x56>
			byte = byte - '0';
 8000d4c:	7afb      	ldrb	r3, [r7, #11]
 8000d4e:	3b30      	subs	r3, #48	; 0x30
 8000d50:	72fb      	strb	r3, [r7, #11]
 8000d52:	e012      	b.n	8000d7a <ushell_parse_byte+0x7c>
		else if (byte >= 'a' && byte <= 'f')
 8000d54:	7afb      	ldrb	r3, [r7, #11]
 8000d56:	2b60      	cmp	r3, #96	; 0x60
 8000d58:	d906      	bls.n	8000d68 <ushell_parse_byte+0x6a>
 8000d5a:	7afb      	ldrb	r3, [r7, #11]
 8000d5c:	2b66      	cmp	r3, #102	; 0x66
 8000d5e:	d803      	bhi.n	8000d68 <ushell_parse_byte+0x6a>
			byte = byte - 'a' + 10;
 8000d60:	7afb      	ldrb	r3, [r7, #11]
 8000d62:	3b57      	subs	r3, #87	; 0x57
 8000d64:	72fb      	strb	r3, [r7, #11]
 8000d66:	e008      	b.n	8000d7a <ushell_parse_byte+0x7c>
		else if (byte >= 'A' && byte <= 'F')
 8000d68:	7afb      	ldrb	r3, [r7, #11]
 8000d6a:	2b40      	cmp	r3, #64	; 0x40
 8000d6c:	d905      	bls.n	8000d7a <ushell_parse_byte+0x7c>
 8000d6e:	7afb      	ldrb	r3, [r7, #11]
 8000d70:	2b46      	cmp	r3, #70	; 0x46
 8000d72:	d802      	bhi.n	8000d7a <ushell_parse_byte+0x7c>
			byte = byte - 'A' + 10;
 8000d74:	7afb      	ldrb	r3, [r7, #11]
 8000d76:	3b37      	subs	r3, #55	; 0x37
 8000d78:	72fb      	strb	r3, [r7, #11]
		// shift 4 to make space for new digit, and add the 4 bits of the new digit
		val = (val << 4) | (byte & 0xF);
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	011a      	lsls	r2, r3, #4
 8000d7e:	7afb      	ldrb	r3, [r7, #11]
 8000d80:	f003 030f 	and.w	r3, r3, #15
 8000d84:	4313      	orrs	r3, r2
 8000d86:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d1d2      	bne.n	8000d36 <ushell_parse_byte+0x38>
	}
	*out=val;
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	b2da      	uxtb	r2, r3
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	701a      	strb	r2, [r3, #0]
	return 1;
 8000d98:	2301      	movs	r3, #1
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3714      	adds	r7, #20
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr

08000da4 <ushell_parse_uint32>:

 int ushell_parse_uint32(char *str, uint32_t* out,uint32_t* offset) {
 8000da4:	b480      	push	{r7}
 8000da6:	b089      	sub	sp, #36	; 0x24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
	uint32_t val = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	61fb      	str	r3, [r7, #28]
	uint32_t pos=0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	61bb      	str	r3, [r7, #24]

	if(!str) return -1;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d102      	bne.n	8000dc4 <ushell_parse_uint32+0x20>
 8000dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc2:	e057      	b.n	8000e74 <ushell_parse_uint32+0xd0>
	if(*str!='0') return -1;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b30      	cmp	r3, #48	; 0x30
 8000dca:	d002      	beq.n	8000dd2 <ushell_parse_uint32+0x2e>
 8000dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd0:	e050      	b.n	8000e74 <ushell_parse_uint32+0xd0>
	str++;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	60fb      	str	r3, [r7, #12]
	if(*str!='x') return -1;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b78      	cmp	r3, #120	; 0x78
 8000dde:	d002      	beq.n	8000de6 <ushell_parse_uint32+0x42>
 8000de0:	f04f 33ff 	mov.w	r3, #4294967295
 8000de4:	e046      	b.n	8000e74 <ushell_parse_uint32+0xd0>
	str++;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	3301      	adds	r3, #1
 8000dea:	60fb      	str	r3, [r7, #12]
	pos+=2;
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	3302      	adds	r3, #2
 8000df0:	61bb      	str	r3, [r7, #24]
	while (*str!=0 && *str!=' ') {
 8000df2:	e02f      	b.n	8000e54 <ushell_parse_uint32+0xb0>
		// get current character then increment
		uint8_t byte = *str++;
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	1c5a      	adds	r2, r3, #1
 8000df8:	60fa      	str	r2, [r7, #12]
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	75fb      	strb	r3, [r7, #23]
		// transform hex character to the 4bit equivalent number, using the ascii table indexes
		if (byte >= '0' && byte <= '9')
 8000dfe:	7dfb      	ldrb	r3, [r7, #23]
 8000e00:	2b2f      	cmp	r3, #47	; 0x2f
 8000e02:	d906      	bls.n	8000e12 <ushell_parse_uint32+0x6e>
 8000e04:	7dfb      	ldrb	r3, [r7, #23]
 8000e06:	2b39      	cmp	r3, #57	; 0x39
 8000e08:	d803      	bhi.n	8000e12 <ushell_parse_uint32+0x6e>
			byte = byte - '0';
 8000e0a:	7dfb      	ldrb	r3, [r7, #23]
 8000e0c:	3b30      	subs	r3, #48	; 0x30
 8000e0e:	75fb      	strb	r3, [r7, #23]
 8000e10:	e016      	b.n	8000e40 <ushell_parse_uint32+0x9c>
		else if (byte >= 'a' && byte <= 'f')
 8000e12:	7dfb      	ldrb	r3, [r7, #23]
 8000e14:	2b60      	cmp	r3, #96	; 0x60
 8000e16:	d906      	bls.n	8000e26 <ushell_parse_uint32+0x82>
 8000e18:	7dfb      	ldrb	r3, [r7, #23]
 8000e1a:	2b66      	cmp	r3, #102	; 0x66
 8000e1c:	d803      	bhi.n	8000e26 <ushell_parse_uint32+0x82>
			byte = byte - 'a' + 10;
 8000e1e:	7dfb      	ldrb	r3, [r7, #23]
 8000e20:	3b57      	subs	r3, #87	; 0x57
 8000e22:	75fb      	strb	r3, [r7, #23]
 8000e24:	e00c      	b.n	8000e40 <ushell_parse_uint32+0x9c>
		else if (byte >= 'A' && byte <= 'F')
 8000e26:	7dfb      	ldrb	r3, [r7, #23]
 8000e28:	2b40      	cmp	r3, #64	; 0x40
 8000e2a:	d906      	bls.n	8000e3a <ushell_parse_uint32+0x96>
 8000e2c:	7dfb      	ldrb	r3, [r7, #23]
 8000e2e:	2b46      	cmp	r3, #70	; 0x46
 8000e30:	d803      	bhi.n	8000e3a <ushell_parse_uint32+0x96>
			byte = byte - 'A' + 10;
 8000e32:	7dfb      	ldrb	r3, [r7, #23]
 8000e34:	3b37      	subs	r3, #55	; 0x37
 8000e36:	75fb      	strb	r3, [r7, #23]
 8000e38:	e002      	b.n	8000e40 <ushell_parse_uint32+0x9c>
		else return -1;
 8000e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3e:	e019      	b.n	8000e74 <ushell_parse_uint32+0xd0>
		// shift 4 to make space for new digit, and add the 4 bits of the new digit
		val = (val << 4) | (byte & 0xF);
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	011a      	lsls	r2, r3, #4
 8000e44:	7dfb      	ldrb	r3, [r7, #23]
 8000e46:	f003 030f 	and.w	r3, r3, #15
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	61fb      	str	r3, [r7, #28]
		pos++;
 8000e4e:	69bb      	ldr	r3, [r7, #24]
 8000e50:	3301      	adds	r3, #1
 8000e52:	61bb      	str	r3, [r7, #24]
	while (*str!=0 && *str!=' ') {
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d003      	beq.n	8000e64 <ushell_parse_uint32+0xc0>
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b20      	cmp	r3, #32
 8000e62:	d1c7      	bne.n	8000df4 <ushell_parse_uint32+0x50>
	}
	*out=val;
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	69fa      	ldr	r2, [r7, #28]
 8000e68:	601a      	str	r2, [r3, #0]
	*offset=pos+1;
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	1c5a      	adds	r2, r3, #1
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	601a      	str	r2, [r3, #0]
	return 1;
 8000e72:	2301      	movs	r3, #1
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3724      	adds	r7, #36	; 0x24
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bc80      	pop	{r7}
 8000e7c:	4770      	bx	lr
	...

08000e80 <USART1_IRQHandler>:





void USART1_IRQHandler(){
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_RXNE(USART1)){
 8000e86:	481e      	ldr	r0, [pc, #120]	; (8000f00 <USART1_IRQHandler+0x80>)
 8000e88:	f7ff fd0c 	bl	80008a4 <LL_USART_IsActiveFlag_RXNE>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d031      	beq.n	8000ef6 <USART1_IRQHandler+0x76>
		uint8_t data=LL_USART_ReceiveData8(USART1);
 8000e92:	481b      	ldr	r0, [pc, #108]	; (8000f00 <USART1_IRQHandler+0x80>)
 8000e94:	f7ff fd59 	bl	800094a <LL_USART_ReceiveData8>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	71fb      	strb	r3, [r7, #7]
		if(data=='\r' || rx_buf_count==USHELL_BUF_SIZE-1) {
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	2b0d      	cmp	r3, #13
 8000ea0:	d003      	beq.n	8000eaa <USART1_IRQHandler+0x2a>
 8000ea2:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <USART1_IRQHandler+0x84>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b31      	cmp	r3, #49	; 0x31
 8000ea8:	d116      	bne.n	8000ed8 <USART1_IRQHandler+0x58>
			NVIC_DisableIRQ(USART1_IRQn);
 8000eaa:	2025      	movs	r0, #37	; 0x25
 8000eac:	f7ff fc56 	bl	800075c <__NVIC_DisableIRQ>
			rx_buffer[rx_buf_count]=0;
 8000eb0:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <USART1_IRQHandler+0x84>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4b14      	ldr	r3, [pc, #80]	; (8000f08 <USART1_IRQHandler+0x88>)
 8000eb8:	2100      	movs	r1, #0
 8000eba:	5499      	strb	r1, [r3, r2]
			parse_command();
 8000ebc:	f7ff fe2c 	bl	8000b18 <parse_command>
			memset(&rx_buffer[0],0,USHELL_BUF_SIZE);
 8000ec0:	2232      	movs	r2, #50	; 0x32
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4810      	ldr	r0, [pc, #64]	; (8000f08 <USART1_IRQHandler+0x88>)
 8000ec6:	f002 f8a9 	bl	800301c <memset>
			rx_buf_count=0;
 8000eca:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <USART1_IRQHandler+0x84>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	701a      	strb	r2, [r3, #0]
		    NVIC_EnableIRQ(USART1_IRQn);
 8000ed0:	2025      	movs	r0, #37	; 0x25
 8000ed2:	f7ff fc27 	bl	8000724 <__NVIC_EnableIRQ>
 8000ed6:	e00b      	b.n	8000ef0 <USART1_IRQHandler+0x70>
		}
		else {
			rx_buffer[rx_buf_count]=data;
 8000ed8:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <USART1_IRQHandler+0x84>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	4619      	mov	r1, r3
 8000ede:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <USART1_IRQHandler+0x88>)
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	5453      	strb	r3, [r2, r1]
			rx_buf_count++;
 8000ee4:	4b07      	ldr	r3, [pc, #28]	; (8000f04 <USART1_IRQHandler+0x84>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <USART1_IRQHandler+0x84>)
 8000eee:	701a      	strb	r2, [r3, #0]
		}
		LL_USART_ClearFlag_RXNE(USART1);
 8000ef0:	4803      	ldr	r0, [pc, #12]	; (8000f00 <USART1_IRQHandler+0x80>)
 8000ef2:	f7ff fcfb 	bl	80008ec <LL_USART_ClearFlag_RXNE>
}
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40013800 	.word	0x40013800
 8000f04:	20000212 	.word	0x20000212
 8000f08:	200001e0 	.word	0x200001e0

08000f0c <Reset_Handler>:
 8000f0c:	f7ff fbf6 	bl	80006fc <SystemInit>
 8000f10:	480b      	ldr	r0, [pc, #44]	; (8000f40 <LoopFillZerobss+0xe>)
 8000f12:	490c      	ldr	r1, [pc, #48]	; (8000f44 <LoopFillZerobss+0x12>)
 8000f14:	4a0c      	ldr	r2, [pc, #48]	; (8000f48 <LoopFillZerobss+0x16>)
 8000f16:	2300      	movs	r3, #0
 8000f18:	e002      	b.n	8000f20 <LoopCopyDataInit>

08000f1a <CopyDataInit>:
 8000f1a:	58d4      	ldr	r4, [r2, r3]
 8000f1c:	50c4      	str	r4, [r0, r3]
 8000f1e:	3304      	adds	r3, #4

08000f20 <LoopCopyDataInit>:
 8000f20:	18c4      	adds	r4, r0, r3
 8000f22:	428c      	cmp	r4, r1
 8000f24:	d3f9      	bcc.n	8000f1a <CopyDataInit>
 8000f26:	4a09      	ldr	r2, [pc, #36]	; (8000f4c <LoopFillZerobss+0x1a>)
 8000f28:	4c09      	ldr	r4, [pc, #36]	; (8000f50 <LoopFillZerobss+0x1e>)
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	e001      	b.n	8000f32 <LoopFillZerobss>

08000f2e <FillZerobss>:
 8000f2e:	6013      	str	r3, [r2, #0]
 8000f30:	3204      	adds	r2, #4

08000f32 <LoopFillZerobss>:
 8000f32:	42a2      	cmp	r2, r4
 8000f34:	d3fb      	bcc.n	8000f2e <FillZerobss>
 8000f36:	f002 f84d 	bl	8002fd4 <__libc_init_array>
 8000f3a:	f7ff fa7b 	bl	8000434 <main>
 8000f3e:	4770      	bx	lr
 8000f40:	20000000 	.word	0x20000000
 8000f44:	20000088 	.word	0x20000088
 8000f48:	08003b44 	.word	0x08003b44
 8000f4c:	20000088 	.word	0x20000088
 8000f50:	20000228 	.word	0x20000228

08000f54 <ADC1_2_IRQHandler>:
 8000f54:	e7fe      	b.n	8000f54 <ADC1_2_IRQHandler>
	...

08000f58 <HAL_Init>:
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <HAL_Init+0x28>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a07      	ldr	r2, [pc, #28]	; (8000f80 <HAL_Init+0x28>)
 8000f62:	f043 0310 	orr.w	r3, r3, #16
 8000f66:	6013      	str	r3, [r2, #0]
 8000f68:	2003      	movs	r0, #3
 8000f6a:	f000 ff63 	bl	8001e34 <HAL_NVIC_SetPriorityGrouping>
 8000f6e:	200f      	movs	r0, #15
 8000f70:	f000 f808 	bl	8000f84 <HAL_InitTick>
 8000f74:	f7ff fada 	bl	800052c <HAL_MspInit>
 8000f78:	2300      	movs	r3, #0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40022000 	.word	0x40022000

08000f84 <HAL_InitTick>:
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <HAL_InitTick+0x54>)
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <HAL_InitTick+0x58>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	4619      	mov	r1, r3
 8000f96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 ff7b 	bl	8001e9e <HAL_SYSTICK_Config>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <HAL_InitTick+0x2e>
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e00e      	b.n	8000fd0 <HAL_InitTick+0x4c>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2b0f      	cmp	r3, #15
 8000fb6:	d80a      	bhi.n	8000fce <HAL_InitTick+0x4a>
 8000fb8:	2200      	movs	r2, #0
 8000fba:	6879      	ldr	r1, [r7, #4]
 8000fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc0:	f000 ff43 	bl	8001e4a <HAL_NVIC_SetPriority>
 8000fc4:	4a06      	ldr	r2, [pc, #24]	; (8000fe0 <HAL_InitTick+0x5c>)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6013      	str	r3, [r2, #0]
 8000fca:	2300      	movs	r3, #0
 8000fcc:	e000      	b.n	8000fd0 <HAL_InitTick+0x4c>
 8000fce:	2301      	movs	r3, #1
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000018 	.word	0x20000018
 8000fdc:	20000020 	.word	0x20000020
 8000fe0:	2000001c 	.word	0x2000001c

08000fe4 <HAL_IncTick>:
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	4b05      	ldr	r3, [pc, #20]	; (8001000 <HAL_IncTick+0x1c>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	461a      	mov	r2, r3
 8000fee:	4b05      	ldr	r3, [pc, #20]	; (8001004 <HAL_IncTick+0x20>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	4a03      	ldr	r2, [pc, #12]	; (8001004 <HAL_IncTick+0x20>)
 8000ff6:	6013      	str	r3, [r2, #0]
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bc80      	pop	{r7}
 8000ffe:	4770      	bx	lr
 8001000:	20000020 	.word	0x20000020
 8001004:	20000214 	.word	0x20000214

08001008 <HAL_GetTick>:
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
 800100c:	4b02      	ldr	r3, [pc, #8]	; (8001018 <HAL_GetTick+0x10>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4618      	mov	r0, r3
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr
 8001018:	20000214 	.word	0x20000214

0800101c <HAL_CAN_Init>:
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d101      	bne.n	800102e <HAL_CAN_Init+0x12>
 800102a:	2301      	movs	r3, #1
 800102c:	e0ed      	b.n	800120a <HAL_CAN_Init+0x1ee>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001034:	b2db      	uxtb	r3, r3
 8001036:	2b00      	cmp	r3, #0
 8001038:	d102      	bne.n	8001040 <HAL_CAN_Init+0x24>
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff f8fe 	bl	800023c <HAL_CAN_MspInit>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f042 0201 	orr.w	r2, r2, #1
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	f7ff ffda 	bl	8001008 <HAL_GetTick>
 8001054:	60f8      	str	r0, [r7, #12]
 8001056:	e012      	b.n	800107e <HAL_CAN_Init+0x62>
 8001058:	f7ff ffd6 	bl	8001008 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b0a      	cmp	r3, #10
 8001064:	d90b      	bls.n	800107e <HAL_CAN_Init+0x62>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800106a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	625a      	str	r2, [r3, #36]	; 0x24
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2205      	movs	r2, #5
 8001076:	f883 2020 	strb.w	r2, [r3, #32]
 800107a:	2301      	movs	r3, #1
 800107c:	e0c5      	b.n	800120a <HAL_CAN_Init+0x1ee>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	2b00      	cmp	r3, #0
 800108a:	d0e5      	beq.n	8001058 <HAL_CAN_Init+0x3c>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f022 0202 	bic.w	r2, r2, #2
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	f7ff ffb4 	bl	8001008 <HAL_GetTick>
 80010a0:	60f8      	str	r0, [r7, #12]
 80010a2:	e012      	b.n	80010ca <HAL_CAN_Init+0xae>
 80010a4:	f7ff ffb0 	bl	8001008 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	2b0a      	cmp	r3, #10
 80010b0:	d90b      	bls.n	80010ca <HAL_CAN_Init+0xae>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	625a      	str	r2, [r3, #36]	; 0x24
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2205      	movs	r2, #5
 80010c2:	f883 2020 	strb.w	r2, [r3, #32]
 80010c6:	2301      	movs	r3, #1
 80010c8:	e09f      	b.n	800120a <HAL_CAN_Init+0x1ee>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 0302 	and.w	r3, r3, #2
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d1e5      	bne.n	80010a4 <HAL_CAN_Init+0x88>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	7e1b      	ldrb	r3, [r3, #24]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d108      	bne.n	80010f2 <HAL_CAN_Init+0xd6>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	e007      	b.n	8001102 <HAL_CAN_Init+0xe6>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	7e5b      	ldrb	r3, [r3, #25]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d108      	bne.n	800111c <HAL_CAN_Init+0x100>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	e007      	b.n	800112c <HAL_CAN_Init+0x110>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	7e9b      	ldrb	r3, [r3, #26]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d108      	bne.n	8001146 <HAL_CAN_Init+0x12a>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f042 0220 	orr.w	r2, r2, #32
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	e007      	b.n	8001156 <HAL_CAN_Init+0x13a>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f022 0220 	bic.w	r2, r2, #32
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	7edb      	ldrb	r3, [r3, #27]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d108      	bne.n	8001170 <HAL_CAN_Init+0x154>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f022 0210 	bic.w	r2, r2, #16
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	e007      	b.n	8001180 <HAL_CAN_Init+0x164>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f042 0210 	orr.w	r2, r2, #16
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	7f1b      	ldrb	r3, [r3, #28]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d108      	bne.n	800119a <HAL_CAN_Init+0x17e>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f042 0208 	orr.w	r2, r2, #8
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	e007      	b.n	80011aa <HAL_CAN_Init+0x18e>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f022 0208 	bic.w	r2, r2, #8
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	7f5b      	ldrb	r3, [r3, #29]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d108      	bne.n	80011c4 <HAL_CAN_Init+0x1a8>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f042 0204 	orr.w	r2, r2, #4
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	e007      	b.n	80011d4 <HAL_CAN_Init+0x1b8>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f022 0204 	bic.w	r2, r2, #4
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689a      	ldr	r2, [r3, #8]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	431a      	orrs	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	691b      	ldr	r3, [r3, #16]
 80011e2:	431a      	orrs	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	695b      	ldr	r3, [r3, #20]
 80011e8:	ea42 0103 	orr.w	r1, r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	1e5a      	subs	r2, r3, #1
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	430a      	orrs	r2, r1
 80011f8:	61da      	str	r2, [r3, #28]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	625a      	str	r2, [r3, #36]	; 0x24
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2201      	movs	r2, #1
 8001204:	f883 2020 	strb.w	r2, [r3, #32]
 8001208:	2300      	movs	r3, #0
 800120a:	4618      	mov	r0, r3
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <HAL_CAN_ConfigFilter>:
 8001212:	b480      	push	{r7}
 8001214:	b087      	sub	sp, #28
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
 800121a:	6039      	str	r1, [r7, #0]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	617b      	str	r3, [r7, #20]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001228:	74fb      	strb	r3, [r7, #19]
 800122a:	7cfb      	ldrb	r3, [r7, #19]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d003      	beq.n	8001238 <HAL_CAN_ConfigFilter+0x26>
 8001230:	7cfb      	ldrb	r3, [r7, #19]
 8001232:	2b02      	cmp	r3, #2
 8001234:	f040 80aa 	bne.w	800138c <HAL_CAN_ConfigFilter+0x17a>
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800123e:	f043 0201 	orr.w	r2, r3, #1
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	695b      	ldr	r3, [r3, #20]
 800124c:	f003 031f 	and.w	r3, r3, #31
 8001250:	2201      	movs	r2, #1
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	43db      	mvns	r3, r3
 8001262:	401a      	ands	r2, r3
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	69db      	ldr	r3, [r3, #28]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d123      	bne.n	80012ba <HAL_CAN_ConfigFilter+0xa8>
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	43db      	mvns	r3, r3
 800127c:	401a      	ands	r2, r3
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	0419      	lsls	r1, r3, #16
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	b29b      	uxth	r3, r3
 8001290:	683a      	ldr	r2, [r7, #0]
 8001292:	6952      	ldr	r2, [r2, #20]
 8001294:	4319      	orrs	r1, r3
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	3248      	adds	r2, #72	; 0x48
 800129a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	0419      	lsls	r1, r3, #16
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	430a      	orrs	r2, r1
 80012b0:	6979      	ldr	r1, [r7, #20]
 80012b2:	3348      	adds	r3, #72	; 0x48
 80012b4:	00db      	lsls	r3, r3, #3
 80012b6:	440b      	add	r3, r1
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d122      	bne.n	8001308 <HAL_CAN_ConfigFilter+0xf6>
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	431a      	orrs	r2, r3
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	0419      	lsls	r1, r3, #16
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	b29b      	uxth	r3, r3
 80012de:	683a      	ldr	r2, [r7, #0]
 80012e0:	6952      	ldr	r2, [r2, #20]
 80012e2:	4319      	orrs	r1, r3
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	3248      	adds	r2, #72	; 0x48
 80012e8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	0419      	lsls	r1, r3, #16
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	695b      	ldr	r3, [r3, #20]
 80012fc:	430a      	orrs	r2, r1
 80012fe:	6979      	ldr	r1, [r7, #20]
 8001300:	3348      	adds	r3, #72	; 0x48
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	440b      	add	r3, r1
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d109      	bne.n	8001324 <HAL_CAN_ConfigFilter+0x112>
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	43db      	mvns	r3, r3
 800131a:	401a      	ands	r2, r3
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001322:	e007      	b.n	8001334 <HAL_CAN_ConfigFilter+0x122>
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	431a      	orrs	r2, r3
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	691b      	ldr	r3, [r3, #16]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d109      	bne.n	8001350 <HAL_CAN_ConfigFilter+0x13e>
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	43db      	mvns	r3, r3
 8001346:	401a      	ands	r2, r3
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800134e:	e007      	b.n	8001360 <HAL_CAN_ConfigFilter+0x14e>
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	431a      	orrs	r2, r3
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	6a1b      	ldr	r3, [r3, #32]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d107      	bne.n	8001378 <HAL_CAN_ConfigFilter+0x166>
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	431a      	orrs	r2, r3
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800137e:	f023 0201 	bic.w	r2, r3, #1
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8001388:	2300      	movs	r3, #0
 800138a:	e006      	b.n	800139a <HAL_CAN_ConfigFilter+0x188>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001390:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	625a      	str	r2, [r3, #36]	; 0x24
 8001398:	2301      	movs	r3, #1
 800139a:	4618      	mov	r0, r3
 800139c:	371c      	adds	r7, #28
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr

080013a4 <HAL_CAN_Start>:
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d12e      	bne.n	8001416 <HAL_CAN_Start+0x72>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2202      	movs	r2, #2
 80013bc:	f883 2020 	strb.w	r2, [r3, #32]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f022 0201 	bic.w	r2, r2, #1
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	f7ff fe1a 	bl	8001008 <HAL_GetTick>
 80013d4:	60f8      	str	r0, [r7, #12]
 80013d6:	e012      	b.n	80013fe <HAL_CAN_Start+0x5a>
 80013d8:	f7ff fe16 	bl	8001008 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b0a      	cmp	r3, #10
 80013e4:	d90b      	bls.n	80013fe <HAL_CAN_Start+0x5a>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	625a      	str	r2, [r3, #36]	; 0x24
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2205      	movs	r2, #5
 80013f6:	f883 2020 	strb.w	r2, [r3, #32]
 80013fa:	2301      	movs	r3, #1
 80013fc:	e012      	b.n	8001424 <HAL_CAN_Start+0x80>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f003 0301 	and.w	r3, r3, #1
 8001408:	2b00      	cmp	r3, #0
 800140a:	d1e5      	bne.n	80013d8 <HAL_CAN_Start+0x34>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	625a      	str	r2, [r3, #36]	; 0x24
 8001412:	2300      	movs	r3, #0
 8001414:	e006      	b.n	8001424 <HAL_CAN_Start+0x80>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	625a      	str	r2, [r3, #36]	; 0x24
 8001422:	2301      	movs	r3, #1
 8001424:	4618      	mov	r0, r3
 8001426:	3710      	adds	r7, #16
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <HAL_CAN_AddTxMessage>:
 800142c:	b480      	push	{r7}
 800142e:	b089      	sub	sp, #36	; 0x24
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
 8001438:	603b      	str	r3, [r7, #0]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001440:	77fb      	strb	r3, [r7, #31]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	61bb      	str	r3, [r7, #24]
 800144a:	7ffb      	ldrb	r3, [r7, #31]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d003      	beq.n	8001458 <HAL_CAN_AddTxMessage+0x2c>
 8001450:	7ffb      	ldrb	r3, [r7, #31]
 8001452:	2b02      	cmp	r3, #2
 8001454:	f040 80ad 	bne.w	80015b2 <HAL_CAN_AddTxMessage+0x186>
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d10a      	bne.n	8001478 <HAL_CAN_AddTxMessage+0x4c>
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d105      	bne.n	8001478 <HAL_CAN_AddTxMessage+0x4c>
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001472:	2b00      	cmp	r3, #0
 8001474:	f000 8095 	beq.w	80015a2 <HAL_CAN_AddTxMessage+0x176>
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	0e1b      	lsrs	r3, r3, #24
 800147c:	f003 0303 	and.w	r3, r3, #3
 8001480:	617b      	str	r3, [r7, #20]
 8001482:	2201      	movs	r2, #1
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	409a      	lsls	r2, r3
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d10d      	bne.n	80014b0 <HAL_CAN_AddTxMessage+0x84>
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	055a      	lsls	r2, r3, #21
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	68f9      	ldr	r1, [r7, #12]
 80014a0:	6809      	ldr	r1, [r1, #0]
 80014a2:	431a      	orrs	r2, r3
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	3318      	adds	r3, #24
 80014a8:	011b      	lsls	r3, r3, #4
 80014aa:	440b      	add	r3, r1
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	e00f      	b.n	80014d0 <HAL_CAN_AddTxMessage+0xa4>
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	00da      	lsls	r2, r3, #3
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	431a      	orrs	r2, r3
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	68f9      	ldr	r1, [r7, #12]
 80014c2:	6809      	ldr	r1, [r1, #0]
 80014c4:	431a      	orrs	r2, r3
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	3318      	adds	r3, #24
 80014ca:	011b      	lsls	r3, r3, #4
 80014cc:	440b      	add	r3, r1
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	6819      	ldr	r1, [r3, #0]
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	691a      	ldr	r2, [r3, #16]
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	3318      	adds	r3, #24
 80014dc:	011b      	lsls	r3, r3, #4
 80014de:	440b      	add	r3, r1
 80014e0:	3304      	adds	r3, #4
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	7d1b      	ldrb	r3, [r3, #20]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d111      	bne.n	8001510 <HAL_CAN_AddTxMessage+0xe4>
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	3318      	adds	r3, #24
 80014f4:	011b      	lsls	r3, r3, #4
 80014f6:	4413      	add	r3, r2
 80014f8:	3304      	adds	r3, #4
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	68fa      	ldr	r2, [r7, #12]
 80014fe:	6811      	ldr	r1, [r2, #0]
 8001500:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	3318      	adds	r3, #24
 8001508:	011b      	lsls	r3, r3, #4
 800150a:	440b      	add	r3, r1
 800150c:	3304      	adds	r3, #4
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3307      	adds	r3, #7
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	061a      	lsls	r2, r3, #24
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3306      	adds	r3, #6
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	041b      	lsls	r3, r3, #16
 8001520:	431a      	orrs	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3305      	adds	r3, #5
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	021b      	lsls	r3, r3, #8
 800152a:	4313      	orrs	r3, r2
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	3204      	adds	r2, #4
 8001530:	7812      	ldrb	r2, [r2, #0]
 8001532:	4610      	mov	r0, r2
 8001534:	68fa      	ldr	r2, [r7, #12]
 8001536:	6811      	ldr	r1, [r2, #0]
 8001538:	ea43 0200 	orr.w	r2, r3, r0
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	011b      	lsls	r3, r3, #4
 8001540:	440b      	add	r3, r1
 8001542:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3303      	adds	r3, #3
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	061a      	lsls	r2, r3, #24
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3302      	adds	r3, #2
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	041b      	lsls	r3, r3, #16
 8001558:	431a      	orrs	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	3301      	adds	r3, #1
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	021b      	lsls	r3, r3, #8
 8001562:	4313      	orrs	r3, r2
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	7812      	ldrb	r2, [r2, #0]
 8001568:	4610      	mov	r0, r2
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	6811      	ldr	r1, [r2, #0]
 800156e:	ea43 0200 	orr.w	r2, r3, r0
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	011b      	lsls	r3, r3, #4
 8001576:	440b      	add	r3, r1
 8001578:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	3318      	adds	r3, #24
 8001586:	011b      	lsls	r3, r3, #4
 8001588:	4413      	add	r3, r2
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	68fa      	ldr	r2, [r7, #12]
 800158e:	6811      	ldr	r1, [r2, #0]
 8001590:	f043 0201 	orr.w	r2, r3, #1
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	3318      	adds	r3, #24
 8001598:	011b      	lsls	r3, r3, #4
 800159a:	440b      	add	r3, r1
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	2300      	movs	r3, #0
 80015a0:	e00e      	b.n	80015c0 <HAL_CAN_AddTxMessage+0x194>
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	625a      	str	r2, [r3, #36]	; 0x24
 80015ae:	2301      	movs	r3, #1
 80015b0:	e006      	b.n	80015c0 <HAL_CAN_AddTxMessage+0x194>
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	625a      	str	r2, [r3, #36]	; 0x24
 80015be:	2301      	movs	r3, #1
 80015c0:	4618      	mov	r0, r3
 80015c2:	3724      	adds	r7, #36	; 0x24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr

080015ca <HAL_CAN_GetRxMessage>:
 80015ca:	b480      	push	{r7}
 80015cc:	b087      	sub	sp, #28
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	60f8      	str	r0, [r7, #12]
 80015d2:	60b9      	str	r1, [r7, #8]
 80015d4:	607a      	str	r2, [r7, #4]
 80015d6:	603b      	str	r3, [r7, #0]
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015de:	75fb      	strb	r3, [r7, #23]
 80015e0:	7dfb      	ldrb	r3, [r7, #23]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d003      	beq.n	80015ee <HAL_CAN_GetRxMessage+0x24>
 80015e6:	7dfb      	ldrb	r3, [r7, #23]
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	f040 8103 	bne.w	80017f4 <HAL_CAN_GetRxMessage+0x22a>
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d10e      	bne.n	8001612 <HAL_CAN_GetRxMessage+0x48>
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	f003 0303 	and.w	r3, r3, #3
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d116      	bne.n	8001630 <HAL_CAN_GetRxMessage+0x66>
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001606:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	625a      	str	r2, [r3, #36]	; 0x24
 800160e:	2301      	movs	r3, #1
 8001610:	e0f7      	b.n	8001802 <HAL_CAN_GetRxMessage+0x238>
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	691b      	ldr	r3, [r3, #16]
 8001618:	f003 0303 	and.w	r3, r3, #3
 800161c:	2b00      	cmp	r3, #0
 800161e:	d107      	bne.n	8001630 <HAL_CAN_GetRxMessage+0x66>
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001624:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	625a      	str	r2, [r3, #36]	; 0x24
 800162c:	2301      	movs	r3, #1
 800162e:	e0e8      	b.n	8001802 <HAL_CAN_GetRxMessage+0x238>
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	331b      	adds	r3, #27
 8001638:	011b      	lsls	r3, r3, #4
 800163a:	4413      	add	r3, r2
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0204 	and.w	r2, r3, #4
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	609a      	str	r2, [r3, #8]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d10c      	bne.n	8001668 <HAL_CAN_GetRxMessage+0x9e>
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	331b      	adds	r3, #27
 8001656:	011b      	lsls	r3, r3, #4
 8001658:	4413      	add	r3, r2
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	0d5b      	lsrs	r3, r3, #21
 800165e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	e00b      	b.n	8001680 <HAL_CAN_GetRxMessage+0xb6>
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	331b      	adds	r3, #27
 8001670:	011b      	lsls	r3, r3, #4
 8001672:	4413      	add	r3, r2
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	08db      	lsrs	r3, r3, #3
 8001678:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	605a      	str	r2, [r3, #4]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	331b      	adds	r3, #27
 8001688:	011b      	lsls	r3, r3, #4
 800168a:	4413      	add	r3, r2
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0202 	and.w	r2, r3, #2
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	331b      	adds	r3, #27
 800169e:	011b      	lsls	r3, r3, #4
 80016a0:	4413      	add	r3, r2
 80016a2:	3304      	adds	r3, #4
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0308 	and.w	r3, r3, #8
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <HAL_CAN_GetRxMessage+0xec>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2208      	movs	r2, #8
 80016b2:	611a      	str	r2, [r3, #16]
 80016b4:	e00b      	b.n	80016ce <HAL_CAN_GetRxMessage+0x104>
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	331b      	adds	r3, #27
 80016be:	011b      	lsls	r3, r3, #4
 80016c0:	4413      	add	r3, r2
 80016c2:	3304      	adds	r3, #4
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 020f 	and.w	r2, r3, #15
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	611a      	str	r2, [r3, #16]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	331b      	adds	r3, #27
 80016d6:	011b      	lsls	r3, r3, #4
 80016d8:	4413      	add	r3, r2
 80016da:	3304      	adds	r3, #4
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	0a1b      	lsrs	r3, r3, #8
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	619a      	str	r2, [r3, #24]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	331b      	adds	r3, #27
 80016ee:	011b      	lsls	r3, r3, #4
 80016f0:	4413      	add	r3, r2
 80016f2:	3304      	adds	r3, #4
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	0c1b      	lsrs	r3, r3, #16
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	615a      	str	r2, [r3, #20]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	011b      	lsls	r3, r3, #4
 8001706:	4413      	add	r3, r2
 8001708:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	b2da      	uxtb	r2, r3
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	701a      	strb	r2, [r3, #0]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	011b      	lsls	r3, r3, #4
 800171c:	4413      	add	r3, r2
 800171e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	0a1a      	lsrs	r2, r3, #8
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	3301      	adds	r3, #1
 800172a:	b2d2      	uxtb	r2, r2
 800172c:	701a      	strb	r2, [r3, #0]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	011b      	lsls	r3, r3, #4
 8001736:	4413      	add	r3, r2
 8001738:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	0c1a      	lsrs	r2, r3, #16
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	3302      	adds	r3, #2
 8001744:	b2d2      	uxtb	r2, r2
 8001746:	701a      	strb	r2, [r3, #0]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	011b      	lsls	r3, r3, #4
 8001750:	4413      	add	r3, r2
 8001752:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	0e1a      	lsrs	r2, r3, #24
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	3303      	adds	r3, #3
 800175e:	b2d2      	uxtb	r2, r2
 8001760:	701a      	strb	r2, [r3, #0]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	011b      	lsls	r3, r3, #4
 800176a:	4413      	add	r3, r2
 800176c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	3304      	adds	r3, #4
 8001776:	b2d2      	uxtb	r2, r2
 8001778:	701a      	strb	r2, [r3, #0]
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	011b      	lsls	r3, r3, #4
 8001782:	4413      	add	r3, r2
 8001784:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	0a1a      	lsrs	r2, r3, #8
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	3305      	adds	r3, #5
 8001790:	b2d2      	uxtb	r2, r2
 8001792:	701a      	strb	r2, [r3, #0]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	011b      	lsls	r3, r3, #4
 800179c:	4413      	add	r3, r2
 800179e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	0c1a      	lsrs	r2, r3, #16
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	3306      	adds	r3, #6
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	701a      	strb	r2, [r3, #0]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	011b      	lsls	r3, r3, #4
 80017b6:	4413      	add	r3, r2
 80017b8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	0e1a      	lsrs	r2, r3, #24
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	3307      	adds	r3, #7
 80017c4:	b2d2      	uxtb	r2, r2
 80017c6:	701a      	strb	r2, [r3, #0]
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d108      	bne.n	80017e0 <HAL_CAN_GetRxMessage+0x216>
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	68da      	ldr	r2, [r3, #12]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f042 0220 	orr.w	r2, r2, #32
 80017dc:	60da      	str	r2, [r3, #12]
 80017de:	e007      	b.n	80017f0 <HAL_CAN_GetRxMessage+0x226>
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	691a      	ldr	r2, [r3, #16]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f042 0220 	orr.w	r2, r2, #32
 80017ee:	611a      	str	r2, [r3, #16]
 80017f0:	2300      	movs	r3, #0
 80017f2:	e006      	b.n	8001802 <HAL_CAN_GetRxMessage+0x238>
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	625a      	str	r2, [r3, #36]	; 0x24
 8001800:	2301      	movs	r3, #1
 8001802:	4618      	mov	r0, r3
 8001804:	371c      	adds	r7, #28
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr

0800180c <HAL_CAN_ActivateNotification>:
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f893 3020 	ldrb.w	r3, [r3, #32]
 800181c:	73fb      	strb	r3, [r7, #15]
 800181e:	7bfb      	ldrb	r3, [r7, #15]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d002      	beq.n	800182a <HAL_CAN_ActivateNotification+0x1e>
 8001824:	7bfb      	ldrb	r3, [r7, #15]
 8001826:	2b02      	cmp	r3, #2
 8001828:	d109      	bne.n	800183e <HAL_CAN_ActivateNotification+0x32>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	6959      	ldr	r1, [r3, #20]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	430a      	orrs	r2, r1
 8001838:	615a      	str	r2, [r3, #20]
 800183a:	2300      	movs	r3, #0
 800183c:	e006      	b.n	800184c <HAL_CAN_ActivateNotification+0x40>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001842:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	625a      	str	r2, [r3, #36]	; 0x24
 800184a:	2301      	movs	r3, #1
 800184c:	4618      	mov	r0, r3
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr

08001856 <HAL_CAN_IRQHandler>:
 8001856:	b580      	push	{r7, lr}
 8001858:	b08a      	sub	sp, #40	; 0x28
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
 800185e:	2300      	movs	r3, #0
 8001860:	627b      	str	r3, [r7, #36]	; 0x24
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	695b      	ldr	r3, [r3, #20]
 8001868:	623b      	str	r3, [r7, #32]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	61fb      	str	r3, [r7, #28]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	61bb      	str	r3, [r7, #24]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	617b      	str	r3, [r7, #20]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	691b      	ldr	r3, [r3, #16]
 8001888:	613b      	str	r3, [r7, #16]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	6a3b      	ldr	r3, [r7, #32]
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	2b00      	cmp	r3, #0
 800189a:	d07c      	beq.n	8001996 <HAL_CAN_IRQHandler+0x140>
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d023      	beq.n	80018ee <HAL_CAN_IRQHandler+0x98>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2201      	movs	r2, #1
 80018ac:	609a      	str	r2, [r3, #8]
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d003      	beq.n	80018c0 <HAL_CAN_IRQHandler+0x6a>
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f000 f983 	bl	8001bc4 <HAL_CAN_TxMailbox0CompleteCallback>
 80018be:	e016      	b.n	80018ee <HAL_CAN_IRQHandler+0x98>
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	f003 0304 	and.w	r3, r3, #4
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d004      	beq.n	80018d4 <HAL_CAN_IRQHandler+0x7e>
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018d0:	627b      	str	r3, [r7, #36]	; 0x24
 80018d2:	e00c      	b.n	80018ee <HAL_CAN_IRQHandler+0x98>
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	f003 0308 	and.w	r3, r3, #8
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d004      	beq.n	80018e8 <HAL_CAN_IRQHandler+0x92>
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
 80018e6:	e002      	b.n	80018ee <HAL_CAN_IRQHandler+0x98>
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f000 f986 	bl	8001bfa <HAL_CAN_TxMailbox0AbortCallback>
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d024      	beq.n	8001942 <HAL_CAN_IRQHandler+0xec>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001900:	609a      	str	r2, [r3, #8]
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001908:	2b00      	cmp	r3, #0
 800190a:	d003      	beq.n	8001914 <HAL_CAN_IRQHandler+0xbe>
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f000 f962 	bl	8001bd6 <HAL_CAN_TxMailbox1CompleteCallback>
 8001912:	e016      	b.n	8001942 <HAL_CAN_IRQHandler+0xec>
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800191a:	2b00      	cmp	r3, #0
 800191c:	d004      	beq.n	8001928 <HAL_CAN_IRQHandler+0xd2>
 800191e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001920:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001924:	627b      	str	r3, [r7, #36]	; 0x24
 8001926:	e00c      	b.n	8001942 <HAL_CAN_IRQHandler+0xec>
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800192e:	2b00      	cmp	r3, #0
 8001930:	d004      	beq.n	800193c <HAL_CAN_IRQHandler+0xe6>
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001938:	627b      	str	r3, [r7, #36]	; 0x24
 800193a:	e002      	b.n	8001942 <HAL_CAN_IRQHandler+0xec>
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f000 f965 	bl	8001c0c <HAL_CAN_TxMailbox1AbortCallback>
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d024      	beq.n	8001996 <HAL_CAN_IRQHandler+0x140>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001954:	609a      	str	r2, [r3, #8]
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d003      	beq.n	8001968 <HAL_CAN_IRQHandler+0x112>
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f000 f941 	bl	8001be8 <HAL_CAN_TxMailbox2CompleteCallback>
 8001966:	e016      	b.n	8001996 <HAL_CAN_IRQHandler+0x140>
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d004      	beq.n	800197c <HAL_CAN_IRQHandler+0x126>
 8001972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001974:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
 800197a:	e00c      	b.n	8001996 <HAL_CAN_IRQHandler+0x140>
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d004      	beq.n	8001990 <HAL_CAN_IRQHandler+0x13a>
 8001986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
 800198e:	e002      	b.n	8001996 <HAL_CAN_IRQHandler+0x140>
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f000 f944 	bl	8001c1e <HAL_CAN_TxMailbox2AbortCallback>
 8001996:	6a3b      	ldr	r3, [r7, #32]
 8001998:	f003 0308 	and.w	r3, r3, #8
 800199c:	2b00      	cmp	r3, #0
 800199e:	d00c      	beq.n	80019ba <HAL_CAN_IRQHandler+0x164>
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	f003 0310 	and.w	r3, r3, #16
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d007      	beq.n	80019ba <HAL_CAN_IRQHandler+0x164>
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019b0:	627b      	str	r3, [r7, #36]	; 0x24
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2210      	movs	r2, #16
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	6a3b      	ldr	r3, [r7, #32]
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d00b      	beq.n	80019dc <HAL_CAN_IRQHandler+0x186>
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	f003 0308 	and.w	r3, r3, #8
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d006      	beq.n	80019dc <HAL_CAN_IRQHandler+0x186>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2208      	movs	r2, #8
 80019d4:	60da      	str	r2, [r3, #12]
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f000 f92a 	bl	8001c30 <HAL_CAN_RxFifo0FullCallback>
 80019dc:	6a3b      	ldr	r3, [r7, #32]
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d009      	beq.n	80019fa <HAL_CAN_IRQHandler+0x1a4>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	f003 0303 	and.w	r3, r3, #3
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d002      	beq.n	80019fa <HAL_CAN_IRQHandler+0x1a4>
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7fe fc7d 	bl	80002f4 <HAL_CAN_RxFifo0MsgPendingCallback>
 80019fa:	6a3b      	ldr	r3, [r7, #32]
 80019fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d00c      	beq.n	8001a1e <HAL_CAN_IRQHandler+0x1c8>
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	f003 0310 	and.w	r3, r3, #16
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d007      	beq.n	8001a1e <HAL_CAN_IRQHandler+0x1c8>
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a14:	627b      	str	r3, [r7, #36]	; 0x24
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2210      	movs	r2, #16
 8001a1c:	611a      	str	r2, [r3, #16]
 8001a1e:	6a3b      	ldr	r3, [r7, #32]
 8001a20:	f003 0320 	and.w	r3, r3, #32
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d00b      	beq.n	8001a40 <HAL_CAN_IRQHandler+0x1ea>
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	f003 0308 	and.w	r3, r3, #8
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d006      	beq.n	8001a40 <HAL_CAN_IRQHandler+0x1ea>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2208      	movs	r2, #8
 8001a38:	611a      	str	r2, [r3, #16]
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f000 f90a 	bl	8001c54 <HAL_CAN_RxFifo1FullCallback>
 8001a40:	6a3b      	ldr	r3, [r7, #32]
 8001a42:	f003 0310 	and.w	r3, r3, #16
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d009      	beq.n	8001a5e <HAL_CAN_IRQHandler+0x208>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	691b      	ldr	r3, [r3, #16]
 8001a50:	f003 0303 	and.w	r3, r3, #3
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d002      	beq.n	8001a5e <HAL_CAN_IRQHandler+0x208>
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f000 f8f2 	bl	8001c42 <HAL_CAN_RxFifo1MsgPendingCallback>
 8001a5e:	6a3b      	ldr	r3, [r7, #32]
 8001a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d00b      	beq.n	8001a80 <HAL_CAN_IRQHandler+0x22a>
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	f003 0310 	and.w	r3, r3, #16
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d006      	beq.n	8001a80 <HAL_CAN_IRQHandler+0x22a>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2210      	movs	r2, #16
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 f8f3 	bl	8001c66 <HAL_CAN_SleepCallback>
 8001a80:	6a3b      	ldr	r3, [r7, #32]
 8001a82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d00b      	beq.n	8001aa2 <HAL_CAN_IRQHandler+0x24c>
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	f003 0308 	and.w	r3, r3, #8
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d006      	beq.n	8001aa2 <HAL_CAN_IRQHandler+0x24c>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2208      	movs	r2, #8
 8001a9a:	605a      	str	r2, [r3, #4]
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f000 f8eb 	bl	8001c78 <HAL_CAN_WakeUpFromRxMsgCallback>
 8001aa2:	6a3b      	ldr	r3, [r7, #32]
 8001aa4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d07b      	beq.n	8001ba4 <HAL_CAN_IRQHandler+0x34e>
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	f003 0304 	and.w	r3, r3, #4
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d072      	beq.n	8001b9c <HAL_CAN_IRQHandler+0x346>
 8001ab6:	6a3b      	ldr	r3, [r7, #32]
 8001ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d008      	beq.n	8001ad2 <HAL_CAN_IRQHandler+0x27c>
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <HAL_CAN_IRQHandler+0x27c>
 8001aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ad2:	6a3b      	ldr	r3, [r7, #32]
 8001ad4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d008      	beq.n	8001aee <HAL_CAN_IRQHandler+0x298>
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <HAL_CAN_IRQHandler+0x298>
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae8:	f043 0302 	orr.w	r3, r3, #2
 8001aec:	627b      	str	r3, [r7, #36]	; 0x24
 8001aee:	6a3b      	ldr	r3, [r7, #32]
 8001af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d008      	beq.n	8001b0a <HAL_CAN_IRQHandler+0x2b4>
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f003 0304 	and.w	r3, r3, #4
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d003      	beq.n	8001b0a <HAL_CAN_IRQHandler+0x2b4>
 8001b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b04:	f043 0304 	orr.w	r3, r3, #4
 8001b08:	627b      	str	r3, [r7, #36]	; 0x24
 8001b0a:	6a3b      	ldr	r3, [r7, #32]
 8001b0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d043      	beq.n	8001b9c <HAL_CAN_IRQHandler+0x346>
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d03e      	beq.n	8001b9c <HAL_CAN_IRQHandler+0x346>
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b24:	2b60      	cmp	r3, #96	; 0x60
 8001b26:	d02b      	beq.n	8001b80 <HAL_CAN_IRQHandler+0x32a>
 8001b28:	2b60      	cmp	r3, #96	; 0x60
 8001b2a:	d82e      	bhi.n	8001b8a <HAL_CAN_IRQHandler+0x334>
 8001b2c:	2b50      	cmp	r3, #80	; 0x50
 8001b2e:	d022      	beq.n	8001b76 <HAL_CAN_IRQHandler+0x320>
 8001b30:	2b50      	cmp	r3, #80	; 0x50
 8001b32:	d82a      	bhi.n	8001b8a <HAL_CAN_IRQHandler+0x334>
 8001b34:	2b40      	cmp	r3, #64	; 0x40
 8001b36:	d019      	beq.n	8001b6c <HAL_CAN_IRQHandler+0x316>
 8001b38:	2b40      	cmp	r3, #64	; 0x40
 8001b3a:	d826      	bhi.n	8001b8a <HAL_CAN_IRQHandler+0x334>
 8001b3c:	2b30      	cmp	r3, #48	; 0x30
 8001b3e:	d010      	beq.n	8001b62 <HAL_CAN_IRQHandler+0x30c>
 8001b40:	2b30      	cmp	r3, #48	; 0x30
 8001b42:	d822      	bhi.n	8001b8a <HAL_CAN_IRQHandler+0x334>
 8001b44:	2b10      	cmp	r3, #16
 8001b46:	d002      	beq.n	8001b4e <HAL_CAN_IRQHandler+0x2f8>
 8001b48:	2b20      	cmp	r3, #32
 8001b4a:	d005      	beq.n	8001b58 <HAL_CAN_IRQHandler+0x302>
 8001b4c:	e01d      	b.n	8001b8a <HAL_CAN_IRQHandler+0x334>
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	f043 0308 	orr.w	r3, r3, #8
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
 8001b56:	e019      	b.n	8001b8c <HAL_CAN_IRQHandler+0x336>
 8001b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5a:	f043 0310 	orr.w	r3, r3, #16
 8001b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b60:	e014      	b.n	8001b8c <HAL_CAN_IRQHandler+0x336>
 8001b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b64:	f043 0320 	orr.w	r3, r3, #32
 8001b68:	627b      	str	r3, [r7, #36]	; 0x24
 8001b6a:	e00f      	b.n	8001b8c <HAL_CAN_IRQHandler+0x336>
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b72:	627b      	str	r3, [r7, #36]	; 0x24
 8001b74:	e00a      	b.n	8001b8c <HAL_CAN_IRQHandler+0x336>
 8001b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b7e:	e005      	b.n	8001b8c <HAL_CAN_IRQHandler+0x336>
 8001b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b86:	627b      	str	r3, [r7, #36]	; 0x24
 8001b88:	e000      	b.n	8001b8c <HAL_CAN_IRQHandler+0x336>
 8001b8a:	bf00      	nop
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	699a      	ldr	r2, [r3, #24]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001b9a:	619a      	str	r2, [r3, #24]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2204      	movs	r2, #4
 8001ba2:	605a      	str	r2, [r3, #4]
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d008      	beq.n	8001bbc <HAL_CAN_IRQHandler+0x366>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb0:	431a      	orrs	r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	625a      	str	r2, [r3, #36]	; 0x24
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 f867 	bl	8001c8a <HAL_CAN_ErrorCallback>
 8001bbc:	bf00      	nop
 8001bbe:	3728      	adds	r7, #40	; 0x28
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <HAL_CAN_TxMailbox0CompleteCallback>:
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bc80      	pop	{r7}
 8001bd4:	4770      	bx	lr

08001bd6 <HAL_CAN_TxMailbox1CompleteCallback>:
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr

08001be8 <HAL_CAN_TxMailbox2CompleteCallback>:
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bc80      	pop	{r7}
 8001bf8:	4770      	bx	lr

08001bfa <HAL_CAN_TxMailbox0AbortCallback>:
 8001bfa:	b480      	push	{r7}
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr

08001c0c <HAL_CAN_TxMailbox1AbortCallback>:
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bc80      	pop	{r7}
 8001c1c:	4770      	bx	lr

08001c1e <HAL_CAN_TxMailbox2AbortCallback>:
 8001c1e:	b480      	push	{r7}
 8001c20:	b083      	sub	sp, #12
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bc80      	pop	{r7}
 8001c2e:	4770      	bx	lr

08001c30 <HAL_CAN_RxFifo0FullCallback>:
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bc80      	pop	{r7}
 8001c40:	4770      	bx	lr

08001c42 <HAL_CAN_RxFifo1MsgPendingCallback>:
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr

08001c54 <HAL_CAN_RxFifo1FullCallback>:
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bc80      	pop	{r7}
 8001c64:	4770      	bx	lr

08001c66 <HAL_CAN_SleepCallback>:
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr

08001c78 <HAL_CAN_WakeUpFromRxMsgCallback>:
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bc80      	pop	{r7}
 8001c88:	4770      	bx	lr

08001c8a <HAL_CAN_ErrorCallback>:
 8001c8a:	b480      	push	{r7}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bc80      	pop	{r7}
 8001c9a:	4770      	bx	lr

08001c9c <__NVIC_SetPriorityGrouping>:
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	4b0c      	ldr	r3, [pc, #48]	; (8001ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	60bb      	str	r3, [r7, #8]
 8001cb2:	68ba      	ldr	r2, [r7, #8]
 8001cb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cb8:	4013      	ands	r3, r2
 8001cba:	60bb      	str	r3, [r7, #8]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	021a      	lsls	r2, r3, #8
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ccc:	60bb      	str	r3, [r7, #8]
 8001cce:	4a04      	ldr	r2, [pc, #16]	; (8001ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	60d3      	str	r3, [r2, #12]
 8001cd4:	bf00      	nop
 8001cd6:	3714      	adds	r7, #20
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <__NVIC_GetPriorityGrouping>:
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	4b04      	ldr	r3, [pc, #16]	; (8001cfc <__NVIC_GetPriorityGrouping+0x18>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	0a1b      	lsrs	r3, r3, #8
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bc80      	pop	{r7}
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	e000ed00 	.word	0xe000ed00

08001d00 <__NVIC_EnableIRQ>:
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	71fb      	strb	r3, [r7, #7]
 8001d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	db0b      	blt.n	8001d2a <__NVIC_EnableIRQ+0x2a>
 8001d12:	79fb      	ldrb	r3, [r7, #7]
 8001d14:	f003 021f 	and.w	r2, r3, #31
 8001d18:	4906      	ldr	r1, [pc, #24]	; (8001d34 <__NVIC_EnableIRQ+0x34>)
 8001d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1e:	095b      	lsrs	r3, r3, #5
 8001d20:	2001      	movs	r0, #1
 8001d22:	fa00 f202 	lsl.w	r2, r0, r2
 8001d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr
 8001d34:	e000e100 	.word	0xe000e100

08001d38 <__NVIC_SetPriority>:
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	6039      	str	r1, [r7, #0]
 8001d42:	71fb      	strb	r3, [r7, #7]
 8001d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	db0a      	blt.n	8001d62 <__NVIC_SetPriority+0x2a>
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	490c      	ldr	r1, [pc, #48]	; (8001d84 <__NVIC_SetPriority+0x4c>)
 8001d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d56:	0112      	lsls	r2, r2, #4
 8001d58:	b2d2      	uxtb	r2, r2
 8001d5a:	440b      	add	r3, r1
 8001d5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8001d60:	e00a      	b.n	8001d78 <__NVIC_SetPriority+0x40>
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	b2da      	uxtb	r2, r3
 8001d66:	4908      	ldr	r1, [pc, #32]	; (8001d88 <__NVIC_SetPriority+0x50>)
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	f003 030f 	and.w	r3, r3, #15
 8001d6e:	3b04      	subs	r3, #4
 8001d70:	0112      	lsls	r2, r2, #4
 8001d72:	b2d2      	uxtb	r2, r2
 8001d74:	440b      	add	r3, r1
 8001d76:	761a      	strb	r2, [r3, #24]
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bc80      	pop	{r7}
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	e000e100 	.word	0xe000e100
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <NVIC_EncodePriority>:
 8001d8c:	b480      	push	{r7}
 8001d8e:	b089      	sub	sp, #36	; 0x24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	61fb      	str	r3, [r7, #28]
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f1c3 0307 	rsb	r3, r3, #7
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	bf28      	it	cs
 8001daa:	2304      	movcs	r3, #4
 8001dac:	61bb      	str	r3, [r7, #24]
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	3304      	adds	r3, #4
 8001db2:	2b06      	cmp	r3, #6
 8001db4:	d902      	bls.n	8001dbc <NVIC_EncodePriority+0x30>
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	3b03      	subs	r3, #3
 8001dba:	e000      	b.n	8001dbe <NVIC_EncodePriority+0x32>
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]
 8001dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43da      	mvns	r2, r3
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	401a      	ands	r2, r3
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	409a      	lsls	r2, r3
 8001dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	fa01 f303 	lsl.w	r3, r1, r3
 8001dde:	43d9      	mvns	r1, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	400b      	ands	r3, r1
 8001de4:	4313      	orrs	r3, r2
 8001de6:	4618      	mov	r0, r3
 8001de8:	3724      	adds	r7, #36	; 0x24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr

08001df0 <SysTick_Config>:
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e00:	d301      	bcc.n	8001e06 <SysTick_Config+0x16>
 8001e02:	2301      	movs	r3, #1
 8001e04:	e00f      	b.n	8001e26 <SysTick_Config+0x36>
 8001e06:	4a0a      	ldr	r2, [pc, #40]	; (8001e30 <SysTick_Config+0x40>)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	6053      	str	r3, [r2, #4]
 8001e0e:	210f      	movs	r1, #15
 8001e10:	f04f 30ff 	mov.w	r0, #4294967295
 8001e14:	f7ff ff90 	bl	8001d38 <__NVIC_SetPriority>
 8001e18:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <SysTick_Config+0x40>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]
 8001e1e:	4b04      	ldr	r3, [pc, #16]	; (8001e30 <SysTick_Config+0x40>)
 8001e20:	2207      	movs	r2, #7
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	2300      	movs	r3, #0
 8001e26:	4618      	mov	r0, r3
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	e000e010 	.word	0xe000e010

08001e34 <HAL_NVIC_SetPriorityGrouping>:
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7ff ff2d 	bl	8001c9c <__NVIC_SetPriorityGrouping>
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_NVIC_SetPriority>:
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b086      	sub	sp, #24
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	4603      	mov	r3, r0
 8001e52:	60b9      	str	r1, [r7, #8]
 8001e54:	607a      	str	r2, [r7, #4]
 8001e56:	73fb      	strb	r3, [r7, #15]
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]
 8001e5c:	f7ff ff42 	bl	8001ce4 <__NVIC_GetPriorityGrouping>
 8001e60:	6178      	str	r0, [r7, #20]
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	68b9      	ldr	r1, [r7, #8]
 8001e66:	6978      	ldr	r0, [r7, #20]
 8001e68:	f7ff ff90 	bl	8001d8c <NVIC_EncodePriority>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e72:	4611      	mov	r1, r2
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff ff5f 	bl	8001d38 <__NVIC_SetPriority>
 8001e7a:	bf00      	nop
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_NVIC_EnableIRQ>:
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	4603      	mov	r3, r0
 8001e8a:	71fb      	strb	r3, [r7, #7]
 8001e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff ff35 	bl	8001d00 <__NVIC_EnableIRQ>
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_SYSTICK_Config>:
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7ff ffa2 	bl	8001df0 <SysTick_Config>
 8001eac:	4603      	mov	r3, r0
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
	...

08001eb8 <HAL_GPIO_Init>:
 8001eb8:	b480      	push	{r7}
 8001eba:	b08b      	sub	sp, #44	; 0x2c
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	623b      	str	r3, [r7, #32]
 8001eca:	e169      	b.n	80021a0 <HAL_GPIO_Init+0x2e8>
 8001ecc:	2201      	movs	r2, #1
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	61fb      	str	r3, [r7, #28]
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	69fa      	ldr	r2, [r7, #28]
 8001edc:	4013      	ands	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	f040 8158 	bne.w	800219a <HAL_GPIO_Init+0x2e2>
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	4a9a      	ldr	r2, [pc, #616]	; (8002158 <HAL_GPIO_Init+0x2a0>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d05e      	beq.n	8001fb2 <HAL_GPIO_Init+0xfa>
 8001ef4:	4a98      	ldr	r2, [pc, #608]	; (8002158 <HAL_GPIO_Init+0x2a0>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d875      	bhi.n	8001fe6 <HAL_GPIO_Init+0x12e>
 8001efa:	4a98      	ldr	r2, [pc, #608]	; (800215c <HAL_GPIO_Init+0x2a4>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d058      	beq.n	8001fb2 <HAL_GPIO_Init+0xfa>
 8001f00:	4a96      	ldr	r2, [pc, #600]	; (800215c <HAL_GPIO_Init+0x2a4>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d86f      	bhi.n	8001fe6 <HAL_GPIO_Init+0x12e>
 8001f06:	4a96      	ldr	r2, [pc, #600]	; (8002160 <HAL_GPIO_Init+0x2a8>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d052      	beq.n	8001fb2 <HAL_GPIO_Init+0xfa>
 8001f0c:	4a94      	ldr	r2, [pc, #592]	; (8002160 <HAL_GPIO_Init+0x2a8>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d869      	bhi.n	8001fe6 <HAL_GPIO_Init+0x12e>
 8001f12:	4a94      	ldr	r2, [pc, #592]	; (8002164 <HAL_GPIO_Init+0x2ac>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d04c      	beq.n	8001fb2 <HAL_GPIO_Init+0xfa>
 8001f18:	4a92      	ldr	r2, [pc, #584]	; (8002164 <HAL_GPIO_Init+0x2ac>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d863      	bhi.n	8001fe6 <HAL_GPIO_Init+0x12e>
 8001f1e:	4a92      	ldr	r2, [pc, #584]	; (8002168 <HAL_GPIO_Init+0x2b0>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d046      	beq.n	8001fb2 <HAL_GPIO_Init+0xfa>
 8001f24:	4a90      	ldr	r2, [pc, #576]	; (8002168 <HAL_GPIO_Init+0x2b0>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d85d      	bhi.n	8001fe6 <HAL_GPIO_Init+0x12e>
 8001f2a:	2b12      	cmp	r3, #18
 8001f2c:	d82a      	bhi.n	8001f84 <HAL_GPIO_Init+0xcc>
 8001f2e:	2b12      	cmp	r3, #18
 8001f30:	d859      	bhi.n	8001fe6 <HAL_GPIO_Init+0x12e>
 8001f32:	a201      	add	r2, pc, #4	; (adr r2, 8001f38 <HAL_GPIO_Init+0x80>)
 8001f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f38:	08001fb3 	.word	0x08001fb3
 8001f3c:	08001f8d 	.word	0x08001f8d
 8001f40:	08001f9f 	.word	0x08001f9f
 8001f44:	08001fe1 	.word	0x08001fe1
 8001f48:	08001fe7 	.word	0x08001fe7
 8001f4c:	08001fe7 	.word	0x08001fe7
 8001f50:	08001fe7 	.word	0x08001fe7
 8001f54:	08001fe7 	.word	0x08001fe7
 8001f58:	08001fe7 	.word	0x08001fe7
 8001f5c:	08001fe7 	.word	0x08001fe7
 8001f60:	08001fe7 	.word	0x08001fe7
 8001f64:	08001fe7 	.word	0x08001fe7
 8001f68:	08001fe7 	.word	0x08001fe7
 8001f6c:	08001fe7 	.word	0x08001fe7
 8001f70:	08001fe7 	.word	0x08001fe7
 8001f74:	08001fe7 	.word	0x08001fe7
 8001f78:	08001fe7 	.word	0x08001fe7
 8001f7c:	08001f95 	.word	0x08001f95
 8001f80:	08001fa9 	.word	0x08001fa9
 8001f84:	4a79      	ldr	r2, [pc, #484]	; (800216c <HAL_GPIO_Init+0x2b4>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d013      	beq.n	8001fb2 <HAL_GPIO_Init+0xfa>
 8001f8a:	e02c      	b.n	8001fe6 <HAL_GPIO_Init+0x12e>
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	623b      	str	r3, [r7, #32]
 8001f92:	e029      	b.n	8001fe8 <HAL_GPIO_Init+0x130>
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	3304      	adds	r3, #4
 8001f9a:	623b      	str	r3, [r7, #32]
 8001f9c:	e024      	b.n	8001fe8 <HAL_GPIO_Init+0x130>
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	3308      	adds	r3, #8
 8001fa4:	623b      	str	r3, [r7, #32]
 8001fa6:	e01f      	b.n	8001fe8 <HAL_GPIO_Init+0x130>
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	330c      	adds	r3, #12
 8001fae:	623b      	str	r3, [r7, #32]
 8001fb0:	e01a      	b.n	8001fe8 <HAL_GPIO_Init+0x130>
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d102      	bne.n	8001fc0 <HAL_GPIO_Init+0x108>
 8001fba:	2304      	movs	r3, #4
 8001fbc:	623b      	str	r3, [r7, #32]
 8001fbe:	e013      	b.n	8001fe8 <HAL_GPIO_Init+0x130>
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d105      	bne.n	8001fd4 <HAL_GPIO_Init+0x11c>
 8001fc8:	2308      	movs	r3, #8
 8001fca:	623b      	str	r3, [r7, #32]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	69fa      	ldr	r2, [r7, #28]
 8001fd0:	611a      	str	r2, [r3, #16]
 8001fd2:	e009      	b.n	8001fe8 <HAL_GPIO_Init+0x130>
 8001fd4:	2308      	movs	r3, #8
 8001fd6:	623b      	str	r3, [r7, #32]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	69fa      	ldr	r2, [r7, #28]
 8001fdc:	615a      	str	r2, [r3, #20]
 8001fde:	e003      	b.n	8001fe8 <HAL_GPIO_Init+0x130>
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	623b      	str	r3, [r7, #32]
 8001fe4:	e000      	b.n	8001fe8 <HAL_GPIO_Init+0x130>
 8001fe6:	bf00      	nop
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	2bff      	cmp	r3, #255	; 0xff
 8001fec:	d801      	bhi.n	8001ff2 <HAL_GPIO_Init+0x13a>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	e001      	b.n	8001ff6 <HAL_GPIO_Init+0x13e>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	3304      	adds	r3, #4
 8001ff6:	617b      	str	r3, [r7, #20]
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	2bff      	cmp	r3, #255	; 0xff
 8001ffc:	d802      	bhi.n	8002004 <HAL_GPIO_Init+0x14c>
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	e002      	b.n	800200a <HAL_GPIO_Init+0x152>
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	3b08      	subs	r3, #8
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	613b      	str	r3, [r7, #16]
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	210f      	movs	r1, #15
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	fa01 f303 	lsl.w	r3, r1, r3
 8002018:	43db      	mvns	r3, r3
 800201a:	401a      	ands	r2, r3
 800201c:	6a39      	ldr	r1, [r7, #32]
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	fa01 f303 	lsl.w	r3, r1, r3
 8002024:	431a      	orrs	r2, r3
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002032:	2b00      	cmp	r3, #0
 8002034:	f000 80b1 	beq.w	800219a <HAL_GPIO_Init+0x2e2>
 8002038:	4b4d      	ldr	r3, [pc, #308]	; (8002170 <HAL_GPIO_Init+0x2b8>)
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	4a4c      	ldr	r2, [pc, #304]	; (8002170 <HAL_GPIO_Init+0x2b8>)
 800203e:	f043 0301 	orr.w	r3, r3, #1
 8002042:	6193      	str	r3, [r2, #24]
 8002044:	4b4a      	ldr	r3, [pc, #296]	; (8002170 <HAL_GPIO_Init+0x2b8>)
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	60bb      	str	r3, [r7, #8]
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	4a48      	ldr	r2, [pc, #288]	; (8002174 <HAL_GPIO_Init+0x2bc>)
 8002052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002054:	089b      	lsrs	r3, r3, #2
 8002056:	3302      	adds	r3, #2
 8002058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002060:	f003 0303 	and.w	r3, r3, #3
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	220f      	movs	r2, #15
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	43db      	mvns	r3, r3
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	4013      	ands	r3, r2
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a40      	ldr	r2, [pc, #256]	; (8002178 <HAL_GPIO_Init+0x2c0>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d013      	beq.n	80020a4 <HAL_GPIO_Init+0x1ec>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a3f      	ldr	r2, [pc, #252]	; (800217c <HAL_GPIO_Init+0x2c4>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d00d      	beq.n	80020a0 <HAL_GPIO_Init+0x1e8>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a3e      	ldr	r2, [pc, #248]	; (8002180 <HAL_GPIO_Init+0x2c8>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d007      	beq.n	800209c <HAL_GPIO_Init+0x1e4>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a3d      	ldr	r2, [pc, #244]	; (8002184 <HAL_GPIO_Init+0x2cc>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d101      	bne.n	8002098 <HAL_GPIO_Init+0x1e0>
 8002094:	2303      	movs	r3, #3
 8002096:	e006      	b.n	80020a6 <HAL_GPIO_Init+0x1ee>
 8002098:	2304      	movs	r3, #4
 800209a:	e004      	b.n	80020a6 <HAL_GPIO_Init+0x1ee>
 800209c:	2302      	movs	r3, #2
 800209e:	e002      	b.n	80020a6 <HAL_GPIO_Init+0x1ee>
 80020a0:	2301      	movs	r3, #1
 80020a2:	e000      	b.n	80020a6 <HAL_GPIO_Init+0x1ee>
 80020a4:	2300      	movs	r3, #0
 80020a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020a8:	f002 0203 	and.w	r2, r2, #3
 80020ac:	0092      	lsls	r2, r2, #2
 80020ae:	4093      	lsls	r3, r2
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	492f      	ldr	r1, [pc, #188]	; (8002174 <HAL_GPIO_Init+0x2bc>)
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	089b      	lsrs	r3, r3, #2
 80020bc:	3302      	adds	r3, #2
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d006      	beq.n	80020de <HAL_GPIO_Init+0x226>
 80020d0:	4b2d      	ldr	r3, [pc, #180]	; (8002188 <HAL_GPIO_Init+0x2d0>)
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	492c      	ldr	r1, [pc, #176]	; (8002188 <HAL_GPIO_Init+0x2d0>)
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	4313      	orrs	r3, r2
 80020da:	608b      	str	r3, [r1, #8]
 80020dc:	e006      	b.n	80020ec <HAL_GPIO_Init+0x234>
 80020de:	4b2a      	ldr	r3, [pc, #168]	; (8002188 <HAL_GPIO_Init+0x2d0>)
 80020e0:	689a      	ldr	r2, [r3, #8]
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	43db      	mvns	r3, r3
 80020e6:	4928      	ldr	r1, [pc, #160]	; (8002188 <HAL_GPIO_Init+0x2d0>)
 80020e8:	4013      	ands	r3, r2
 80020ea:	608b      	str	r3, [r1, #8]
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d006      	beq.n	8002106 <HAL_GPIO_Init+0x24e>
 80020f8:	4b23      	ldr	r3, [pc, #140]	; (8002188 <HAL_GPIO_Init+0x2d0>)
 80020fa:	68da      	ldr	r2, [r3, #12]
 80020fc:	4922      	ldr	r1, [pc, #136]	; (8002188 <HAL_GPIO_Init+0x2d0>)
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	4313      	orrs	r3, r2
 8002102:	60cb      	str	r3, [r1, #12]
 8002104:	e006      	b.n	8002114 <HAL_GPIO_Init+0x25c>
 8002106:	4b20      	ldr	r3, [pc, #128]	; (8002188 <HAL_GPIO_Init+0x2d0>)
 8002108:	68da      	ldr	r2, [r3, #12]
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	43db      	mvns	r3, r3
 800210e:	491e      	ldr	r1, [pc, #120]	; (8002188 <HAL_GPIO_Init+0x2d0>)
 8002110:	4013      	ands	r3, r2
 8002112:	60cb      	str	r3, [r1, #12]
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d006      	beq.n	800212e <HAL_GPIO_Init+0x276>
 8002120:	4b19      	ldr	r3, [pc, #100]	; (8002188 <HAL_GPIO_Init+0x2d0>)
 8002122:	685a      	ldr	r2, [r3, #4]
 8002124:	4918      	ldr	r1, [pc, #96]	; (8002188 <HAL_GPIO_Init+0x2d0>)
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	4313      	orrs	r3, r2
 800212a:	604b      	str	r3, [r1, #4]
 800212c:	e006      	b.n	800213c <HAL_GPIO_Init+0x284>
 800212e:	4b16      	ldr	r3, [pc, #88]	; (8002188 <HAL_GPIO_Init+0x2d0>)
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	43db      	mvns	r3, r3
 8002136:	4914      	ldr	r1, [pc, #80]	; (8002188 <HAL_GPIO_Init+0x2d0>)
 8002138:	4013      	ands	r3, r2
 800213a:	604b      	str	r3, [r1, #4]
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d021      	beq.n	800218c <HAL_GPIO_Init+0x2d4>
 8002148:	4b0f      	ldr	r3, [pc, #60]	; (8002188 <HAL_GPIO_Init+0x2d0>)
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	490e      	ldr	r1, [pc, #56]	; (8002188 <HAL_GPIO_Init+0x2d0>)
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	4313      	orrs	r3, r2
 8002152:	600b      	str	r3, [r1, #0]
 8002154:	e021      	b.n	800219a <HAL_GPIO_Init+0x2e2>
 8002156:	bf00      	nop
 8002158:	10320000 	.word	0x10320000
 800215c:	10310000 	.word	0x10310000
 8002160:	10220000 	.word	0x10220000
 8002164:	10210000 	.word	0x10210000
 8002168:	10120000 	.word	0x10120000
 800216c:	10110000 	.word	0x10110000
 8002170:	40021000 	.word	0x40021000
 8002174:	40010000 	.word	0x40010000
 8002178:	40010800 	.word	0x40010800
 800217c:	40010c00 	.word	0x40010c00
 8002180:	40011000 	.word	0x40011000
 8002184:	40011400 	.word	0x40011400
 8002188:	40010400 	.word	0x40010400
 800218c:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <HAL_GPIO_Init+0x304>)
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	43db      	mvns	r3, r3
 8002194:	4909      	ldr	r1, [pc, #36]	; (80021bc <HAL_GPIO_Init+0x304>)
 8002196:	4013      	ands	r3, r2
 8002198:	600b      	str	r3, [r1, #0]
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	3301      	adds	r3, #1
 800219e:	627b      	str	r3, [r7, #36]	; 0x24
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	fa22 f303 	lsr.w	r3, r2, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f47f ae8e 	bne.w	8001ecc <HAL_GPIO_Init+0x14>
 80021b0:	bf00      	nop
 80021b2:	bf00      	nop
 80021b4:	372c      	adds	r7, #44	; 0x2c
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bc80      	pop	{r7}
 80021ba:	4770      	bx	lr
 80021bc:	40010400 	.word	0x40010400

080021c0 <HAL_RCC_OscConfig>:
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <HAL_RCC_OscConfig+0x12>
 80021ce:	2301      	movs	r3, #1
 80021d0:	e272      	b.n	80026b8 <HAL_RCC_OscConfig+0x4f8>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f000 8087 	beq.w	80022ee <HAL_RCC_OscConfig+0x12e>
 80021e0:	4b92      	ldr	r3, [pc, #584]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 030c 	and.w	r3, r3, #12
 80021e8:	2b04      	cmp	r3, #4
 80021ea:	d00c      	beq.n	8002206 <HAL_RCC_OscConfig+0x46>
 80021ec:	4b8f      	ldr	r3, [pc, #572]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f003 030c 	and.w	r3, r3, #12
 80021f4:	2b08      	cmp	r3, #8
 80021f6:	d112      	bne.n	800221e <HAL_RCC_OscConfig+0x5e>
 80021f8:	4b8c      	ldr	r3, [pc, #560]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002204:	d10b      	bne.n	800221e <HAL_RCC_OscConfig+0x5e>
 8002206:	4b89      	ldr	r3, [pc, #548]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d06c      	beq.n	80022ec <HAL_RCC_OscConfig+0x12c>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d168      	bne.n	80022ec <HAL_RCC_OscConfig+0x12c>
 800221a:	2301      	movs	r3, #1
 800221c:	e24c      	b.n	80026b8 <HAL_RCC_OscConfig+0x4f8>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002226:	d106      	bne.n	8002236 <HAL_RCC_OscConfig+0x76>
 8002228:	4b80      	ldr	r3, [pc, #512]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a7f      	ldr	r2, [pc, #508]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 800222e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002232:	6013      	str	r3, [r2, #0]
 8002234:	e02e      	b.n	8002294 <HAL_RCC_OscConfig+0xd4>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d10c      	bne.n	8002258 <HAL_RCC_OscConfig+0x98>
 800223e:	4b7b      	ldr	r3, [pc, #492]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a7a      	ldr	r2, [pc, #488]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 8002244:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002248:	6013      	str	r3, [r2, #0]
 800224a:	4b78      	ldr	r3, [pc, #480]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a77      	ldr	r2, [pc, #476]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 8002250:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002254:	6013      	str	r3, [r2, #0]
 8002256:	e01d      	b.n	8002294 <HAL_RCC_OscConfig+0xd4>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002260:	d10c      	bne.n	800227c <HAL_RCC_OscConfig+0xbc>
 8002262:	4b72      	ldr	r3, [pc, #456]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a71      	ldr	r2, [pc, #452]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 8002268:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800226c:	6013      	str	r3, [r2, #0]
 800226e:	4b6f      	ldr	r3, [pc, #444]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a6e      	ldr	r2, [pc, #440]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 8002274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002278:	6013      	str	r3, [r2, #0]
 800227a:	e00b      	b.n	8002294 <HAL_RCC_OscConfig+0xd4>
 800227c:	4b6b      	ldr	r3, [pc, #428]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a6a      	ldr	r2, [pc, #424]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 8002282:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002286:	6013      	str	r3, [r2, #0]
 8002288:	4b68      	ldr	r3, [pc, #416]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a67      	ldr	r2, [pc, #412]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 800228e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002292:	6013      	str	r3, [r2, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d013      	beq.n	80022c4 <HAL_RCC_OscConfig+0x104>
 800229c:	f7fe feb4 	bl	8001008 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0xf6>
 80022a4:	f7fe feb0 	bl	8001008 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b64      	cmp	r3, #100	; 0x64
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0xf6>
 80022b2:	2303      	movs	r3, #3
 80022b4:	e200      	b.n	80026b8 <HAL_RCC_OscConfig+0x4f8>
 80022b6:	4b5d      	ldr	r3, [pc, #372]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d0f0      	beq.n	80022a4 <HAL_RCC_OscConfig+0xe4>
 80022c2:	e014      	b.n	80022ee <HAL_RCC_OscConfig+0x12e>
 80022c4:	f7fe fea0 	bl	8001008 <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x11e>
 80022cc:	f7fe fe9c 	bl	8001008 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b64      	cmp	r3, #100	; 0x64
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x11e>
 80022da:	2303      	movs	r3, #3
 80022dc:	e1ec      	b.n	80026b8 <HAL_RCC_OscConfig+0x4f8>
 80022de:	4b53      	ldr	r3, [pc, #332]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1f0      	bne.n	80022cc <HAL_RCC_OscConfig+0x10c>
 80022ea:	e000      	b.n	80022ee <HAL_RCC_OscConfig+0x12e>
 80022ec:	bf00      	nop
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d063      	beq.n	80023c2 <HAL_RCC_OscConfig+0x202>
 80022fa:	4b4c      	ldr	r3, [pc, #304]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f003 030c 	and.w	r3, r3, #12
 8002302:	2b00      	cmp	r3, #0
 8002304:	d00b      	beq.n	800231e <HAL_RCC_OscConfig+0x15e>
 8002306:	4b49      	ldr	r3, [pc, #292]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f003 030c 	and.w	r3, r3, #12
 800230e:	2b08      	cmp	r3, #8
 8002310:	d11c      	bne.n	800234c <HAL_RCC_OscConfig+0x18c>
 8002312:	4b46      	ldr	r3, [pc, #280]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d116      	bne.n	800234c <HAL_RCC_OscConfig+0x18c>
 800231e:	4b43      	ldr	r3, [pc, #268]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d005      	beq.n	8002336 <HAL_RCC_OscConfig+0x176>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d001      	beq.n	8002336 <HAL_RCC_OscConfig+0x176>
 8002332:	2301      	movs	r3, #1
 8002334:	e1c0      	b.n	80026b8 <HAL_RCC_OscConfig+0x4f8>
 8002336:	4b3d      	ldr	r3, [pc, #244]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	4939      	ldr	r1, [pc, #228]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 8002346:	4313      	orrs	r3, r2
 8002348:	600b      	str	r3, [r1, #0]
 800234a:	e03a      	b.n	80023c2 <HAL_RCC_OscConfig+0x202>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d020      	beq.n	8002396 <HAL_RCC_OscConfig+0x1d6>
 8002354:	4b36      	ldr	r3, [pc, #216]	; (8002430 <HAL_RCC_OscConfig+0x270>)
 8002356:	2201      	movs	r2, #1
 8002358:	601a      	str	r2, [r3, #0]
 800235a:	f7fe fe55 	bl	8001008 <HAL_GetTick>
 800235e:	6138      	str	r0, [r7, #16]
 8002360:	e008      	b.n	8002374 <HAL_RCC_OscConfig+0x1b4>
 8002362:	f7fe fe51 	bl	8001008 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d901      	bls.n	8002374 <HAL_RCC_OscConfig+0x1b4>
 8002370:	2303      	movs	r3, #3
 8002372:	e1a1      	b.n	80026b8 <HAL_RCC_OscConfig+0x4f8>
 8002374:	4b2d      	ldr	r3, [pc, #180]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d0f0      	beq.n	8002362 <HAL_RCC_OscConfig+0x1a2>
 8002380:	4b2a      	ldr	r3, [pc, #168]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	695b      	ldr	r3, [r3, #20]
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	4927      	ldr	r1, [pc, #156]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 8002390:	4313      	orrs	r3, r2
 8002392:	600b      	str	r3, [r1, #0]
 8002394:	e015      	b.n	80023c2 <HAL_RCC_OscConfig+0x202>
 8002396:	4b26      	ldr	r3, [pc, #152]	; (8002430 <HAL_RCC_OscConfig+0x270>)
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	f7fe fe34 	bl	8001008 <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0x1f6>
 80023a4:	f7fe fe30 	bl	8001008 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x1f6>
 80023b2:	2303      	movs	r3, #3
 80023b4:	e180      	b.n	80026b8 <HAL_RCC_OscConfig+0x4f8>
 80023b6:	4b1d      	ldr	r3, [pc, #116]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1f0      	bne.n	80023a4 <HAL_RCC_OscConfig+0x1e4>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0308 	and.w	r3, r3, #8
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d03a      	beq.n	8002444 <HAL_RCC_OscConfig+0x284>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d019      	beq.n	800240a <HAL_RCC_OscConfig+0x24a>
 80023d6:	4b17      	ldr	r3, [pc, #92]	; (8002434 <HAL_RCC_OscConfig+0x274>)
 80023d8:	2201      	movs	r2, #1
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	f7fe fe14 	bl	8001008 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0x236>
 80023e4:	f7fe fe10 	bl	8001008 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x236>
 80023f2:	2303      	movs	r3, #3
 80023f4:	e160      	b.n	80026b8 <HAL_RCC_OscConfig+0x4f8>
 80023f6:	4b0d      	ldr	r3, [pc, #52]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 80023f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d0f0      	beq.n	80023e4 <HAL_RCC_OscConfig+0x224>
 8002402:	2001      	movs	r0, #1
 8002404:	f000 fa9c 	bl	8002940 <RCC_Delay>
 8002408:	e01c      	b.n	8002444 <HAL_RCC_OscConfig+0x284>
 800240a:	4b0a      	ldr	r3, [pc, #40]	; (8002434 <HAL_RCC_OscConfig+0x274>)
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	f7fe fdfa 	bl	8001008 <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]
 8002416:	e00f      	b.n	8002438 <HAL_RCC_OscConfig+0x278>
 8002418:	f7fe fdf6 	bl	8001008 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d908      	bls.n	8002438 <HAL_RCC_OscConfig+0x278>
 8002426:	2303      	movs	r3, #3
 8002428:	e146      	b.n	80026b8 <HAL_RCC_OscConfig+0x4f8>
 800242a:	bf00      	nop
 800242c:	40021000 	.word	0x40021000
 8002430:	42420000 	.word	0x42420000
 8002434:	42420480 	.word	0x42420480
 8002438:	4b92      	ldr	r3, [pc, #584]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 800243a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d1e9      	bne.n	8002418 <HAL_RCC_OscConfig+0x258>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0304 	and.w	r3, r3, #4
 800244c:	2b00      	cmp	r3, #0
 800244e:	f000 80a6 	beq.w	800259e <HAL_RCC_OscConfig+0x3de>
 8002452:	2300      	movs	r3, #0
 8002454:	75fb      	strb	r3, [r7, #23]
 8002456:	4b8b      	ldr	r3, [pc, #556]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 8002458:	69db      	ldr	r3, [r3, #28]
 800245a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10d      	bne.n	800247e <HAL_RCC_OscConfig+0x2be>
 8002462:	4b88      	ldr	r3, [pc, #544]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	4a87      	ldr	r2, [pc, #540]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 8002468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800246c:	61d3      	str	r3, [r2, #28]
 800246e:	4b85      	ldr	r3, [pc, #532]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002476:	60bb      	str	r3, [r7, #8]
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	2301      	movs	r3, #1
 800247c:	75fb      	strb	r3, [r7, #23]
 800247e:	4b82      	ldr	r3, [pc, #520]	; (8002688 <HAL_RCC_OscConfig+0x4c8>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002486:	2b00      	cmp	r3, #0
 8002488:	d118      	bne.n	80024bc <HAL_RCC_OscConfig+0x2fc>
 800248a:	4b7f      	ldr	r3, [pc, #508]	; (8002688 <HAL_RCC_OscConfig+0x4c8>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a7e      	ldr	r2, [pc, #504]	; (8002688 <HAL_RCC_OscConfig+0x4c8>)
 8002490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002494:	6013      	str	r3, [r2, #0]
 8002496:	f7fe fdb7 	bl	8001008 <HAL_GetTick>
 800249a:	6138      	str	r0, [r7, #16]
 800249c:	e008      	b.n	80024b0 <HAL_RCC_OscConfig+0x2f0>
 800249e:	f7fe fdb3 	bl	8001008 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b64      	cmp	r3, #100	; 0x64
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x2f0>
 80024ac:	2303      	movs	r3, #3
 80024ae:	e103      	b.n	80026b8 <HAL_RCC_OscConfig+0x4f8>
 80024b0:	4b75      	ldr	r3, [pc, #468]	; (8002688 <HAL_RCC_OscConfig+0x4c8>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0f0      	beq.n	800249e <HAL_RCC_OscConfig+0x2de>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d106      	bne.n	80024d2 <HAL_RCC_OscConfig+0x312>
 80024c4:	4b6f      	ldr	r3, [pc, #444]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	4a6e      	ldr	r2, [pc, #440]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 80024ca:	f043 0301 	orr.w	r3, r3, #1
 80024ce:	6213      	str	r3, [r2, #32]
 80024d0:	e02d      	b.n	800252e <HAL_RCC_OscConfig+0x36e>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d10c      	bne.n	80024f4 <HAL_RCC_OscConfig+0x334>
 80024da:	4b6a      	ldr	r3, [pc, #424]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	4a69      	ldr	r2, [pc, #420]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 80024e0:	f023 0301 	bic.w	r3, r3, #1
 80024e4:	6213      	str	r3, [r2, #32]
 80024e6:	4b67      	ldr	r3, [pc, #412]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 80024e8:	6a1b      	ldr	r3, [r3, #32]
 80024ea:	4a66      	ldr	r2, [pc, #408]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 80024ec:	f023 0304 	bic.w	r3, r3, #4
 80024f0:	6213      	str	r3, [r2, #32]
 80024f2:	e01c      	b.n	800252e <HAL_RCC_OscConfig+0x36e>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	2b05      	cmp	r3, #5
 80024fa:	d10c      	bne.n	8002516 <HAL_RCC_OscConfig+0x356>
 80024fc:	4b61      	ldr	r3, [pc, #388]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	4a60      	ldr	r2, [pc, #384]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 8002502:	f043 0304 	orr.w	r3, r3, #4
 8002506:	6213      	str	r3, [r2, #32]
 8002508:	4b5e      	ldr	r3, [pc, #376]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	4a5d      	ldr	r2, [pc, #372]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 800250e:	f043 0301 	orr.w	r3, r3, #1
 8002512:	6213      	str	r3, [r2, #32]
 8002514:	e00b      	b.n	800252e <HAL_RCC_OscConfig+0x36e>
 8002516:	4b5b      	ldr	r3, [pc, #364]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	4a5a      	ldr	r2, [pc, #360]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 800251c:	f023 0301 	bic.w	r3, r3, #1
 8002520:	6213      	str	r3, [r2, #32]
 8002522:	4b58      	ldr	r3, [pc, #352]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	4a57      	ldr	r2, [pc, #348]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 8002528:	f023 0304 	bic.w	r3, r3, #4
 800252c:	6213      	str	r3, [r2, #32]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d015      	beq.n	8002562 <HAL_RCC_OscConfig+0x3a2>
 8002536:	f7fe fd67 	bl	8001008 <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]
 800253c:	e00a      	b.n	8002554 <HAL_RCC_OscConfig+0x394>
 800253e:	f7fe fd63 	bl	8001008 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	f241 3288 	movw	r2, #5000	; 0x1388
 800254c:	4293      	cmp	r3, r2
 800254e:	d901      	bls.n	8002554 <HAL_RCC_OscConfig+0x394>
 8002550:	2303      	movs	r3, #3
 8002552:	e0b1      	b.n	80026b8 <HAL_RCC_OscConfig+0x4f8>
 8002554:	4b4b      	ldr	r3, [pc, #300]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d0ee      	beq.n	800253e <HAL_RCC_OscConfig+0x37e>
 8002560:	e014      	b.n	800258c <HAL_RCC_OscConfig+0x3cc>
 8002562:	f7fe fd51 	bl	8001008 <HAL_GetTick>
 8002566:	6138      	str	r0, [r7, #16]
 8002568:	e00a      	b.n	8002580 <HAL_RCC_OscConfig+0x3c0>
 800256a:	f7fe fd4d 	bl	8001008 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	f241 3288 	movw	r2, #5000	; 0x1388
 8002578:	4293      	cmp	r3, r2
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x3c0>
 800257c:	2303      	movs	r3, #3
 800257e:	e09b      	b.n	80026b8 <HAL_RCC_OscConfig+0x4f8>
 8002580:	4b40      	ldr	r3, [pc, #256]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1ee      	bne.n	800256a <HAL_RCC_OscConfig+0x3aa>
 800258c:	7dfb      	ldrb	r3, [r7, #23]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d105      	bne.n	800259e <HAL_RCC_OscConfig+0x3de>
 8002592:	4b3c      	ldr	r3, [pc, #240]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	4a3b      	ldr	r2, [pc, #236]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 8002598:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800259c:	61d3      	str	r3, [r2, #28]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f000 8087 	beq.w	80026b6 <HAL_RCC_OscConfig+0x4f6>
 80025a8:	4b36      	ldr	r3, [pc, #216]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f003 030c 	and.w	r3, r3, #12
 80025b0:	2b08      	cmp	r3, #8
 80025b2:	d061      	beq.n	8002678 <HAL_RCC_OscConfig+0x4b8>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	69db      	ldr	r3, [r3, #28]
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d146      	bne.n	800264a <HAL_RCC_OscConfig+0x48a>
 80025bc:	4b33      	ldr	r3, [pc, #204]	; (800268c <HAL_RCC_OscConfig+0x4cc>)
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	f7fe fd21 	bl	8001008 <HAL_GetTick>
 80025c6:	6138      	str	r0, [r7, #16]
 80025c8:	e008      	b.n	80025dc <HAL_RCC_OscConfig+0x41c>
 80025ca:	f7fe fd1d 	bl	8001008 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_OscConfig+0x41c>
 80025d8:	2303      	movs	r3, #3
 80025da:	e06d      	b.n	80026b8 <HAL_RCC_OscConfig+0x4f8>
 80025dc:	4b29      	ldr	r3, [pc, #164]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1f0      	bne.n	80025ca <HAL_RCC_OscConfig+0x40a>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a1b      	ldr	r3, [r3, #32]
 80025ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025f0:	d108      	bne.n	8002604 <HAL_RCC_OscConfig+0x444>
 80025f2:	4b24      	ldr	r3, [pc, #144]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	4921      	ldr	r1, [pc, #132]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 8002600:	4313      	orrs	r3, r2
 8002602:	604b      	str	r3, [r1, #4]
 8002604:	4b1f      	ldr	r3, [pc, #124]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a19      	ldr	r1, [r3, #32]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002614:	430b      	orrs	r3, r1
 8002616:	491b      	ldr	r1, [pc, #108]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 8002618:	4313      	orrs	r3, r2
 800261a:	604b      	str	r3, [r1, #4]
 800261c:	4b1b      	ldr	r3, [pc, #108]	; (800268c <HAL_RCC_OscConfig+0x4cc>)
 800261e:	2201      	movs	r2, #1
 8002620:	601a      	str	r2, [r3, #0]
 8002622:	f7fe fcf1 	bl	8001008 <HAL_GetTick>
 8002626:	6138      	str	r0, [r7, #16]
 8002628:	e008      	b.n	800263c <HAL_RCC_OscConfig+0x47c>
 800262a:	f7fe fced 	bl	8001008 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x47c>
 8002638:	2303      	movs	r3, #3
 800263a:	e03d      	b.n	80026b8 <HAL_RCC_OscConfig+0x4f8>
 800263c:	4b11      	ldr	r3, [pc, #68]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d0f0      	beq.n	800262a <HAL_RCC_OscConfig+0x46a>
 8002648:	e035      	b.n	80026b6 <HAL_RCC_OscConfig+0x4f6>
 800264a:	4b10      	ldr	r3, [pc, #64]	; (800268c <HAL_RCC_OscConfig+0x4cc>)
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	f7fe fcda 	bl	8001008 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0x4aa>
 8002658:	f7fe fcd6 	bl	8001008 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x4aa>
 8002666:	2303      	movs	r3, #3
 8002668:	e026      	b.n	80026b8 <HAL_RCC_OscConfig+0x4f8>
 800266a:	4b06      	ldr	r3, [pc, #24]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1f0      	bne.n	8002658 <HAL_RCC_OscConfig+0x498>
 8002676:	e01e      	b.n	80026b6 <HAL_RCC_OscConfig+0x4f6>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	69db      	ldr	r3, [r3, #28]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d107      	bne.n	8002690 <HAL_RCC_OscConfig+0x4d0>
 8002680:	2301      	movs	r3, #1
 8002682:	e019      	b.n	80026b8 <HAL_RCC_OscConfig+0x4f8>
 8002684:	40021000 	.word	0x40021000
 8002688:	40007000 	.word	0x40007000
 800268c:	42420060 	.word	0x42420060
 8002690:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <HAL_RCC_OscConfig+0x500>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	60fb      	str	r3, [r7, #12]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d106      	bne.n	80026b2 <HAL_RCC_OscConfig+0x4f2>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d001      	beq.n	80026b6 <HAL_RCC_OscConfig+0x4f6>
 80026b2:	2301      	movs	r3, #1
 80026b4:	e000      	b.n	80026b8 <HAL_RCC_OscConfig+0x4f8>
 80026b6:	2300      	movs	r3, #0
 80026b8:	4618      	mov	r0, r3
 80026ba:	3718      	adds	r7, #24
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	40021000 	.word	0x40021000

080026c4 <HAL_RCC_ClockConfig>:
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d101      	bne.n	80026d8 <HAL_RCC_ClockConfig+0x14>
 80026d4:	2301      	movs	r3, #1
 80026d6:	e0d0      	b.n	800287a <HAL_RCC_ClockConfig+0x1b6>
 80026d8:	4b6a      	ldr	r3, [pc, #424]	; (8002884 <HAL_RCC_ClockConfig+0x1c0>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0307 	and.w	r3, r3, #7
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d910      	bls.n	8002708 <HAL_RCC_ClockConfig+0x44>
 80026e6:	4b67      	ldr	r3, [pc, #412]	; (8002884 <HAL_RCC_ClockConfig+0x1c0>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f023 0207 	bic.w	r2, r3, #7
 80026ee:	4965      	ldr	r1, [pc, #404]	; (8002884 <HAL_RCC_ClockConfig+0x1c0>)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	600b      	str	r3, [r1, #0]
 80026f6:	4b63      	ldr	r3, [pc, #396]	; (8002884 <HAL_RCC_ClockConfig+0x1c0>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	429a      	cmp	r2, r3
 8002702:	d001      	beq.n	8002708 <HAL_RCC_ClockConfig+0x44>
 8002704:	2301      	movs	r3, #1
 8002706:	e0b8      	b.n	800287a <HAL_RCC_ClockConfig+0x1b6>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d020      	beq.n	8002756 <HAL_RCC_ClockConfig+0x92>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	2b00      	cmp	r3, #0
 800271e:	d005      	beq.n	800272c <HAL_RCC_ClockConfig+0x68>
 8002720:	4b59      	ldr	r3, [pc, #356]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	4a58      	ldr	r2, [pc, #352]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 8002726:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800272a:	6053      	str	r3, [r2, #4]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0308 	and.w	r3, r3, #8
 8002734:	2b00      	cmp	r3, #0
 8002736:	d005      	beq.n	8002744 <HAL_RCC_ClockConfig+0x80>
 8002738:	4b53      	ldr	r3, [pc, #332]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	4a52      	ldr	r2, [pc, #328]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 800273e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002742:	6053      	str	r3, [r2, #4]
 8002744:	4b50      	ldr	r3, [pc, #320]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	494d      	ldr	r1, [pc, #308]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 8002752:	4313      	orrs	r3, r2
 8002754:	604b      	str	r3, [r1, #4]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d040      	beq.n	80027e4 <HAL_RCC_ClockConfig+0x120>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d107      	bne.n	800277a <HAL_RCC_ClockConfig+0xb6>
 800276a:	4b47      	ldr	r3, [pc, #284]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d115      	bne.n	80027a2 <HAL_RCC_ClockConfig+0xde>
 8002776:	2301      	movs	r3, #1
 8002778:	e07f      	b.n	800287a <HAL_RCC_ClockConfig+0x1b6>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b02      	cmp	r3, #2
 8002780:	d107      	bne.n	8002792 <HAL_RCC_ClockConfig+0xce>
 8002782:	4b41      	ldr	r3, [pc, #260]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d109      	bne.n	80027a2 <HAL_RCC_ClockConfig+0xde>
 800278e:	2301      	movs	r3, #1
 8002790:	e073      	b.n	800287a <HAL_RCC_ClockConfig+0x1b6>
 8002792:	4b3d      	ldr	r3, [pc, #244]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_RCC_ClockConfig+0xde>
 800279e:	2301      	movs	r3, #1
 80027a0:	e06b      	b.n	800287a <HAL_RCC_ClockConfig+0x1b6>
 80027a2:	4b39      	ldr	r3, [pc, #228]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f023 0203 	bic.w	r2, r3, #3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	4936      	ldr	r1, [pc, #216]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	604b      	str	r3, [r1, #4]
 80027b4:	f7fe fc28 	bl	8001008 <HAL_GetTick>
 80027b8:	60f8      	str	r0, [r7, #12]
 80027ba:	e00a      	b.n	80027d2 <HAL_RCC_ClockConfig+0x10e>
 80027bc:	f7fe fc24 	bl	8001008 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_ClockConfig+0x10e>
 80027ce:	2303      	movs	r3, #3
 80027d0:	e053      	b.n	800287a <HAL_RCC_ClockConfig+0x1b6>
 80027d2:	4b2d      	ldr	r3, [pc, #180]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f003 020c 	and.w	r2, r3, #12
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d1eb      	bne.n	80027bc <HAL_RCC_ClockConfig+0xf8>
 80027e4:	4b27      	ldr	r3, [pc, #156]	; (8002884 <HAL_RCC_ClockConfig+0x1c0>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0307 	and.w	r3, r3, #7
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d210      	bcs.n	8002814 <HAL_RCC_ClockConfig+0x150>
 80027f2:	4b24      	ldr	r3, [pc, #144]	; (8002884 <HAL_RCC_ClockConfig+0x1c0>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f023 0207 	bic.w	r2, r3, #7
 80027fa:	4922      	ldr	r1, [pc, #136]	; (8002884 <HAL_RCC_ClockConfig+0x1c0>)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	4313      	orrs	r3, r2
 8002800:	600b      	str	r3, [r1, #0]
 8002802:	4b20      	ldr	r3, [pc, #128]	; (8002884 <HAL_RCC_ClockConfig+0x1c0>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	683a      	ldr	r2, [r7, #0]
 800280c:	429a      	cmp	r2, r3
 800280e:	d001      	beq.n	8002814 <HAL_RCC_ClockConfig+0x150>
 8002810:	2301      	movs	r3, #1
 8002812:	e032      	b.n	800287a <HAL_RCC_ClockConfig+0x1b6>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0304 	and.w	r3, r3, #4
 800281c:	2b00      	cmp	r3, #0
 800281e:	d008      	beq.n	8002832 <HAL_RCC_ClockConfig+0x16e>
 8002820:	4b19      	ldr	r3, [pc, #100]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	4916      	ldr	r1, [pc, #88]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 800282e:	4313      	orrs	r3, r2
 8002830:	604b      	str	r3, [r1, #4]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0308 	and.w	r3, r3, #8
 800283a:	2b00      	cmp	r3, #0
 800283c:	d009      	beq.n	8002852 <HAL_RCC_ClockConfig+0x18e>
 800283e:	4b12      	ldr	r3, [pc, #72]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	490e      	ldr	r1, [pc, #56]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 800284e:	4313      	orrs	r3, r2
 8002850:	604b      	str	r3, [r1, #4]
 8002852:	f000 f821 	bl	8002898 <HAL_RCC_GetSysClockFreq>
 8002856:	4602      	mov	r2, r0
 8002858:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	091b      	lsrs	r3, r3, #4
 800285e:	f003 030f 	and.w	r3, r3, #15
 8002862:	490a      	ldr	r1, [pc, #40]	; (800288c <HAL_RCC_ClockConfig+0x1c8>)
 8002864:	5ccb      	ldrb	r3, [r1, r3]
 8002866:	fa22 f303 	lsr.w	r3, r2, r3
 800286a:	4a09      	ldr	r2, [pc, #36]	; (8002890 <HAL_RCC_ClockConfig+0x1cc>)
 800286c:	6013      	str	r3, [r2, #0]
 800286e:	4b09      	ldr	r3, [pc, #36]	; (8002894 <HAL_RCC_ClockConfig+0x1d0>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f7fe fb86 	bl	8000f84 <HAL_InitTick>
 8002878:	2300      	movs	r3, #0
 800287a:	4618      	mov	r0, r3
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40022000 	.word	0x40022000
 8002888:	40021000 	.word	0x40021000
 800288c:	08003aac 	.word	0x08003aac
 8002890:	20000018 	.word	0x20000018
 8002894:	2000001c 	.word	0x2000001c

08002898 <HAL_RCC_GetSysClockFreq>:
 8002898:	b480      	push	{r7}
 800289a:	b087      	sub	sp, #28
 800289c:	af00      	add	r7, sp, #0
 800289e:	2300      	movs	r3, #0
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	2300      	movs	r3, #0
 80028a4:	60bb      	str	r3, [r7, #8]
 80028a6:	2300      	movs	r3, #0
 80028a8:	617b      	str	r3, [r7, #20]
 80028aa:	2300      	movs	r3, #0
 80028ac:	607b      	str	r3, [r7, #4]
 80028ae:	2300      	movs	r3, #0
 80028b0:	613b      	str	r3, [r7, #16]
 80028b2:	4b1e      	ldr	r3, [pc, #120]	; (800292c <HAL_RCC_GetSysClockFreq+0x94>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f003 030c 	and.w	r3, r3, #12
 80028be:	2b04      	cmp	r3, #4
 80028c0:	d002      	beq.n	80028c8 <HAL_RCC_GetSysClockFreq+0x30>
 80028c2:	2b08      	cmp	r3, #8
 80028c4:	d003      	beq.n	80028ce <HAL_RCC_GetSysClockFreq+0x36>
 80028c6:	e027      	b.n	8002918 <HAL_RCC_GetSysClockFreq+0x80>
 80028c8:	4b19      	ldr	r3, [pc, #100]	; (8002930 <HAL_RCC_GetSysClockFreq+0x98>)
 80028ca:	613b      	str	r3, [r7, #16]
 80028cc:	e027      	b.n	800291e <HAL_RCC_GetSysClockFreq+0x86>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	0c9b      	lsrs	r3, r3, #18
 80028d2:	f003 030f 	and.w	r3, r3, #15
 80028d6:	4a17      	ldr	r2, [pc, #92]	; (8002934 <HAL_RCC_GetSysClockFreq+0x9c>)
 80028d8:	5cd3      	ldrb	r3, [r2, r3]
 80028da:	607b      	str	r3, [r7, #4]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d010      	beq.n	8002908 <HAL_RCC_GetSysClockFreq+0x70>
 80028e6:	4b11      	ldr	r3, [pc, #68]	; (800292c <HAL_RCC_GetSysClockFreq+0x94>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	0c5b      	lsrs	r3, r3, #17
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	4a11      	ldr	r2, [pc, #68]	; (8002938 <HAL_RCC_GetSysClockFreq+0xa0>)
 80028f2:	5cd3      	ldrb	r3, [r2, r3]
 80028f4:	60bb      	str	r3, [r7, #8]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a0d      	ldr	r2, [pc, #52]	; (8002930 <HAL_RCC_GetSysClockFreq+0x98>)
 80028fa:	fb03 f202 	mul.w	r2, r3, r2
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	fbb2 f3f3 	udiv	r3, r2, r3
 8002904:	617b      	str	r3, [r7, #20]
 8002906:	e004      	b.n	8002912 <HAL_RCC_GetSysClockFreq+0x7a>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a0c      	ldr	r2, [pc, #48]	; (800293c <HAL_RCC_GetSysClockFreq+0xa4>)
 800290c:	fb02 f303 	mul.w	r3, r2, r3
 8002910:	617b      	str	r3, [r7, #20]
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	613b      	str	r3, [r7, #16]
 8002916:	e002      	b.n	800291e <HAL_RCC_GetSysClockFreq+0x86>
 8002918:	4b05      	ldr	r3, [pc, #20]	; (8002930 <HAL_RCC_GetSysClockFreq+0x98>)
 800291a:	613b      	str	r3, [r7, #16]
 800291c:	bf00      	nop
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	4618      	mov	r0, r3
 8002922:	371c      	adds	r7, #28
 8002924:	46bd      	mov	sp, r7
 8002926:	bc80      	pop	{r7}
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	40021000 	.word	0x40021000
 8002930:	007a1200 	.word	0x007a1200
 8002934:	08003ac4 	.word	0x08003ac4
 8002938:	08003ad4 	.word	0x08003ad4
 800293c:	003d0900 	.word	0x003d0900

08002940 <RCC_Delay>:
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	4b0a      	ldr	r3, [pc, #40]	; (8002974 <RCC_Delay+0x34>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a0a      	ldr	r2, [pc, #40]	; (8002978 <RCC_Delay+0x38>)
 800294e:	fba2 2303 	umull	r2, r3, r2, r3
 8002952:	0a5b      	lsrs	r3, r3, #9
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	fb02 f303 	mul.w	r3, r2, r3
 800295a:	60fb      	str	r3, [r7, #12]
 800295c:	bf00      	nop
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	1e5a      	subs	r2, r3, #1
 8002962:	60fa      	str	r2, [r7, #12]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1f9      	bne.n	800295c <RCC_Delay+0x1c>
 8002968:	bf00      	nop
 800296a:	bf00      	nop
 800296c:	3714      	adds	r7, #20
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr
 8002974:	20000018 	.word	0x20000018
 8002978:	10624dd3 	.word	0x10624dd3

0800297c <LL_GPIO_SetPinMode>:
 800297c:	b490      	push	{r4, r7}
 800297e:	b088      	sub	sp, #32
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	461a      	mov	r2, r3
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	0e1b      	lsrs	r3, r3, #24
 8002990:	4413      	add	r3, r2
 8002992:	461c      	mov	r4, r3
 8002994:	6822      	ldr	r2, [r4, #0]
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	617b      	str	r3, [r7, #20]
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	fa93 f3a3 	rbit	r3, r3
 80029a0:	613b      	str	r3, [r7, #16]
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	fab3 f383 	clz	r3, r3
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	210f      	movs	r1, #15
 80029ae:	fa01 f303 	lsl.w	r3, r1, r3
 80029b2:	43db      	mvns	r3, r3
 80029b4:	401a      	ands	r2, r3
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	61fb      	str	r3, [r7, #28]
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	fa93 f3a3 	rbit	r3, r3
 80029c0:	61bb      	str	r3, [r7, #24]
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	fab3 f383 	clz	r3, r3
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	6879      	ldr	r1, [r7, #4]
 80029ce:	fa01 f303 	lsl.w	r3, r1, r3
 80029d2:	4313      	orrs	r3, r2
 80029d4:	6023      	str	r3, [r4, #0]
 80029d6:	bf00      	nop
 80029d8:	3720      	adds	r7, #32
 80029da:	46bd      	mov	sp, r7
 80029dc:	bc90      	pop	{r4, r7}
 80029de:	4770      	bx	lr

080029e0 <LL_GPIO_SetPinSpeed>:
 80029e0:	b490      	push	{r4, r7}
 80029e2:	b088      	sub	sp, #32
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	461a      	mov	r2, r3
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	0e1b      	lsrs	r3, r3, #24
 80029f4:	4413      	add	r3, r2
 80029f6:	461c      	mov	r4, r3
 80029f8:	6822      	ldr	r2, [r4, #0]
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	617b      	str	r3, [r7, #20]
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	fa93 f3a3 	rbit	r3, r3
 8002a04:	613b      	str	r3, [r7, #16]
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	fab3 f383 	clz	r3, r3
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	2103      	movs	r1, #3
 8002a12:	fa01 f303 	lsl.w	r3, r1, r3
 8002a16:	43db      	mvns	r3, r3
 8002a18:	401a      	ands	r2, r3
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	61fb      	str	r3, [r7, #28]
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	fa93 f3a3 	rbit	r3, r3
 8002a24:	61bb      	str	r3, [r7, #24]
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	fab3 f383 	clz	r3, r3
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	6879      	ldr	r1, [r7, #4]
 8002a32:	fa01 f303 	lsl.w	r3, r1, r3
 8002a36:	4313      	orrs	r3, r2
 8002a38:	6023      	str	r3, [r4, #0]
 8002a3a:	bf00      	nop
 8002a3c:	3720      	adds	r7, #32
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc90      	pop	{r4, r7}
 8002a42:	4770      	bx	lr

08002a44 <LL_GPIO_SetPinOutputType>:
 8002a44:	b490      	push	{r4, r7}
 8002a46:	b088      	sub	sp, #32
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	461a      	mov	r2, r3
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	0e1b      	lsrs	r3, r3, #24
 8002a58:	4413      	add	r3, r2
 8002a5a:	461c      	mov	r4, r3
 8002a5c:	6822      	ldr	r2, [r4, #0]
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	617b      	str	r3, [r7, #20]
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	fa93 f3a3 	rbit	r3, r3
 8002a68:	613b      	str	r3, [r7, #16]
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	fab3 f383 	clz	r3, r3
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	2104      	movs	r1, #4
 8002a76:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7a:	43db      	mvns	r3, r3
 8002a7c:	401a      	ands	r2, r3
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	61fb      	str	r3, [r7, #28]
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	fa93 f3a3 	rbit	r3, r3
 8002a88:	61bb      	str	r3, [r7, #24]
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	fab3 f383 	clz	r3, r3
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	6023      	str	r3, [r4, #0]
 8002a9e:	bf00      	nop
 8002aa0:	3720      	adds	r7, #32
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bc90      	pop	{r4, r7}
 8002aa6:	4770      	bx	lr

08002aa8 <LL_GPIO_SetPinPull>:
 8002aa8:	b480      	push	{r7}
 8002aaa:	b087      	sub	sp, #28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	68da      	ldr	r2, [r3, #12]
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	0a1b      	lsrs	r3, r3, #8
 8002abc:	43db      	mvns	r3, r3
 8002abe:	401a      	ands	r2, r3
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	0a1b      	lsrs	r3, r3, #8
 8002ac4:	617b      	str	r3, [r7, #20]
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	fa93 f3a3 	rbit	r3, r3
 8002acc:	613b      	str	r3, [r7, #16]
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	fab3 f383 	clz	r3, r3
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	408b      	lsls	r3, r1
 8002adc:	431a      	orrs	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	60da      	str	r2, [r3, #12]
 8002ae2:	bf00      	nop
 8002ae4:	371c      	adds	r7, #28
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bc80      	pop	{r7}
 8002aea:	4770      	bx	lr

08002aec <LL_GPIO_Init>:
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b088      	sub	sp, #32
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	021b      	lsls	r3, r3, #8
 8002afc:	0c1b      	lsrs	r3, r3, #16
 8002afe:	617b      	str	r3, [r7, #20]
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	613b      	str	r3, [r7, #16]
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	fa93 f3a3 	rbit	r3, r3
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	fab3 f383 	clz	r3, r3
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	61fb      	str	r3, [r7, #28]
 8002b16:	e044      	b.n	8002ba2 <LL_GPIO_Init+0xb6>
 8002b18:	2201      	movs	r2, #1
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	409a      	lsls	r2, r3
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	4013      	ands	r3, r2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d03a      	beq.n	8002b9c <LL_GPIO_Init+0xb0>
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	2b07      	cmp	r3, #7
 8002b2a:	d806      	bhi.n	8002b3a <LL_GPIO_Init+0x4e>
 8002b2c:	f240 1201 	movw	r2, #257	; 0x101
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	61bb      	str	r3, [r7, #24]
 8002b38:	e008      	b.n	8002b4c <LL_GPIO_Init+0x60>
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	3b08      	subs	r3, #8
 8002b3e:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8002b42:	fa02 f303 	lsl.w	r3, r2, r3
 8002b46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b4a:	61bb      	str	r3, [r7, #24]
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	2b08      	cmp	r3, #8
 8002b52:	d106      	bne.n	8002b62 <LL_GPIO_Init+0x76>
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	461a      	mov	r2, r3
 8002b5a:	69b9      	ldr	r1, [r7, #24]
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f7ff ffa3 	bl	8002aa8 <LL_GPIO_SetPinPull>
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	461a      	mov	r2, r3
 8002b68:	69b9      	ldr	r1, [r7, #24]
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f7ff ff06 	bl	800297c <LL_GPIO_SetPinMode>
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d003      	beq.n	8002b80 <LL_GPIO_Init+0x94>
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	2b09      	cmp	r3, #9
 8002b7e:	d10d      	bne.n	8002b9c <LL_GPIO_Init+0xb0>
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	461a      	mov	r2, r3
 8002b86:	69b9      	ldr	r1, [r7, #24]
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f7ff ff29 	bl	80029e0 <LL_GPIO_SetPinSpeed>
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	461a      	mov	r2, r3
 8002b94:	69b9      	ldr	r1, [r7, #24]
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7ff ff54 	bl	8002a44 <LL_GPIO_SetPinOutputType>
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	61fb      	str	r3, [r7, #28]
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1b4      	bne.n	8002b18 <LL_GPIO_Init+0x2c>
 8002bae:	2300      	movs	r3, #0
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3720      	adds	r7, #32
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <LL_RCC_GetSysClkSource>:
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	4b03      	ldr	r3, [pc, #12]	; (8002bcc <LL_RCC_GetSysClkSource+0x14>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f003 030c 	and.w	r3, r3, #12
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bc80      	pop	{r7}
 8002bca:	4770      	bx	lr
 8002bcc:	40021000 	.word	0x40021000

08002bd0 <LL_RCC_GetAHBPrescaler>:
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	4b03      	ldr	r3, [pc, #12]	; (8002be4 <LL_RCC_GetAHBPrescaler+0x14>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bdc:	4618      	mov	r0, r3
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bc80      	pop	{r7}
 8002be2:	4770      	bx	lr
 8002be4:	40021000 	.word	0x40021000

08002be8 <LL_RCC_GetAPB1Prescaler>:
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	4b03      	ldr	r3, [pc, #12]	; (8002bfc <LL_RCC_GetAPB1Prescaler+0x14>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr
 8002bfc:	40021000 	.word	0x40021000

08002c00 <LL_RCC_GetAPB2Prescaler>:
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	4b03      	ldr	r3, [pc, #12]	; (8002c14 <LL_RCC_GetAPB2Prescaler+0x14>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr
 8002c14:	40021000 	.word	0x40021000

08002c18 <LL_RCC_PLL_GetMainSource>:
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	4b03      	ldr	r3, [pc, #12]	; (8002c2c <LL_RCC_PLL_GetMainSource+0x14>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c24:	4618      	mov	r0, r3
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bc80      	pop	{r7}
 8002c2a:	4770      	bx	lr
 8002c2c:	40021000 	.word	0x40021000

08002c30 <LL_RCC_PLL_GetMultiplicator>:
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	4b03      	ldr	r3, [pc, #12]	; (8002c44 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc80      	pop	{r7}
 8002c42:	4770      	bx	lr
 8002c44:	40021000 	.word	0x40021000

08002c48 <LL_RCC_PLL_GetPrediv>:
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	4b04      	ldr	r3, [pc, #16]	; (8002c60 <LL_RCC_PLL_GetPrediv+0x18>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	0c5b      	lsrs	r3, r3, #17
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	4618      	mov	r0, r3
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bc80      	pop	{r7}
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	40021000 	.word	0x40021000

08002c64 <LL_RCC_GetSystemClocksFreq>:
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	f000 f820 	bl	8002cb0 <RCC_GetSystemClockFreq>
 8002c70:	4602      	mov	r2, r0
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f000 f83e 	bl	8002cfc <RCC_GetHCLKClockFreq>
 8002c80:	4602      	mov	r2, r0
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	605a      	str	r2, [r3, #4]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f000 f84c 	bl	8002d28 <RCC_GetPCLK1ClockFreq>
 8002c90:	4602      	mov	r2, r0
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	609a      	str	r2, [r3, #8]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 f858 	bl	8002d50 <RCC_GetPCLK2ClockFreq>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	60da      	str	r2, [r3, #12]
 8002ca6:	bf00      	nop
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
	...

08002cb0 <RCC_GetSystemClockFreq>:
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	607b      	str	r3, [r7, #4]
 8002cba:	f7ff ff7d 	bl	8002bb8 <LL_RCC_GetSysClkSource>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b08      	cmp	r3, #8
 8002cc2:	d00c      	beq.n	8002cde <RCC_GetSystemClockFreq+0x2e>
 8002cc4:	2b08      	cmp	r3, #8
 8002cc6:	d80e      	bhi.n	8002ce6 <RCC_GetSystemClockFreq+0x36>
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d002      	beq.n	8002cd2 <RCC_GetSystemClockFreq+0x22>
 8002ccc:	2b04      	cmp	r3, #4
 8002cce:	d003      	beq.n	8002cd8 <RCC_GetSystemClockFreq+0x28>
 8002cd0:	e009      	b.n	8002ce6 <RCC_GetSystemClockFreq+0x36>
 8002cd2:	4b09      	ldr	r3, [pc, #36]	; (8002cf8 <RCC_GetSystemClockFreq+0x48>)
 8002cd4:	607b      	str	r3, [r7, #4]
 8002cd6:	e009      	b.n	8002cec <RCC_GetSystemClockFreq+0x3c>
 8002cd8:	4b07      	ldr	r3, [pc, #28]	; (8002cf8 <RCC_GetSystemClockFreq+0x48>)
 8002cda:	607b      	str	r3, [r7, #4]
 8002cdc:	e006      	b.n	8002cec <RCC_GetSystemClockFreq+0x3c>
 8002cde:	f000 f84b 	bl	8002d78 <RCC_PLL_GetFreqDomain_SYS>
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	e002      	b.n	8002cec <RCC_GetSystemClockFreq+0x3c>
 8002ce6:	4b04      	ldr	r3, [pc, #16]	; (8002cf8 <RCC_GetSystemClockFreq+0x48>)
 8002ce8:	607b      	str	r3, [r7, #4]
 8002cea:	bf00      	nop
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	007a1200 	.word	0x007a1200

08002cfc <RCC_GetHCLKClockFreq>:
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	f7ff ff64 	bl	8002bd0 <LL_RCC_GetAHBPrescaler>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	091b      	lsrs	r3, r3, #4
 8002d0c:	f003 030f 	and.w	r3, r3, #15
 8002d10:	4a04      	ldr	r2, [pc, #16]	; (8002d24 <RCC_GetHCLKClockFreq+0x28>)
 8002d12:	5cd3      	ldrb	r3, [r2, r3]
 8002d14:	461a      	mov	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	40d3      	lsrs	r3, r2
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	08003aac 	.word	0x08003aac

08002d28 <RCC_GetPCLK1ClockFreq>:
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	f7ff ff5a 	bl	8002be8 <LL_RCC_GetAPB1Prescaler>
 8002d34:	4603      	mov	r3, r0
 8002d36:	0a1b      	lsrs	r3, r3, #8
 8002d38:	4a04      	ldr	r2, [pc, #16]	; (8002d4c <RCC_GetPCLK1ClockFreq+0x24>)
 8002d3a:	5cd3      	ldrb	r3, [r2, r3]
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	40d3      	lsrs	r3, r2
 8002d42:	4618      	mov	r0, r3
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	08003abc 	.word	0x08003abc

08002d50 <RCC_GetPCLK2ClockFreq>:
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	f7ff ff52 	bl	8002c00 <LL_RCC_GetAPB2Prescaler>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	0adb      	lsrs	r3, r3, #11
 8002d60:	4a04      	ldr	r2, [pc, #16]	; (8002d74 <RCC_GetPCLK2ClockFreq+0x24>)
 8002d62:	5cd3      	ldrb	r3, [r2, r3]
 8002d64:	461a      	mov	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	40d3      	lsrs	r3, r2
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	08003abc 	.word	0x08003abc

08002d78 <RCC_PLL_GetFreqDomain_SYS>:
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	2300      	movs	r3, #0
 8002d80:	607b      	str	r3, [r7, #4]
 8002d82:	2300      	movs	r3, #0
 8002d84:	603b      	str	r3, [r7, #0]
 8002d86:	f7ff ff47 	bl	8002c18 <LL_RCC_PLL_GetMainSource>
 8002d8a:	6038      	str	r0, [r7, #0]
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d004      	beq.n	8002d9c <RCC_PLL_GetFreqDomain_SYS+0x24>
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d98:	d003      	beq.n	8002da2 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8002d9a:	e00b      	b.n	8002db4 <RCC_PLL_GetFreqDomain_SYS+0x3c>
 8002d9c:	4b0d      	ldr	r3, [pc, #52]	; (8002dd4 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8002d9e:	607b      	str	r3, [r7, #4]
 8002da0:	e00b      	b.n	8002dba <RCC_PLL_GetFreqDomain_SYS+0x42>
 8002da2:	f7ff ff51 	bl	8002c48 <LL_RCC_PLL_GetPrediv>
 8002da6:	4603      	mov	r3, r0
 8002da8:	3301      	adds	r3, #1
 8002daa:	4a0b      	ldr	r2, [pc, #44]	; (8002dd8 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8002dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db0:	607b      	str	r3, [r7, #4]
 8002db2:	e002      	b.n	8002dba <RCC_PLL_GetFreqDomain_SYS+0x42>
 8002db4:	4b07      	ldr	r3, [pc, #28]	; (8002dd4 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8002db6:	607b      	str	r3, [r7, #4]
 8002db8:	bf00      	nop
 8002dba:	f7ff ff39 	bl	8002c30 <LL_RCC_PLL_GetMultiplicator>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	0c9b      	lsrs	r3, r3, #18
 8002dc2:	3302      	adds	r3, #2
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	fb02 f303 	mul.w	r3, r2, r3
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	003d0900 	.word	0x003d0900
 8002dd8:	007a1200 	.word	0x007a1200

08002ddc <LL_USART_IsEnabled>:
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002df0:	bf0c      	ite	eq
 8002df2:	2301      	moveq	r3, #1
 8002df4:	2300      	movne	r3, #0
 8002df6:	b2db      	uxtb	r3, r3
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bc80      	pop	{r7}
 8002e00:	4770      	bx	lr

08002e02 <LL_USART_SetStopBitsLength>:
{
 8002e02:	b480      	push	{r7}
 8002e04:	b083      	sub	sp, #12
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
 8002e0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	431a      	orrs	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	611a      	str	r2, [r3, #16]
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bc80      	pop	{r7}
 8002e24:	4770      	bx	lr

08002e26 <LL_USART_SetHWFlowCtrl>:
{
 8002e26:	b480      	push	{r7}
 8002e28:	b083      	sub	sp, #12
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
 8002e2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	695b      	ldr	r3, [r3, #20]
 8002e34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	615a      	str	r2, [r3, #20]
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bc80      	pop	{r7}
 8002e48:	4770      	bx	lr
	...

08002e4c <LL_USART_SetBaudRate>:
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002e58:	68ba      	ldr	r2, [r7, #8]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	4413      	add	r3, r2
 8002e60:	009a      	lsls	r2, r3, #2
 8002e62:	441a      	add	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e6c:	4a25      	ldr	r2, [pc, #148]	; (8002f04 <LL_USART_SetBaudRate+0xb8>)
 8002e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e72:	095b      	lsrs	r3, r3, #5
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	011b      	lsls	r3, r3, #4
 8002e78:	b299      	uxth	r1, r3
 8002e7a:	68ba      	ldr	r2, [r7, #8]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4413      	add	r3, r2
 8002e82:	009a      	lsls	r2, r3, #2
 8002e84:	441a      	add	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e8e:	4b1d      	ldr	r3, [pc, #116]	; (8002f04 <LL_USART_SetBaudRate+0xb8>)
 8002e90:	fba3 0302 	umull	r0, r3, r3, r2
 8002e94:	095b      	lsrs	r3, r3, #5
 8002e96:	2064      	movs	r0, #100	; 0x64
 8002e98:	fb00 f303 	mul.w	r3, r0, r3
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	011b      	lsls	r3, r3, #4
 8002ea0:	3332      	adds	r3, #50	; 0x32
 8002ea2:	4a18      	ldr	r2, [pc, #96]	; (8002f04 <LL_USART_SetBaudRate+0xb8>)
 8002ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea8:	095b      	lsrs	r3, r3, #5
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	440b      	add	r3, r1
 8002eb4:	b299      	uxth	r1, r3
 8002eb6:	68ba      	ldr	r2, [r7, #8]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4413      	add	r3, r2
 8002ebe:	009a      	lsls	r2, r3, #2
 8002ec0:	441a      	add	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	fbb2 f2f3 	udiv	r2, r2, r3
 8002eca:	4b0e      	ldr	r3, [pc, #56]	; (8002f04 <LL_USART_SetBaudRate+0xb8>)
 8002ecc:	fba3 0302 	umull	r0, r3, r3, r2
 8002ed0:	095b      	lsrs	r3, r3, #5
 8002ed2:	2064      	movs	r0, #100	; 0x64
 8002ed4:	fb00 f303 	mul.w	r3, r0, r3
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	011b      	lsls	r3, r3, #4
 8002edc:	3332      	adds	r3, #50	; 0x32
 8002ede:	4a09      	ldr	r2, [pc, #36]	; (8002f04 <LL_USART_SetBaudRate+0xb8>)
 8002ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee4:	095b      	lsrs	r3, r3, #5
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	f003 030f 	and.w	r3, r3, #15
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	440b      	add	r3, r1
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	609a      	str	r2, [r3, #8]
}
 8002ef8:	bf00      	nop
 8002efa:	3714      	adds	r7, #20
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bc80      	pop	{r7}
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	51eb851f 	.word	0x51eb851f

08002f08 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx,const LL_USART_InitTypeDef *USART_InitStruct)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b088      	sub	sp, #32
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002f16:	2300      	movs	r3, #0
 8002f18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7ff ff5e 	bl	8002ddc <LL_USART_IsEnabled>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d145      	bne.n	8002fb2 <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002f2e:	f023 030c 	bic.w	r3, r3, #12
 8002f32:	683a      	ldr	r2, [r7, #0]
 8002f34:	6851      	ldr	r1, [r2, #4]
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	68d2      	ldr	r2, [r2, #12]
 8002f3a:	4311      	orrs	r1, r2
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	6912      	ldr	r2, [r2, #16]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7ff ff57 	bl	8002e02 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	4619      	mov	r1, r3
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7ff ff63 	bl	8002e26 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002f60:	f107 0308 	add.w	r3, r7, #8
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7ff fe7d 	bl	8002c64 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a13      	ldr	r2, [pc, #76]	; (8002fbc <LL_USART_Init+0xb4>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d102      	bne.n	8002f78 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	61bb      	str	r3, [r7, #24]
 8002f76:	e00c      	b.n	8002f92 <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a11      	ldr	r2, [pc, #68]	; (8002fc0 <LL_USART_Init+0xb8>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d102      	bne.n	8002f86 <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	61bb      	str	r3, [r7, #24]
 8002f84:	e005      	b.n	8002f92 <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a0e      	ldr	r2, [pc, #56]	; (8002fc4 <LL_USART_Init+0xbc>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d101      	bne.n	8002f92 <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00c      	beq.n	8002fb2 <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d008      	beq.n	8002fb2 <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	461a      	mov	r2, r3
 8002faa:	69b9      	ldr	r1, [r7, #24]
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f7ff ff4d 	bl	8002e4c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002fb2:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3720      	adds	r7, #32
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40013800 	.word	0x40013800
 8002fc0:	40004400 	.word	0x40004400
 8002fc4:	40004800 	.word	0x40004800

08002fc8 <__errno>:
 8002fc8:	4b01      	ldr	r3, [pc, #4]	; (8002fd0 <__errno+0x8>)
 8002fca:	6818      	ldr	r0, [r3, #0]
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	20000024 	.word	0x20000024

08002fd4 <__libc_init_array>:
 8002fd4:	b570      	push	{r4, r5, r6, lr}
 8002fd6:	2600      	movs	r6, #0
 8002fd8:	4d0c      	ldr	r5, [pc, #48]	; (800300c <__libc_init_array+0x38>)
 8002fda:	4c0d      	ldr	r4, [pc, #52]	; (8003010 <__libc_init_array+0x3c>)
 8002fdc:	1b64      	subs	r4, r4, r5
 8002fde:	10a4      	asrs	r4, r4, #2
 8002fe0:	42a6      	cmp	r6, r4
 8002fe2:	d109      	bne.n	8002ff8 <__libc_init_array+0x24>
 8002fe4:	f000 fd26 	bl	8003a34 <_init>
 8002fe8:	2600      	movs	r6, #0
 8002fea:	4d0a      	ldr	r5, [pc, #40]	; (8003014 <__libc_init_array+0x40>)
 8002fec:	4c0a      	ldr	r4, [pc, #40]	; (8003018 <__libc_init_array+0x44>)
 8002fee:	1b64      	subs	r4, r4, r5
 8002ff0:	10a4      	asrs	r4, r4, #2
 8002ff2:	42a6      	cmp	r6, r4
 8002ff4:	d105      	bne.n	8003002 <__libc_init_array+0x2e>
 8002ff6:	bd70      	pop	{r4, r5, r6, pc}
 8002ff8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ffc:	4798      	blx	r3
 8002ffe:	3601      	adds	r6, #1
 8003000:	e7ee      	b.n	8002fe0 <__libc_init_array+0xc>
 8003002:	f855 3b04 	ldr.w	r3, [r5], #4
 8003006:	4798      	blx	r3
 8003008:	3601      	adds	r6, #1
 800300a:	e7f2      	b.n	8002ff2 <__libc_init_array+0x1e>
 800300c:	08003b3c 	.word	0x08003b3c
 8003010:	08003b3c 	.word	0x08003b3c
 8003014:	08003b3c 	.word	0x08003b3c
 8003018:	08003b40 	.word	0x08003b40

0800301c <memset>:
 800301c:	4603      	mov	r3, r0
 800301e:	4402      	add	r2, r0
 8003020:	4293      	cmp	r3, r2
 8003022:	d100      	bne.n	8003026 <memset+0xa>
 8003024:	4770      	bx	lr
 8003026:	f803 1b01 	strb.w	r1, [r3], #1
 800302a:	e7f9      	b.n	8003020 <memset+0x4>

0800302c <_puts_r>:
 800302c:	b570      	push	{r4, r5, r6, lr}
 800302e:	460e      	mov	r6, r1
 8003030:	4605      	mov	r5, r0
 8003032:	b118      	cbz	r0, 800303c <_puts_r+0x10>
 8003034:	6983      	ldr	r3, [r0, #24]
 8003036:	b90b      	cbnz	r3, 800303c <_puts_r+0x10>
 8003038:	f000 fa52 	bl	80034e0 <__sinit>
 800303c:	69ab      	ldr	r3, [r5, #24]
 800303e:	68ac      	ldr	r4, [r5, #8]
 8003040:	b913      	cbnz	r3, 8003048 <_puts_r+0x1c>
 8003042:	4628      	mov	r0, r5
 8003044:	f000 fa4c 	bl	80034e0 <__sinit>
 8003048:	4b2c      	ldr	r3, [pc, #176]	; (80030fc <_puts_r+0xd0>)
 800304a:	429c      	cmp	r4, r3
 800304c:	d120      	bne.n	8003090 <_puts_r+0x64>
 800304e:	686c      	ldr	r4, [r5, #4]
 8003050:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003052:	07db      	lsls	r3, r3, #31
 8003054:	d405      	bmi.n	8003062 <_puts_r+0x36>
 8003056:	89a3      	ldrh	r3, [r4, #12]
 8003058:	0598      	lsls	r0, r3, #22
 800305a:	d402      	bmi.n	8003062 <_puts_r+0x36>
 800305c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800305e:	f000 fadd 	bl	800361c <__retarget_lock_acquire_recursive>
 8003062:	89a3      	ldrh	r3, [r4, #12]
 8003064:	0719      	lsls	r1, r3, #28
 8003066:	d51d      	bpl.n	80030a4 <_puts_r+0x78>
 8003068:	6923      	ldr	r3, [r4, #16]
 800306a:	b1db      	cbz	r3, 80030a4 <_puts_r+0x78>
 800306c:	3e01      	subs	r6, #1
 800306e:	68a3      	ldr	r3, [r4, #8]
 8003070:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003074:	3b01      	subs	r3, #1
 8003076:	60a3      	str	r3, [r4, #8]
 8003078:	bb39      	cbnz	r1, 80030ca <_puts_r+0x9e>
 800307a:	2b00      	cmp	r3, #0
 800307c:	da38      	bge.n	80030f0 <_puts_r+0xc4>
 800307e:	4622      	mov	r2, r4
 8003080:	210a      	movs	r1, #10
 8003082:	4628      	mov	r0, r5
 8003084:	f000 f856 	bl	8003134 <__swbuf_r>
 8003088:	3001      	adds	r0, #1
 800308a:	d011      	beq.n	80030b0 <_puts_r+0x84>
 800308c:	250a      	movs	r5, #10
 800308e:	e011      	b.n	80030b4 <_puts_r+0x88>
 8003090:	4b1b      	ldr	r3, [pc, #108]	; (8003100 <_puts_r+0xd4>)
 8003092:	429c      	cmp	r4, r3
 8003094:	d101      	bne.n	800309a <_puts_r+0x6e>
 8003096:	68ac      	ldr	r4, [r5, #8]
 8003098:	e7da      	b.n	8003050 <_puts_r+0x24>
 800309a:	4b1a      	ldr	r3, [pc, #104]	; (8003104 <_puts_r+0xd8>)
 800309c:	429c      	cmp	r4, r3
 800309e:	bf08      	it	eq
 80030a0:	68ec      	ldreq	r4, [r5, #12]
 80030a2:	e7d5      	b.n	8003050 <_puts_r+0x24>
 80030a4:	4621      	mov	r1, r4
 80030a6:	4628      	mov	r0, r5
 80030a8:	f000 f896 	bl	80031d8 <__swsetup_r>
 80030ac:	2800      	cmp	r0, #0
 80030ae:	d0dd      	beq.n	800306c <_puts_r+0x40>
 80030b0:	f04f 35ff 	mov.w	r5, #4294967295
 80030b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80030b6:	07da      	lsls	r2, r3, #31
 80030b8:	d405      	bmi.n	80030c6 <_puts_r+0x9a>
 80030ba:	89a3      	ldrh	r3, [r4, #12]
 80030bc:	059b      	lsls	r3, r3, #22
 80030be:	d402      	bmi.n	80030c6 <_puts_r+0x9a>
 80030c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030c2:	f000 faac 	bl	800361e <__retarget_lock_release_recursive>
 80030c6:	4628      	mov	r0, r5
 80030c8:	bd70      	pop	{r4, r5, r6, pc}
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	da04      	bge.n	80030d8 <_puts_r+0xac>
 80030ce:	69a2      	ldr	r2, [r4, #24]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	dc06      	bgt.n	80030e2 <_puts_r+0xb6>
 80030d4:	290a      	cmp	r1, #10
 80030d6:	d004      	beq.n	80030e2 <_puts_r+0xb6>
 80030d8:	6823      	ldr	r3, [r4, #0]
 80030da:	1c5a      	adds	r2, r3, #1
 80030dc:	6022      	str	r2, [r4, #0]
 80030de:	7019      	strb	r1, [r3, #0]
 80030e0:	e7c5      	b.n	800306e <_puts_r+0x42>
 80030e2:	4622      	mov	r2, r4
 80030e4:	4628      	mov	r0, r5
 80030e6:	f000 f825 	bl	8003134 <__swbuf_r>
 80030ea:	3001      	adds	r0, #1
 80030ec:	d1bf      	bne.n	800306e <_puts_r+0x42>
 80030ee:	e7df      	b.n	80030b0 <_puts_r+0x84>
 80030f0:	250a      	movs	r5, #10
 80030f2:	6823      	ldr	r3, [r4, #0]
 80030f4:	1c5a      	adds	r2, r3, #1
 80030f6:	6022      	str	r2, [r4, #0]
 80030f8:	701d      	strb	r5, [r3, #0]
 80030fa:	e7db      	b.n	80030b4 <_puts_r+0x88>
 80030fc:	08003afc 	.word	0x08003afc
 8003100:	08003b1c 	.word	0x08003b1c
 8003104:	08003adc 	.word	0x08003adc

08003108 <puts>:
 8003108:	4b02      	ldr	r3, [pc, #8]	; (8003114 <puts+0xc>)
 800310a:	4601      	mov	r1, r0
 800310c:	6818      	ldr	r0, [r3, #0]
 800310e:	f7ff bf8d 	b.w	800302c <_puts_r>
 8003112:	bf00      	nop
 8003114:	20000024 	.word	0x20000024

08003118 <strchr>:
 8003118:	4603      	mov	r3, r0
 800311a:	b2c9      	uxtb	r1, r1
 800311c:	4618      	mov	r0, r3
 800311e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003122:	b112      	cbz	r2, 800312a <strchr+0x12>
 8003124:	428a      	cmp	r2, r1
 8003126:	d1f9      	bne.n	800311c <strchr+0x4>
 8003128:	4770      	bx	lr
 800312a:	2900      	cmp	r1, #0
 800312c:	bf18      	it	ne
 800312e:	2000      	movne	r0, #0
 8003130:	4770      	bx	lr
	...

08003134 <__swbuf_r>:
 8003134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003136:	460e      	mov	r6, r1
 8003138:	4614      	mov	r4, r2
 800313a:	4605      	mov	r5, r0
 800313c:	b118      	cbz	r0, 8003146 <__swbuf_r+0x12>
 800313e:	6983      	ldr	r3, [r0, #24]
 8003140:	b90b      	cbnz	r3, 8003146 <__swbuf_r+0x12>
 8003142:	f000 f9cd 	bl	80034e0 <__sinit>
 8003146:	4b21      	ldr	r3, [pc, #132]	; (80031cc <__swbuf_r+0x98>)
 8003148:	429c      	cmp	r4, r3
 800314a:	d12b      	bne.n	80031a4 <__swbuf_r+0x70>
 800314c:	686c      	ldr	r4, [r5, #4]
 800314e:	69a3      	ldr	r3, [r4, #24]
 8003150:	60a3      	str	r3, [r4, #8]
 8003152:	89a3      	ldrh	r3, [r4, #12]
 8003154:	071a      	lsls	r2, r3, #28
 8003156:	d52f      	bpl.n	80031b8 <__swbuf_r+0x84>
 8003158:	6923      	ldr	r3, [r4, #16]
 800315a:	b36b      	cbz	r3, 80031b8 <__swbuf_r+0x84>
 800315c:	6923      	ldr	r3, [r4, #16]
 800315e:	6820      	ldr	r0, [r4, #0]
 8003160:	b2f6      	uxtb	r6, r6
 8003162:	1ac0      	subs	r0, r0, r3
 8003164:	6963      	ldr	r3, [r4, #20]
 8003166:	4637      	mov	r7, r6
 8003168:	4283      	cmp	r3, r0
 800316a:	dc04      	bgt.n	8003176 <__swbuf_r+0x42>
 800316c:	4621      	mov	r1, r4
 800316e:	4628      	mov	r0, r5
 8003170:	f000 f922 	bl	80033b8 <_fflush_r>
 8003174:	bb30      	cbnz	r0, 80031c4 <__swbuf_r+0x90>
 8003176:	68a3      	ldr	r3, [r4, #8]
 8003178:	3001      	adds	r0, #1
 800317a:	3b01      	subs	r3, #1
 800317c:	60a3      	str	r3, [r4, #8]
 800317e:	6823      	ldr	r3, [r4, #0]
 8003180:	1c5a      	adds	r2, r3, #1
 8003182:	6022      	str	r2, [r4, #0]
 8003184:	701e      	strb	r6, [r3, #0]
 8003186:	6963      	ldr	r3, [r4, #20]
 8003188:	4283      	cmp	r3, r0
 800318a:	d004      	beq.n	8003196 <__swbuf_r+0x62>
 800318c:	89a3      	ldrh	r3, [r4, #12]
 800318e:	07db      	lsls	r3, r3, #31
 8003190:	d506      	bpl.n	80031a0 <__swbuf_r+0x6c>
 8003192:	2e0a      	cmp	r6, #10
 8003194:	d104      	bne.n	80031a0 <__swbuf_r+0x6c>
 8003196:	4621      	mov	r1, r4
 8003198:	4628      	mov	r0, r5
 800319a:	f000 f90d 	bl	80033b8 <_fflush_r>
 800319e:	b988      	cbnz	r0, 80031c4 <__swbuf_r+0x90>
 80031a0:	4638      	mov	r0, r7
 80031a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031a4:	4b0a      	ldr	r3, [pc, #40]	; (80031d0 <__swbuf_r+0x9c>)
 80031a6:	429c      	cmp	r4, r3
 80031a8:	d101      	bne.n	80031ae <__swbuf_r+0x7a>
 80031aa:	68ac      	ldr	r4, [r5, #8]
 80031ac:	e7cf      	b.n	800314e <__swbuf_r+0x1a>
 80031ae:	4b09      	ldr	r3, [pc, #36]	; (80031d4 <__swbuf_r+0xa0>)
 80031b0:	429c      	cmp	r4, r3
 80031b2:	bf08      	it	eq
 80031b4:	68ec      	ldreq	r4, [r5, #12]
 80031b6:	e7ca      	b.n	800314e <__swbuf_r+0x1a>
 80031b8:	4621      	mov	r1, r4
 80031ba:	4628      	mov	r0, r5
 80031bc:	f000 f80c 	bl	80031d8 <__swsetup_r>
 80031c0:	2800      	cmp	r0, #0
 80031c2:	d0cb      	beq.n	800315c <__swbuf_r+0x28>
 80031c4:	f04f 37ff 	mov.w	r7, #4294967295
 80031c8:	e7ea      	b.n	80031a0 <__swbuf_r+0x6c>
 80031ca:	bf00      	nop
 80031cc:	08003afc 	.word	0x08003afc
 80031d0:	08003b1c 	.word	0x08003b1c
 80031d4:	08003adc 	.word	0x08003adc

080031d8 <__swsetup_r>:
 80031d8:	4b32      	ldr	r3, [pc, #200]	; (80032a4 <__swsetup_r+0xcc>)
 80031da:	b570      	push	{r4, r5, r6, lr}
 80031dc:	681d      	ldr	r5, [r3, #0]
 80031de:	4606      	mov	r6, r0
 80031e0:	460c      	mov	r4, r1
 80031e2:	b125      	cbz	r5, 80031ee <__swsetup_r+0x16>
 80031e4:	69ab      	ldr	r3, [r5, #24]
 80031e6:	b913      	cbnz	r3, 80031ee <__swsetup_r+0x16>
 80031e8:	4628      	mov	r0, r5
 80031ea:	f000 f979 	bl	80034e0 <__sinit>
 80031ee:	4b2e      	ldr	r3, [pc, #184]	; (80032a8 <__swsetup_r+0xd0>)
 80031f0:	429c      	cmp	r4, r3
 80031f2:	d10f      	bne.n	8003214 <__swsetup_r+0x3c>
 80031f4:	686c      	ldr	r4, [r5, #4]
 80031f6:	89a3      	ldrh	r3, [r4, #12]
 80031f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80031fc:	0719      	lsls	r1, r3, #28
 80031fe:	d42c      	bmi.n	800325a <__swsetup_r+0x82>
 8003200:	06dd      	lsls	r5, r3, #27
 8003202:	d411      	bmi.n	8003228 <__swsetup_r+0x50>
 8003204:	2309      	movs	r3, #9
 8003206:	6033      	str	r3, [r6, #0]
 8003208:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800320c:	f04f 30ff 	mov.w	r0, #4294967295
 8003210:	81a3      	strh	r3, [r4, #12]
 8003212:	e03e      	b.n	8003292 <__swsetup_r+0xba>
 8003214:	4b25      	ldr	r3, [pc, #148]	; (80032ac <__swsetup_r+0xd4>)
 8003216:	429c      	cmp	r4, r3
 8003218:	d101      	bne.n	800321e <__swsetup_r+0x46>
 800321a:	68ac      	ldr	r4, [r5, #8]
 800321c:	e7eb      	b.n	80031f6 <__swsetup_r+0x1e>
 800321e:	4b24      	ldr	r3, [pc, #144]	; (80032b0 <__swsetup_r+0xd8>)
 8003220:	429c      	cmp	r4, r3
 8003222:	bf08      	it	eq
 8003224:	68ec      	ldreq	r4, [r5, #12]
 8003226:	e7e6      	b.n	80031f6 <__swsetup_r+0x1e>
 8003228:	0758      	lsls	r0, r3, #29
 800322a:	d512      	bpl.n	8003252 <__swsetup_r+0x7a>
 800322c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800322e:	b141      	cbz	r1, 8003242 <__swsetup_r+0x6a>
 8003230:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003234:	4299      	cmp	r1, r3
 8003236:	d002      	beq.n	800323e <__swsetup_r+0x66>
 8003238:	4630      	mov	r0, r6
 800323a:	f000 fa57 	bl	80036ec <_free_r>
 800323e:	2300      	movs	r3, #0
 8003240:	6363      	str	r3, [r4, #52]	; 0x34
 8003242:	89a3      	ldrh	r3, [r4, #12]
 8003244:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003248:	81a3      	strh	r3, [r4, #12]
 800324a:	2300      	movs	r3, #0
 800324c:	6063      	str	r3, [r4, #4]
 800324e:	6923      	ldr	r3, [r4, #16]
 8003250:	6023      	str	r3, [r4, #0]
 8003252:	89a3      	ldrh	r3, [r4, #12]
 8003254:	f043 0308 	orr.w	r3, r3, #8
 8003258:	81a3      	strh	r3, [r4, #12]
 800325a:	6923      	ldr	r3, [r4, #16]
 800325c:	b94b      	cbnz	r3, 8003272 <__swsetup_r+0x9a>
 800325e:	89a3      	ldrh	r3, [r4, #12]
 8003260:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003268:	d003      	beq.n	8003272 <__swsetup_r+0x9a>
 800326a:	4621      	mov	r1, r4
 800326c:	4630      	mov	r0, r6
 800326e:	f000 f9fd 	bl	800366c <__smakebuf_r>
 8003272:	89a0      	ldrh	r0, [r4, #12]
 8003274:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003278:	f010 0301 	ands.w	r3, r0, #1
 800327c:	d00a      	beq.n	8003294 <__swsetup_r+0xbc>
 800327e:	2300      	movs	r3, #0
 8003280:	60a3      	str	r3, [r4, #8]
 8003282:	6963      	ldr	r3, [r4, #20]
 8003284:	425b      	negs	r3, r3
 8003286:	61a3      	str	r3, [r4, #24]
 8003288:	6923      	ldr	r3, [r4, #16]
 800328a:	b943      	cbnz	r3, 800329e <__swsetup_r+0xc6>
 800328c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003290:	d1ba      	bne.n	8003208 <__swsetup_r+0x30>
 8003292:	bd70      	pop	{r4, r5, r6, pc}
 8003294:	0781      	lsls	r1, r0, #30
 8003296:	bf58      	it	pl
 8003298:	6963      	ldrpl	r3, [r4, #20]
 800329a:	60a3      	str	r3, [r4, #8]
 800329c:	e7f4      	b.n	8003288 <__swsetup_r+0xb0>
 800329e:	2000      	movs	r0, #0
 80032a0:	e7f7      	b.n	8003292 <__swsetup_r+0xba>
 80032a2:	bf00      	nop
 80032a4:	20000024 	.word	0x20000024
 80032a8:	08003afc 	.word	0x08003afc
 80032ac:	08003b1c 	.word	0x08003b1c
 80032b0:	08003adc 	.word	0x08003adc

080032b4 <__sflush_r>:
 80032b4:	898a      	ldrh	r2, [r1, #12]
 80032b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032b8:	4605      	mov	r5, r0
 80032ba:	0710      	lsls	r0, r2, #28
 80032bc:	460c      	mov	r4, r1
 80032be:	d457      	bmi.n	8003370 <__sflush_r+0xbc>
 80032c0:	684b      	ldr	r3, [r1, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	dc04      	bgt.n	80032d0 <__sflush_r+0x1c>
 80032c6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	dc01      	bgt.n	80032d0 <__sflush_r+0x1c>
 80032cc:	2000      	movs	r0, #0
 80032ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80032d2:	2e00      	cmp	r6, #0
 80032d4:	d0fa      	beq.n	80032cc <__sflush_r+0x18>
 80032d6:	2300      	movs	r3, #0
 80032d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80032dc:	682f      	ldr	r7, [r5, #0]
 80032de:	602b      	str	r3, [r5, #0]
 80032e0:	d032      	beq.n	8003348 <__sflush_r+0x94>
 80032e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80032e4:	89a3      	ldrh	r3, [r4, #12]
 80032e6:	075a      	lsls	r2, r3, #29
 80032e8:	d505      	bpl.n	80032f6 <__sflush_r+0x42>
 80032ea:	6863      	ldr	r3, [r4, #4]
 80032ec:	1ac0      	subs	r0, r0, r3
 80032ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80032f0:	b10b      	cbz	r3, 80032f6 <__sflush_r+0x42>
 80032f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80032f4:	1ac0      	subs	r0, r0, r3
 80032f6:	2300      	movs	r3, #0
 80032f8:	4602      	mov	r2, r0
 80032fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80032fc:	4628      	mov	r0, r5
 80032fe:	6a21      	ldr	r1, [r4, #32]
 8003300:	47b0      	blx	r6
 8003302:	1c43      	adds	r3, r0, #1
 8003304:	89a3      	ldrh	r3, [r4, #12]
 8003306:	d106      	bne.n	8003316 <__sflush_r+0x62>
 8003308:	6829      	ldr	r1, [r5, #0]
 800330a:	291d      	cmp	r1, #29
 800330c:	d82c      	bhi.n	8003368 <__sflush_r+0xb4>
 800330e:	4a29      	ldr	r2, [pc, #164]	; (80033b4 <__sflush_r+0x100>)
 8003310:	40ca      	lsrs	r2, r1
 8003312:	07d6      	lsls	r6, r2, #31
 8003314:	d528      	bpl.n	8003368 <__sflush_r+0xb4>
 8003316:	2200      	movs	r2, #0
 8003318:	6062      	str	r2, [r4, #4]
 800331a:	6922      	ldr	r2, [r4, #16]
 800331c:	04d9      	lsls	r1, r3, #19
 800331e:	6022      	str	r2, [r4, #0]
 8003320:	d504      	bpl.n	800332c <__sflush_r+0x78>
 8003322:	1c42      	adds	r2, r0, #1
 8003324:	d101      	bne.n	800332a <__sflush_r+0x76>
 8003326:	682b      	ldr	r3, [r5, #0]
 8003328:	b903      	cbnz	r3, 800332c <__sflush_r+0x78>
 800332a:	6560      	str	r0, [r4, #84]	; 0x54
 800332c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800332e:	602f      	str	r7, [r5, #0]
 8003330:	2900      	cmp	r1, #0
 8003332:	d0cb      	beq.n	80032cc <__sflush_r+0x18>
 8003334:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003338:	4299      	cmp	r1, r3
 800333a:	d002      	beq.n	8003342 <__sflush_r+0x8e>
 800333c:	4628      	mov	r0, r5
 800333e:	f000 f9d5 	bl	80036ec <_free_r>
 8003342:	2000      	movs	r0, #0
 8003344:	6360      	str	r0, [r4, #52]	; 0x34
 8003346:	e7c2      	b.n	80032ce <__sflush_r+0x1a>
 8003348:	6a21      	ldr	r1, [r4, #32]
 800334a:	2301      	movs	r3, #1
 800334c:	4628      	mov	r0, r5
 800334e:	47b0      	blx	r6
 8003350:	1c41      	adds	r1, r0, #1
 8003352:	d1c7      	bne.n	80032e4 <__sflush_r+0x30>
 8003354:	682b      	ldr	r3, [r5, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d0c4      	beq.n	80032e4 <__sflush_r+0x30>
 800335a:	2b1d      	cmp	r3, #29
 800335c:	d001      	beq.n	8003362 <__sflush_r+0xae>
 800335e:	2b16      	cmp	r3, #22
 8003360:	d101      	bne.n	8003366 <__sflush_r+0xb2>
 8003362:	602f      	str	r7, [r5, #0]
 8003364:	e7b2      	b.n	80032cc <__sflush_r+0x18>
 8003366:	89a3      	ldrh	r3, [r4, #12]
 8003368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800336c:	81a3      	strh	r3, [r4, #12]
 800336e:	e7ae      	b.n	80032ce <__sflush_r+0x1a>
 8003370:	690f      	ldr	r7, [r1, #16]
 8003372:	2f00      	cmp	r7, #0
 8003374:	d0aa      	beq.n	80032cc <__sflush_r+0x18>
 8003376:	0793      	lsls	r3, r2, #30
 8003378:	bf18      	it	ne
 800337a:	2300      	movne	r3, #0
 800337c:	680e      	ldr	r6, [r1, #0]
 800337e:	bf08      	it	eq
 8003380:	694b      	ldreq	r3, [r1, #20]
 8003382:	1bf6      	subs	r6, r6, r7
 8003384:	600f      	str	r7, [r1, #0]
 8003386:	608b      	str	r3, [r1, #8]
 8003388:	2e00      	cmp	r6, #0
 800338a:	dd9f      	ble.n	80032cc <__sflush_r+0x18>
 800338c:	4633      	mov	r3, r6
 800338e:	463a      	mov	r2, r7
 8003390:	4628      	mov	r0, r5
 8003392:	6a21      	ldr	r1, [r4, #32]
 8003394:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003398:	47e0      	blx	ip
 800339a:	2800      	cmp	r0, #0
 800339c:	dc06      	bgt.n	80033ac <__sflush_r+0xf8>
 800339e:	89a3      	ldrh	r3, [r4, #12]
 80033a0:	f04f 30ff 	mov.w	r0, #4294967295
 80033a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033a8:	81a3      	strh	r3, [r4, #12]
 80033aa:	e790      	b.n	80032ce <__sflush_r+0x1a>
 80033ac:	4407      	add	r7, r0
 80033ae:	1a36      	subs	r6, r6, r0
 80033b0:	e7ea      	b.n	8003388 <__sflush_r+0xd4>
 80033b2:	bf00      	nop
 80033b4:	20400001 	.word	0x20400001

080033b8 <_fflush_r>:
 80033b8:	b538      	push	{r3, r4, r5, lr}
 80033ba:	690b      	ldr	r3, [r1, #16]
 80033bc:	4605      	mov	r5, r0
 80033be:	460c      	mov	r4, r1
 80033c0:	b913      	cbnz	r3, 80033c8 <_fflush_r+0x10>
 80033c2:	2500      	movs	r5, #0
 80033c4:	4628      	mov	r0, r5
 80033c6:	bd38      	pop	{r3, r4, r5, pc}
 80033c8:	b118      	cbz	r0, 80033d2 <_fflush_r+0x1a>
 80033ca:	6983      	ldr	r3, [r0, #24]
 80033cc:	b90b      	cbnz	r3, 80033d2 <_fflush_r+0x1a>
 80033ce:	f000 f887 	bl	80034e0 <__sinit>
 80033d2:	4b14      	ldr	r3, [pc, #80]	; (8003424 <_fflush_r+0x6c>)
 80033d4:	429c      	cmp	r4, r3
 80033d6:	d11b      	bne.n	8003410 <_fflush_r+0x58>
 80033d8:	686c      	ldr	r4, [r5, #4]
 80033da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d0ef      	beq.n	80033c2 <_fflush_r+0xa>
 80033e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80033e4:	07d0      	lsls	r0, r2, #31
 80033e6:	d404      	bmi.n	80033f2 <_fflush_r+0x3a>
 80033e8:	0599      	lsls	r1, r3, #22
 80033ea:	d402      	bmi.n	80033f2 <_fflush_r+0x3a>
 80033ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80033ee:	f000 f915 	bl	800361c <__retarget_lock_acquire_recursive>
 80033f2:	4628      	mov	r0, r5
 80033f4:	4621      	mov	r1, r4
 80033f6:	f7ff ff5d 	bl	80032b4 <__sflush_r>
 80033fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80033fc:	4605      	mov	r5, r0
 80033fe:	07da      	lsls	r2, r3, #31
 8003400:	d4e0      	bmi.n	80033c4 <_fflush_r+0xc>
 8003402:	89a3      	ldrh	r3, [r4, #12]
 8003404:	059b      	lsls	r3, r3, #22
 8003406:	d4dd      	bmi.n	80033c4 <_fflush_r+0xc>
 8003408:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800340a:	f000 f908 	bl	800361e <__retarget_lock_release_recursive>
 800340e:	e7d9      	b.n	80033c4 <_fflush_r+0xc>
 8003410:	4b05      	ldr	r3, [pc, #20]	; (8003428 <_fflush_r+0x70>)
 8003412:	429c      	cmp	r4, r3
 8003414:	d101      	bne.n	800341a <_fflush_r+0x62>
 8003416:	68ac      	ldr	r4, [r5, #8]
 8003418:	e7df      	b.n	80033da <_fflush_r+0x22>
 800341a:	4b04      	ldr	r3, [pc, #16]	; (800342c <_fflush_r+0x74>)
 800341c:	429c      	cmp	r4, r3
 800341e:	bf08      	it	eq
 8003420:	68ec      	ldreq	r4, [r5, #12]
 8003422:	e7da      	b.n	80033da <_fflush_r+0x22>
 8003424:	08003afc 	.word	0x08003afc
 8003428:	08003b1c 	.word	0x08003b1c
 800342c:	08003adc 	.word	0x08003adc

08003430 <std>:
 8003430:	2300      	movs	r3, #0
 8003432:	b510      	push	{r4, lr}
 8003434:	4604      	mov	r4, r0
 8003436:	e9c0 3300 	strd	r3, r3, [r0]
 800343a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800343e:	6083      	str	r3, [r0, #8]
 8003440:	8181      	strh	r1, [r0, #12]
 8003442:	6643      	str	r3, [r0, #100]	; 0x64
 8003444:	81c2      	strh	r2, [r0, #14]
 8003446:	6183      	str	r3, [r0, #24]
 8003448:	4619      	mov	r1, r3
 800344a:	2208      	movs	r2, #8
 800344c:	305c      	adds	r0, #92	; 0x5c
 800344e:	f7ff fde5 	bl	800301c <memset>
 8003452:	4b05      	ldr	r3, [pc, #20]	; (8003468 <std+0x38>)
 8003454:	6224      	str	r4, [r4, #32]
 8003456:	6263      	str	r3, [r4, #36]	; 0x24
 8003458:	4b04      	ldr	r3, [pc, #16]	; (800346c <std+0x3c>)
 800345a:	62a3      	str	r3, [r4, #40]	; 0x28
 800345c:	4b04      	ldr	r3, [pc, #16]	; (8003470 <std+0x40>)
 800345e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003460:	4b04      	ldr	r3, [pc, #16]	; (8003474 <std+0x44>)
 8003462:	6323      	str	r3, [r4, #48]	; 0x30
 8003464:	bd10      	pop	{r4, pc}
 8003466:	bf00      	nop
 8003468:	080038c5 	.word	0x080038c5
 800346c:	080038e7 	.word	0x080038e7
 8003470:	0800391f 	.word	0x0800391f
 8003474:	08003943 	.word	0x08003943

08003478 <_cleanup_r>:
 8003478:	4901      	ldr	r1, [pc, #4]	; (8003480 <_cleanup_r+0x8>)
 800347a:	f000 b8af 	b.w	80035dc <_fwalk_reent>
 800347e:	bf00      	nop
 8003480:	080033b9 	.word	0x080033b9

08003484 <__sfmoreglue>:
 8003484:	2268      	movs	r2, #104	; 0x68
 8003486:	b570      	push	{r4, r5, r6, lr}
 8003488:	1e4d      	subs	r5, r1, #1
 800348a:	4355      	muls	r5, r2
 800348c:	460e      	mov	r6, r1
 800348e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003492:	f000 f993 	bl	80037bc <_malloc_r>
 8003496:	4604      	mov	r4, r0
 8003498:	b140      	cbz	r0, 80034ac <__sfmoreglue+0x28>
 800349a:	2100      	movs	r1, #0
 800349c:	e9c0 1600 	strd	r1, r6, [r0]
 80034a0:	300c      	adds	r0, #12
 80034a2:	60a0      	str	r0, [r4, #8]
 80034a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80034a8:	f7ff fdb8 	bl	800301c <memset>
 80034ac:	4620      	mov	r0, r4
 80034ae:	bd70      	pop	{r4, r5, r6, pc}

080034b0 <__sfp_lock_acquire>:
 80034b0:	4801      	ldr	r0, [pc, #4]	; (80034b8 <__sfp_lock_acquire+0x8>)
 80034b2:	f000 b8b3 	b.w	800361c <__retarget_lock_acquire_recursive>
 80034b6:	bf00      	nop
 80034b8:	20000219 	.word	0x20000219

080034bc <__sfp_lock_release>:
 80034bc:	4801      	ldr	r0, [pc, #4]	; (80034c4 <__sfp_lock_release+0x8>)
 80034be:	f000 b8ae 	b.w	800361e <__retarget_lock_release_recursive>
 80034c2:	bf00      	nop
 80034c4:	20000219 	.word	0x20000219

080034c8 <__sinit_lock_acquire>:
 80034c8:	4801      	ldr	r0, [pc, #4]	; (80034d0 <__sinit_lock_acquire+0x8>)
 80034ca:	f000 b8a7 	b.w	800361c <__retarget_lock_acquire_recursive>
 80034ce:	bf00      	nop
 80034d0:	2000021a 	.word	0x2000021a

080034d4 <__sinit_lock_release>:
 80034d4:	4801      	ldr	r0, [pc, #4]	; (80034dc <__sinit_lock_release+0x8>)
 80034d6:	f000 b8a2 	b.w	800361e <__retarget_lock_release_recursive>
 80034da:	bf00      	nop
 80034dc:	2000021a 	.word	0x2000021a

080034e0 <__sinit>:
 80034e0:	b510      	push	{r4, lr}
 80034e2:	4604      	mov	r4, r0
 80034e4:	f7ff fff0 	bl	80034c8 <__sinit_lock_acquire>
 80034e8:	69a3      	ldr	r3, [r4, #24]
 80034ea:	b11b      	cbz	r3, 80034f4 <__sinit+0x14>
 80034ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034f0:	f7ff bff0 	b.w	80034d4 <__sinit_lock_release>
 80034f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80034f8:	6523      	str	r3, [r4, #80]	; 0x50
 80034fa:	4b13      	ldr	r3, [pc, #76]	; (8003548 <__sinit+0x68>)
 80034fc:	4a13      	ldr	r2, [pc, #76]	; (800354c <__sinit+0x6c>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	62a2      	str	r2, [r4, #40]	; 0x28
 8003502:	42a3      	cmp	r3, r4
 8003504:	bf08      	it	eq
 8003506:	2301      	moveq	r3, #1
 8003508:	4620      	mov	r0, r4
 800350a:	bf08      	it	eq
 800350c:	61a3      	streq	r3, [r4, #24]
 800350e:	f000 f81f 	bl	8003550 <__sfp>
 8003512:	6060      	str	r0, [r4, #4]
 8003514:	4620      	mov	r0, r4
 8003516:	f000 f81b 	bl	8003550 <__sfp>
 800351a:	60a0      	str	r0, [r4, #8]
 800351c:	4620      	mov	r0, r4
 800351e:	f000 f817 	bl	8003550 <__sfp>
 8003522:	2200      	movs	r2, #0
 8003524:	2104      	movs	r1, #4
 8003526:	60e0      	str	r0, [r4, #12]
 8003528:	6860      	ldr	r0, [r4, #4]
 800352a:	f7ff ff81 	bl	8003430 <std>
 800352e:	2201      	movs	r2, #1
 8003530:	2109      	movs	r1, #9
 8003532:	68a0      	ldr	r0, [r4, #8]
 8003534:	f7ff ff7c 	bl	8003430 <std>
 8003538:	2202      	movs	r2, #2
 800353a:	2112      	movs	r1, #18
 800353c:	68e0      	ldr	r0, [r4, #12]
 800353e:	f7ff ff77 	bl	8003430 <std>
 8003542:	2301      	movs	r3, #1
 8003544:	61a3      	str	r3, [r4, #24]
 8003546:	e7d1      	b.n	80034ec <__sinit+0xc>
 8003548:	08003ad8 	.word	0x08003ad8
 800354c:	08003479 	.word	0x08003479

08003550 <__sfp>:
 8003550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003552:	4607      	mov	r7, r0
 8003554:	f7ff ffac 	bl	80034b0 <__sfp_lock_acquire>
 8003558:	4b1e      	ldr	r3, [pc, #120]	; (80035d4 <__sfp+0x84>)
 800355a:	681e      	ldr	r6, [r3, #0]
 800355c:	69b3      	ldr	r3, [r6, #24]
 800355e:	b913      	cbnz	r3, 8003566 <__sfp+0x16>
 8003560:	4630      	mov	r0, r6
 8003562:	f7ff ffbd 	bl	80034e0 <__sinit>
 8003566:	3648      	adds	r6, #72	; 0x48
 8003568:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800356c:	3b01      	subs	r3, #1
 800356e:	d503      	bpl.n	8003578 <__sfp+0x28>
 8003570:	6833      	ldr	r3, [r6, #0]
 8003572:	b30b      	cbz	r3, 80035b8 <__sfp+0x68>
 8003574:	6836      	ldr	r6, [r6, #0]
 8003576:	e7f7      	b.n	8003568 <__sfp+0x18>
 8003578:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800357c:	b9d5      	cbnz	r5, 80035b4 <__sfp+0x64>
 800357e:	4b16      	ldr	r3, [pc, #88]	; (80035d8 <__sfp+0x88>)
 8003580:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003584:	60e3      	str	r3, [r4, #12]
 8003586:	6665      	str	r5, [r4, #100]	; 0x64
 8003588:	f000 f847 	bl	800361a <__retarget_lock_init_recursive>
 800358c:	f7ff ff96 	bl	80034bc <__sfp_lock_release>
 8003590:	2208      	movs	r2, #8
 8003592:	4629      	mov	r1, r5
 8003594:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003598:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800359c:	6025      	str	r5, [r4, #0]
 800359e:	61a5      	str	r5, [r4, #24]
 80035a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80035a4:	f7ff fd3a 	bl	800301c <memset>
 80035a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80035ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80035b0:	4620      	mov	r0, r4
 80035b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035b4:	3468      	adds	r4, #104	; 0x68
 80035b6:	e7d9      	b.n	800356c <__sfp+0x1c>
 80035b8:	2104      	movs	r1, #4
 80035ba:	4638      	mov	r0, r7
 80035bc:	f7ff ff62 	bl	8003484 <__sfmoreglue>
 80035c0:	4604      	mov	r4, r0
 80035c2:	6030      	str	r0, [r6, #0]
 80035c4:	2800      	cmp	r0, #0
 80035c6:	d1d5      	bne.n	8003574 <__sfp+0x24>
 80035c8:	f7ff ff78 	bl	80034bc <__sfp_lock_release>
 80035cc:	230c      	movs	r3, #12
 80035ce:	603b      	str	r3, [r7, #0]
 80035d0:	e7ee      	b.n	80035b0 <__sfp+0x60>
 80035d2:	bf00      	nop
 80035d4:	08003ad8 	.word	0x08003ad8
 80035d8:	ffff0001 	.word	0xffff0001

080035dc <_fwalk_reent>:
 80035dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035e0:	4606      	mov	r6, r0
 80035e2:	4688      	mov	r8, r1
 80035e4:	2700      	movs	r7, #0
 80035e6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80035ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80035ee:	f1b9 0901 	subs.w	r9, r9, #1
 80035f2:	d505      	bpl.n	8003600 <_fwalk_reent+0x24>
 80035f4:	6824      	ldr	r4, [r4, #0]
 80035f6:	2c00      	cmp	r4, #0
 80035f8:	d1f7      	bne.n	80035ea <_fwalk_reent+0xe>
 80035fa:	4638      	mov	r0, r7
 80035fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003600:	89ab      	ldrh	r3, [r5, #12]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d907      	bls.n	8003616 <_fwalk_reent+0x3a>
 8003606:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800360a:	3301      	adds	r3, #1
 800360c:	d003      	beq.n	8003616 <_fwalk_reent+0x3a>
 800360e:	4629      	mov	r1, r5
 8003610:	4630      	mov	r0, r6
 8003612:	47c0      	blx	r8
 8003614:	4307      	orrs	r7, r0
 8003616:	3568      	adds	r5, #104	; 0x68
 8003618:	e7e9      	b.n	80035ee <_fwalk_reent+0x12>

0800361a <__retarget_lock_init_recursive>:
 800361a:	4770      	bx	lr

0800361c <__retarget_lock_acquire_recursive>:
 800361c:	4770      	bx	lr

0800361e <__retarget_lock_release_recursive>:
 800361e:	4770      	bx	lr

08003620 <__swhatbuf_r>:
 8003620:	b570      	push	{r4, r5, r6, lr}
 8003622:	460e      	mov	r6, r1
 8003624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003628:	4614      	mov	r4, r2
 800362a:	2900      	cmp	r1, #0
 800362c:	461d      	mov	r5, r3
 800362e:	b096      	sub	sp, #88	; 0x58
 8003630:	da08      	bge.n	8003644 <__swhatbuf_r+0x24>
 8003632:	2200      	movs	r2, #0
 8003634:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003638:	602a      	str	r2, [r5, #0]
 800363a:	061a      	lsls	r2, r3, #24
 800363c:	d410      	bmi.n	8003660 <__swhatbuf_r+0x40>
 800363e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003642:	e00e      	b.n	8003662 <__swhatbuf_r+0x42>
 8003644:	466a      	mov	r2, sp
 8003646:	f000 f9a3 	bl	8003990 <_fstat_r>
 800364a:	2800      	cmp	r0, #0
 800364c:	dbf1      	blt.n	8003632 <__swhatbuf_r+0x12>
 800364e:	9a01      	ldr	r2, [sp, #4]
 8003650:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003654:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003658:	425a      	negs	r2, r3
 800365a:	415a      	adcs	r2, r3
 800365c:	602a      	str	r2, [r5, #0]
 800365e:	e7ee      	b.n	800363e <__swhatbuf_r+0x1e>
 8003660:	2340      	movs	r3, #64	; 0x40
 8003662:	2000      	movs	r0, #0
 8003664:	6023      	str	r3, [r4, #0]
 8003666:	b016      	add	sp, #88	; 0x58
 8003668:	bd70      	pop	{r4, r5, r6, pc}
	...

0800366c <__smakebuf_r>:
 800366c:	898b      	ldrh	r3, [r1, #12]
 800366e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003670:	079d      	lsls	r5, r3, #30
 8003672:	4606      	mov	r6, r0
 8003674:	460c      	mov	r4, r1
 8003676:	d507      	bpl.n	8003688 <__smakebuf_r+0x1c>
 8003678:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800367c:	6023      	str	r3, [r4, #0]
 800367e:	6123      	str	r3, [r4, #16]
 8003680:	2301      	movs	r3, #1
 8003682:	6163      	str	r3, [r4, #20]
 8003684:	b002      	add	sp, #8
 8003686:	bd70      	pop	{r4, r5, r6, pc}
 8003688:	466a      	mov	r2, sp
 800368a:	ab01      	add	r3, sp, #4
 800368c:	f7ff ffc8 	bl	8003620 <__swhatbuf_r>
 8003690:	9900      	ldr	r1, [sp, #0]
 8003692:	4605      	mov	r5, r0
 8003694:	4630      	mov	r0, r6
 8003696:	f000 f891 	bl	80037bc <_malloc_r>
 800369a:	b948      	cbnz	r0, 80036b0 <__smakebuf_r+0x44>
 800369c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036a0:	059a      	lsls	r2, r3, #22
 80036a2:	d4ef      	bmi.n	8003684 <__smakebuf_r+0x18>
 80036a4:	f023 0303 	bic.w	r3, r3, #3
 80036a8:	f043 0302 	orr.w	r3, r3, #2
 80036ac:	81a3      	strh	r3, [r4, #12]
 80036ae:	e7e3      	b.n	8003678 <__smakebuf_r+0xc>
 80036b0:	4b0d      	ldr	r3, [pc, #52]	; (80036e8 <__smakebuf_r+0x7c>)
 80036b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80036b4:	89a3      	ldrh	r3, [r4, #12]
 80036b6:	6020      	str	r0, [r4, #0]
 80036b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036bc:	81a3      	strh	r3, [r4, #12]
 80036be:	9b00      	ldr	r3, [sp, #0]
 80036c0:	6120      	str	r0, [r4, #16]
 80036c2:	6163      	str	r3, [r4, #20]
 80036c4:	9b01      	ldr	r3, [sp, #4]
 80036c6:	b15b      	cbz	r3, 80036e0 <__smakebuf_r+0x74>
 80036c8:	4630      	mov	r0, r6
 80036ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80036ce:	f000 f971 	bl	80039b4 <_isatty_r>
 80036d2:	b128      	cbz	r0, 80036e0 <__smakebuf_r+0x74>
 80036d4:	89a3      	ldrh	r3, [r4, #12]
 80036d6:	f023 0303 	bic.w	r3, r3, #3
 80036da:	f043 0301 	orr.w	r3, r3, #1
 80036de:	81a3      	strh	r3, [r4, #12]
 80036e0:	89a0      	ldrh	r0, [r4, #12]
 80036e2:	4305      	orrs	r5, r0
 80036e4:	81a5      	strh	r5, [r4, #12]
 80036e6:	e7cd      	b.n	8003684 <__smakebuf_r+0x18>
 80036e8:	08003479 	.word	0x08003479

080036ec <_free_r>:
 80036ec:	b538      	push	{r3, r4, r5, lr}
 80036ee:	4605      	mov	r5, r0
 80036f0:	2900      	cmp	r1, #0
 80036f2:	d040      	beq.n	8003776 <_free_r+0x8a>
 80036f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036f8:	1f0c      	subs	r4, r1, #4
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	bfb8      	it	lt
 80036fe:	18e4      	addlt	r4, r4, r3
 8003700:	f000 f97a 	bl	80039f8 <__malloc_lock>
 8003704:	4a1c      	ldr	r2, [pc, #112]	; (8003778 <_free_r+0x8c>)
 8003706:	6813      	ldr	r3, [r2, #0]
 8003708:	b933      	cbnz	r3, 8003718 <_free_r+0x2c>
 800370a:	6063      	str	r3, [r4, #4]
 800370c:	6014      	str	r4, [r2, #0]
 800370e:	4628      	mov	r0, r5
 8003710:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003714:	f000 b976 	b.w	8003a04 <__malloc_unlock>
 8003718:	42a3      	cmp	r3, r4
 800371a:	d908      	bls.n	800372e <_free_r+0x42>
 800371c:	6820      	ldr	r0, [r4, #0]
 800371e:	1821      	adds	r1, r4, r0
 8003720:	428b      	cmp	r3, r1
 8003722:	bf01      	itttt	eq
 8003724:	6819      	ldreq	r1, [r3, #0]
 8003726:	685b      	ldreq	r3, [r3, #4]
 8003728:	1809      	addeq	r1, r1, r0
 800372a:	6021      	streq	r1, [r4, #0]
 800372c:	e7ed      	b.n	800370a <_free_r+0x1e>
 800372e:	461a      	mov	r2, r3
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	b10b      	cbz	r3, 8003738 <_free_r+0x4c>
 8003734:	42a3      	cmp	r3, r4
 8003736:	d9fa      	bls.n	800372e <_free_r+0x42>
 8003738:	6811      	ldr	r1, [r2, #0]
 800373a:	1850      	adds	r0, r2, r1
 800373c:	42a0      	cmp	r0, r4
 800373e:	d10b      	bne.n	8003758 <_free_r+0x6c>
 8003740:	6820      	ldr	r0, [r4, #0]
 8003742:	4401      	add	r1, r0
 8003744:	1850      	adds	r0, r2, r1
 8003746:	4283      	cmp	r3, r0
 8003748:	6011      	str	r1, [r2, #0]
 800374a:	d1e0      	bne.n	800370e <_free_r+0x22>
 800374c:	6818      	ldr	r0, [r3, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	4401      	add	r1, r0
 8003752:	6011      	str	r1, [r2, #0]
 8003754:	6053      	str	r3, [r2, #4]
 8003756:	e7da      	b.n	800370e <_free_r+0x22>
 8003758:	d902      	bls.n	8003760 <_free_r+0x74>
 800375a:	230c      	movs	r3, #12
 800375c:	602b      	str	r3, [r5, #0]
 800375e:	e7d6      	b.n	800370e <_free_r+0x22>
 8003760:	6820      	ldr	r0, [r4, #0]
 8003762:	1821      	adds	r1, r4, r0
 8003764:	428b      	cmp	r3, r1
 8003766:	bf01      	itttt	eq
 8003768:	6819      	ldreq	r1, [r3, #0]
 800376a:	685b      	ldreq	r3, [r3, #4]
 800376c:	1809      	addeq	r1, r1, r0
 800376e:	6021      	streq	r1, [r4, #0]
 8003770:	6063      	str	r3, [r4, #4]
 8003772:	6054      	str	r4, [r2, #4]
 8003774:	e7cb      	b.n	800370e <_free_r+0x22>
 8003776:	bd38      	pop	{r3, r4, r5, pc}
 8003778:	2000021c 	.word	0x2000021c

0800377c <sbrk_aligned>:
 800377c:	b570      	push	{r4, r5, r6, lr}
 800377e:	4e0e      	ldr	r6, [pc, #56]	; (80037b8 <sbrk_aligned+0x3c>)
 8003780:	460c      	mov	r4, r1
 8003782:	6831      	ldr	r1, [r6, #0]
 8003784:	4605      	mov	r5, r0
 8003786:	b911      	cbnz	r1, 800378e <sbrk_aligned+0x12>
 8003788:	f000 f88c 	bl	80038a4 <_sbrk_r>
 800378c:	6030      	str	r0, [r6, #0]
 800378e:	4621      	mov	r1, r4
 8003790:	4628      	mov	r0, r5
 8003792:	f000 f887 	bl	80038a4 <_sbrk_r>
 8003796:	1c43      	adds	r3, r0, #1
 8003798:	d00a      	beq.n	80037b0 <sbrk_aligned+0x34>
 800379a:	1cc4      	adds	r4, r0, #3
 800379c:	f024 0403 	bic.w	r4, r4, #3
 80037a0:	42a0      	cmp	r0, r4
 80037a2:	d007      	beq.n	80037b4 <sbrk_aligned+0x38>
 80037a4:	1a21      	subs	r1, r4, r0
 80037a6:	4628      	mov	r0, r5
 80037a8:	f000 f87c 	bl	80038a4 <_sbrk_r>
 80037ac:	3001      	adds	r0, #1
 80037ae:	d101      	bne.n	80037b4 <sbrk_aligned+0x38>
 80037b0:	f04f 34ff 	mov.w	r4, #4294967295
 80037b4:	4620      	mov	r0, r4
 80037b6:	bd70      	pop	{r4, r5, r6, pc}
 80037b8:	20000220 	.word	0x20000220

080037bc <_malloc_r>:
 80037bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037c0:	1ccd      	adds	r5, r1, #3
 80037c2:	f025 0503 	bic.w	r5, r5, #3
 80037c6:	3508      	adds	r5, #8
 80037c8:	2d0c      	cmp	r5, #12
 80037ca:	bf38      	it	cc
 80037cc:	250c      	movcc	r5, #12
 80037ce:	2d00      	cmp	r5, #0
 80037d0:	4607      	mov	r7, r0
 80037d2:	db01      	blt.n	80037d8 <_malloc_r+0x1c>
 80037d4:	42a9      	cmp	r1, r5
 80037d6:	d905      	bls.n	80037e4 <_malloc_r+0x28>
 80037d8:	230c      	movs	r3, #12
 80037da:	2600      	movs	r6, #0
 80037dc:	603b      	str	r3, [r7, #0]
 80037de:	4630      	mov	r0, r6
 80037e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037e4:	4e2e      	ldr	r6, [pc, #184]	; (80038a0 <_malloc_r+0xe4>)
 80037e6:	f000 f907 	bl	80039f8 <__malloc_lock>
 80037ea:	6833      	ldr	r3, [r6, #0]
 80037ec:	461c      	mov	r4, r3
 80037ee:	bb34      	cbnz	r4, 800383e <_malloc_r+0x82>
 80037f0:	4629      	mov	r1, r5
 80037f2:	4638      	mov	r0, r7
 80037f4:	f7ff ffc2 	bl	800377c <sbrk_aligned>
 80037f8:	1c43      	adds	r3, r0, #1
 80037fa:	4604      	mov	r4, r0
 80037fc:	d14d      	bne.n	800389a <_malloc_r+0xde>
 80037fe:	6834      	ldr	r4, [r6, #0]
 8003800:	4626      	mov	r6, r4
 8003802:	2e00      	cmp	r6, #0
 8003804:	d140      	bne.n	8003888 <_malloc_r+0xcc>
 8003806:	6823      	ldr	r3, [r4, #0]
 8003808:	4631      	mov	r1, r6
 800380a:	4638      	mov	r0, r7
 800380c:	eb04 0803 	add.w	r8, r4, r3
 8003810:	f000 f848 	bl	80038a4 <_sbrk_r>
 8003814:	4580      	cmp	r8, r0
 8003816:	d13a      	bne.n	800388e <_malloc_r+0xd2>
 8003818:	6821      	ldr	r1, [r4, #0]
 800381a:	3503      	adds	r5, #3
 800381c:	1a6d      	subs	r5, r5, r1
 800381e:	f025 0503 	bic.w	r5, r5, #3
 8003822:	3508      	adds	r5, #8
 8003824:	2d0c      	cmp	r5, #12
 8003826:	bf38      	it	cc
 8003828:	250c      	movcc	r5, #12
 800382a:	4638      	mov	r0, r7
 800382c:	4629      	mov	r1, r5
 800382e:	f7ff ffa5 	bl	800377c <sbrk_aligned>
 8003832:	3001      	adds	r0, #1
 8003834:	d02b      	beq.n	800388e <_malloc_r+0xd2>
 8003836:	6823      	ldr	r3, [r4, #0]
 8003838:	442b      	add	r3, r5
 800383a:	6023      	str	r3, [r4, #0]
 800383c:	e00e      	b.n	800385c <_malloc_r+0xa0>
 800383e:	6822      	ldr	r2, [r4, #0]
 8003840:	1b52      	subs	r2, r2, r5
 8003842:	d41e      	bmi.n	8003882 <_malloc_r+0xc6>
 8003844:	2a0b      	cmp	r2, #11
 8003846:	d916      	bls.n	8003876 <_malloc_r+0xba>
 8003848:	1961      	adds	r1, r4, r5
 800384a:	42a3      	cmp	r3, r4
 800384c:	6025      	str	r5, [r4, #0]
 800384e:	bf18      	it	ne
 8003850:	6059      	strne	r1, [r3, #4]
 8003852:	6863      	ldr	r3, [r4, #4]
 8003854:	bf08      	it	eq
 8003856:	6031      	streq	r1, [r6, #0]
 8003858:	5162      	str	r2, [r4, r5]
 800385a:	604b      	str	r3, [r1, #4]
 800385c:	4638      	mov	r0, r7
 800385e:	f104 060b 	add.w	r6, r4, #11
 8003862:	f000 f8cf 	bl	8003a04 <__malloc_unlock>
 8003866:	f026 0607 	bic.w	r6, r6, #7
 800386a:	1d23      	adds	r3, r4, #4
 800386c:	1af2      	subs	r2, r6, r3
 800386e:	d0b6      	beq.n	80037de <_malloc_r+0x22>
 8003870:	1b9b      	subs	r3, r3, r6
 8003872:	50a3      	str	r3, [r4, r2]
 8003874:	e7b3      	b.n	80037de <_malloc_r+0x22>
 8003876:	6862      	ldr	r2, [r4, #4]
 8003878:	42a3      	cmp	r3, r4
 800387a:	bf0c      	ite	eq
 800387c:	6032      	streq	r2, [r6, #0]
 800387e:	605a      	strne	r2, [r3, #4]
 8003880:	e7ec      	b.n	800385c <_malloc_r+0xa0>
 8003882:	4623      	mov	r3, r4
 8003884:	6864      	ldr	r4, [r4, #4]
 8003886:	e7b2      	b.n	80037ee <_malloc_r+0x32>
 8003888:	4634      	mov	r4, r6
 800388a:	6876      	ldr	r6, [r6, #4]
 800388c:	e7b9      	b.n	8003802 <_malloc_r+0x46>
 800388e:	230c      	movs	r3, #12
 8003890:	4638      	mov	r0, r7
 8003892:	603b      	str	r3, [r7, #0]
 8003894:	f000 f8b6 	bl	8003a04 <__malloc_unlock>
 8003898:	e7a1      	b.n	80037de <_malloc_r+0x22>
 800389a:	6025      	str	r5, [r4, #0]
 800389c:	e7de      	b.n	800385c <_malloc_r+0xa0>
 800389e:	bf00      	nop
 80038a0:	2000021c 	.word	0x2000021c

080038a4 <_sbrk_r>:
 80038a4:	b538      	push	{r3, r4, r5, lr}
 80038a6:	2300      	movs	r3, #0
 80038a8:	4d05      	ldr	r5, [pc, #20]	; (80038c0 <_sbrk_r+0x1c>)
 80038aa:	4604      	mov	r4, r0
 80038ac:	4608      	mov	r0, r1
 80038ae:	602b      	str	r3, [r5, #0]
 80038b0:	f7fc feee 	bl	8000690 <_sbrk>
 80038b4:	1c43      	adds	r3, r0, #1
 80038b6:	d102      	bne.n	80038be <_sbrk_r+0x1a>
 80038b8:	682b      	ldr	r3, [r5, #0]
 80038ba:	b103      	cbz	r3, 80038be <_sbrk_r+0x1a>
 80038bc:	6023      	str	r3, [r4, #0]
 80038be:	bd38      	pop	{r3, r4, r5, pc}
 80038c0:	20000224 	.word	0x20000224

080038c4 <__sread>:
 80038c4:	b510      	push	{r4, lr}
 80038c6:	460c      	mov	r4, r1
 80038c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038cc:	f000 f8a0 	bl	8003a10 <_read_r>
 80038d0:	2800      	cmp	r0, #0
 80038d2:	bfab      	itete	ge
 80038d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80038d6:	89a3      	ldrhlt	r3, [r4, #12]
 80038d8:	181b      	addge	r3, r3, r0
 80038da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80038de:	bfac      	ite	ge
 80038e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80038e2:	81a3      	strhlt	r3, [r4, #12]
 80038e4:	bd10      	pop	{r4, pc}

080038e6 <__swrite>:
 80038e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038ea:	461f      	mov	r7, r3
 80038ec:	898b      	ldrh	r3, [r1, #12]
 80038ee:	4605      	mov	r5, r0
 80038f0:	05db      	lsls	r3, r3, #23
 80038f2:	460c      	mov	r4, r1
 80038f4:	4616      	mov	r6, r2
 80038f6:	d505      	bpl.n	8003904 <__swrite+0x1e>
 80038f8:	2302      	movs	r3, #2
 80038fa:	2200      	movs	r2, #0
 80038fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003900:	f000 f868 	bl	80039d4 <_lseek_r>
 8003904:	89a3      	ldrh	r3, [r4, #12]
 8003906:	4632      	mov	r2, r6
 8003908:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800390c:	81a3      	strh	r3, [r4, #12]
 800390e:	4628      	mov	r0, r5
 8003910:	463b      	mov	r3, r7
 8003912:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003916:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800391a:	f000 b817 	b.w	800394c <_write_r>

0800391e <__sseek>:
 800391e:	b510      	push	{r4, lr}
 8003920:	460c      	mov	r4, r1
 8003922:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003926:	f000 f855 	bl	80039d4 <_lseek_r>
 800392a:	1c43      	adds	r3, r0, #1
 800392c:	89a3      	ldrh	r3, [r4, #12]
 800392e:	bf15      	itete	ne
 8003930:	6560      	strne	r0, [r4, #84]	; 0x54
 8003932:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003936:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800393a:	81a3      	strheq	r3, [r4, #12]
 800393c:	bf18      	it	ne
 800393e:	81a3      	strhne	r3, [r4, #12]
 8003940:	bd10      	pop	{r4, pc}

08003942 <__sclose>:
 8003942:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003946:	f000 b813 	b.w	8003970 <_close_r>
	...

0800394c <_write_r>:
 800394c:	b538      	push	{r3, r4, r5, lr}
 800394e:	4604      	mov	r4, r0
 8003950:	4608      	mov	r0, r1
 8003952:	4611      	mov	r1, r2
 8003954:	2200      	movs	r2, #0
 8003956:	4d05      	ldr	r5, [pc, #20]	; (800396c <_write_r+0x20>)
 8003958:	602a      	str	r2, [r5, #0]
 800395a:	461a      	mov	r2, r3
 800395c:	f7fc fe4c 	bl	80005f8 <_write>
 8003960:	1c43      	adds	r3, r0, #1
 8003962:	d102      	bne.n	800396a <_write_r+0x1e>
 8003964:	682b      	ldr	r3, [r5, #0]
 8003966:	b103      	cbz	r3, 800396a <_write_r+0x1e>
 8003968:	6023      	str	r3, [r4, #0]
 800396a:	bd38      	pop	{r3, r4, r5, pc}
 800396c:	20000224 	.word	0x20000224

08003970 <_close_r>:
 8003970:	b538      	push	{r3, r4, r5, lr}
 8003972:	2300      	movs	r3, #0
 8003974:	4d05      	ldr	r5, [pc, #20]	; (800398c <_close_r+0x1c>)
 8003976:	4604      	mov	r4, r0
 8003978:	4608      	mov	r0, r1
 800397a:	602b      	str	r3, [r5, #0]
 800397c:	f7fc fe58 	bl	8000630 <_close>
 8003980:	1c43      	adds	r3, r0, #1
 8003982:	d102      	bne.n	800398a <_close_r+0x1a>
 8003984:	682b      	ldr	r3, [r5, #0]
 8003986:	b103      	cbz	r3, 800398a <_close_r+0x1a>
 8003988:	6023      	str	r3, [r4, #0]
 800398a:	bd38      	pop	{r3, r4, r5, pc}
 800398c:	20000224 	.word	0x20000224

08003990 <_fstat_r>:
 8003990:	b538      	push	{r3, r4, r5, lr}
 8003992:	2300      	movs	r3, #0
 8003994:	4d06      	ldr	r5, [pc, #24]	; (80039b0 <_fstat_r+0x20>)
 8003996:	4604      	mov	r4, r0
 8003998:	4608      	mov	r0, r1
 800399a:	4611      	mov	r1, r2
 800399c:	602b      	str	r3, [r5, #0]
 800399e:	f7fc fe52 	bl	8000646 <_fstat>
 80039a2:	1c43      	adds	r3, r0, #1
 80039a4:	d102      	bne.n	80039ac <_fstat_r+0x1c>
 80039a6:	682b      	ldr	r3, [r5, #0]
 80039a8:	b103      	cbz	r3, 80039ac <_fstat_r+0x1c>
 80039aa:	6023      	str	r3, [r4, #0]
 80039ac:	bd38      	pop	{r3, r4, r5, pc}
 80039ae:	bf00      	nop
 80039b0:	20000224 	.word	0x20000224

080039b4 <_isatty_r>:
 80039b4:	b538      	push	{r3, r4, r5, lr}
 80039b6:	2300      	movs	r3, #0
 80039b8:	4d05      	ldr	r5, [pc, #20]	; (80039d0 <_isatty_r+0x1c>)
 80039ba:	4604      	mov	r4, r0
 80039bc:	4608      	mov	r0, r1
 80039be:	602b      	str	r3, [r5, #0]
 80039c0:	f7fc fe50 	bl	8000664 <_isatty>
 80039c4:	1c43      	adds	r3, r0, #1
 80039c6:	d102      	bne.n	80039ce <_isatty_r+0x1a>
 80039c8:	682b      	ldr	r3, [r5, #0]
 80039ca:	b103      	cbz	r3, 80039ce <_isatty_r+0x1a>
 80039cc:	6023      	str	r3, [r4, #0]
 80039ce:	bd38      	pop	{r3, r4, r5, pc}
 80039d0:	20000224 	.word	0x20000224

080039d4 <_lseek_r>:
 80039d4:	b538      	push	{r3, r4, r5, lr}
 80039d6:	4604      	mov	r4, r0
 80039d8:	4608      	mov	r0, r1
 80039da:	4611      	mov	r1, r2
 80039dc:	2200      	movs	r2, #0
 80039de:	4d05      	ldr	r5, [pc, #20]	; (80039f4 <_lseek_r+0x20>)
 80039e0:	602a      	str	r2, [r5, #0]
 80039e2:	461a      	mov	r2, r3
 80039e4:	f7fc fe48 	bl	8000678 <_lseek>
 80039e8:	1c43      	adds	r3, r0, #1
 80039ea:	d102      	bne.n	80039f2 <_lseek_r+0x1e>
 80039ec:	682b      	ldr	r3, [r5, #0]
 80039ee:	b103      	cbz	r3, 80039f2 <_lseek_r+0x1e>
 80039f0:	6023      	str	r3, [r4, #0]
 80039f2:	bd38      	pop	{r3, r4, r5, pc}
 80039f4:	20000224 	.word	0x20000224

080039f8 <__malloc_lock>:
 80039f8:	4801      	ldr	r0, [pc, #4]	; (8003a00 <__malloc_lock+0x8>)
 80039fa:	f7ff be0f 	b.w	800361c <__retarget_lock_acquire_recursive>
 80039fe:	bf00      	nop
 8003a00:	20000218 	.word	0x20000218

08003a04 <__malloc_unlock>:
 8003a04:	4801      	ldr	r0, [pc, #4]	; (8003a0c <__malloc_unlock+0x8>)
 8003a06:	f7ff be0a 	b.w	800361e <__retarget_lock_release_recursive>
 8003a0a:	bf00      	nop
 8003a0c:	20000218 	.word	0x20000218

08003a10 <_read_r>:
 8003a10:	b538      	push	{r3, r4, r5, lr}
 8003a12:	4604      	mov	r4, r0
 8003a14:	4608      	mov	r0, r1
 8003a16:	4611      	mov	r1, r2
 8003a18:	2200      	movs	r2, #0
 8003a1a:	4d05      	ldr	r5, [pc, #20]	; (8003a30 <_read_r+0x20>)
 8003a1c:	602a      	str	r2, [r5, #0]
 8003a1e:	461a      	mov	r2, r3
 8003a20:	f7fc fdcd 	bl	80005be <_read>
 8003a24:	1c43      	adds	r3, r0, #1
 8003a26:	d102      	bne.n	8003a2e <_read_r+0x1e>
 8003a28:	682b      	ldr	r3, [r5, #0]
 8003a2a:	b103      	cbz	r3, 8003a2e <_read_r+0x1e>
 8003a2c:	6023      	str	r3, [r4, #0]
 8003a2e:	bd38      	pop	{r3, r4, r5, pc}
 8003a30:	20000224 	.word	0x20000224

08003a34 <_init>:
 8003a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a36:	bf00      	nop
 8003a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a3a:	bc08      	pop	{r3}
 8003a3c:	469e      	mov	lr, r3
 8003a3e:	4770      	bx	lr

08003a40 <_fini>:
 8003a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a42:	bf00      	nop
 8003a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a46:	bc08      	pop	{r3}
 8003a48:	469e      	mov	lr, r3
 8003a4a:	4770      	bx	lr
